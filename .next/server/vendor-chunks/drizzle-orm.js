"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/drizzle-orm";
exports.ids = ["vendor-chunks/drizzle-orm"];
exports.modules = {

/***/ "(rsc)/./node_modules/drizzle-orm/alias-cf8e03cd.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/drizzle-orm/alias-cf8e03cd.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $: () => (/* binding */ PgArrayBuilder),\n/* harmony export */   A: () => (/* binding */ getOrderByOperators),\n/* harmony export */   B: () => (/* binding */ normalizeRelation),\n/* harmony export */   C: () => (/* binding */ ColumnBuilder),\n/* harmony export */   D: () => (/* binding */ DrizzleError),\n/* harmony export */   E: () => (/* binding */ and),\n/* harmony export */   F: () => (/* binding */ eq),\n/* harmony export */   G: () => (/* binding */ aliasedTable),\n/* harmony export */   H: () => (/* binding */ applyMixins),\n/* harmony export */   I: () => (/* binding */ getTableColumns),\n/* harmony export */   J: () => (/* binding */ TypedQueryBuilder),\n/* harmony export */   K: () => (/* binding */ getTableLikeName),\n/* harmony export */   L: () => (/* binding */ PgColumnBuilder),\n/* harmony export */   M: () => (/* binding */ Many),\n/* harmony export */   N: () => (/* binding */ PgColumn),\n/* harmony export */   O: () => (/* binding */ One),\n/* harmony export */   P: () => (/* binding */ PgDialect),\n/* harmony export */   Q: () => (/* binding */ QueryPromise),\n/* harmony export */   R: () => (/* binding */ pgTableWithSchema),\n/* harmony export */   S: () => (/* binding */ SQL),\n/* harmony export */   T: () => (/* binding */ Table),\n/* harmony export */   U: () => (/* binding */ pgViewWithSchema),\n/* harmony export */   V: () => (/* binding */ ViewBaseConfig),\n/* harmony export */   W: () => (/* binding */ WithSubquery),\n/* harmony export */   X: () => (/* binding */ pgMaterializedViewWithSchema),\n/* harmony export */   Y: () => (/* binding */ CheckBuilder),\n/* harmony export */   Z: () => (/* binding */ Check),\n/* harmony export */   _: () => (/* binding */ check),\n/* harmony export */   a: () => (/* binding */ extractTablesRelationalConfig),\n/* harmony export */   a$: () => (/* binding */ PgView),\n/* harmony export */   a0: () => (/* binding */ PgArray),\n/* harmony export */   a1: () => (/* binding */ PgDateBuilder),\n/* harmony export */   a2: () => (/* binding */ PgDate),\n/* harmony export */   a3: () => (/* binding */ PgDateStringBuilder),\n/* harmony export */   a4: () => (/* binding */ PgDateString),\n/* harmony export */   a5: () => (/* binding */ date),\n/* harmony export */   a6: () => (/* binding */ PgJsonBuilder),\n/* harmony export */   a7: () => (/* binding */ PgJson),\n/* harmony export */   a8: () => (/* binding */ json),\n/* harmony export */   a9: () => (/* binding */ PgJsonbBuilder),\n/* harmony export */   aA: () => (/* binding */ PrimaryKeyBuilder),\n/* harmony export */   aB: () => (/* binding */ PrimaryKey),\n/* harmony export */   aC: () => (/* binding */ PgSelectQueryBuilder),\n/* harmony export */   aD: () => (/* binding */ PgSelect),\n/* harmony export */   aE: () => (/* binding */ InlineForeignKeys),\n/* harmony export */   aF: () => (/* binding */ PgTable),\n/* harmony export */   aG: () => (/* binding */ pgTable),\n/* harmony export */   aH: () => (/* binding */ pgTableCreator),\n/* harmony export */   aI: () => (/* binding */ unique),\n/* harmony export */   aJ: () => (/* binding */ uniqueKeyName),\n/* harmony export */   aK: () => (/* binding */ UniqueConstraintBuilder),\n/* harmony export */   aL: () => (/* binding */ UniqueOnConstraintBuilder),\n/* harmony export */   aM: () => (/* binding */ UniqueConstraint),\n/* harmony export */   aN: () => (/* binding */ getTableConfig),\n/* harmony export */   aO: () => (/* binding */ getViewConfig),\n/* harmony export */   aP: () => (/* binding */ getMaterializedViewConfig),\n/* harmony export */   aQ: () => (/* binding */ parsePgNestedArray),\n/* harmony export */   aR: () => (/* binding */ parsePgArray),\n/* harmony export */   aS: () => (/* binding */ makePgArray),\n/* harmony export */   aT: () => (/* binding */ DefaultViewBuilderCore),\n/* harmony export */   aU: () => (/* binding */ ViewBuilder),\n/* harmony export */   aV: () => (/* binding */ ManualViewBuilder),\n/* harmony export */   aW: () => (/* binding */ MaterializedViewBuilderCore),\n/* harmony export */   aX: () => (/* binding */ MaterializedViewBuilder),\n/* harmony export */   aY: () => (/* binding */ ManualMaterializedViewBuilder),\n/* harmony export */   aZ: () => (/* binding */ PgViewBase),\n/* harmony export */   a_: () => (/* binding */ PgViewConfig),\n/* harmony export */   aa: () => (/* binding */ PgJsonb),\n/* harmony export */   ab: () => (/* binding */ jsonb),\n/* harmony export */   ac: () => (/* binding */ PgNumericBuilder),\n/* harmony export */   ad: () => (/* binding */ PgNumeric),\n/* harmony export */   ae: () => (/* binding */ numeric),\n/* harmony export */   af: () => (/* binding */ decimal),\n/* harmony export */   ag: () => (/* binding */ PgTimeBuilder),\n/* harmony export */   ah: () => (/* binding */ PgTime),\n/* harmony export */   ai: () => (/* binding */ time),\n/* harmony export */   aj: () => (/* binding */ PgTimestampBuilder),\n/* harmony export */   ak: () => (/* binding */ PgTimestamp),\n/* harmony export */   al: () => (/* binding */ PgTimestampStringBuilder),\n/* harmony export */   am: () => (/* binding */ PgTimestampString),\n/* harmony export */   an: () => (/* binding */ timestamp),\n/* harmony export */   ao: () => (/* binding */ PgUUIDBuilder),\n/* harmony export */   ap: () => (/* binding */ PgUUID),\n/* harmony export */   aq: () => (/* binding */ uuid),\n/* harmony export */   ar: () => (/* binding */ ForeignKeyBuilder),\n/* harmony export */   as: () => (/* binding */ ForeignKey),\n/* harmony export */   at: () => (/* binding */ foreignKey),\n/* harmony export */   au: () => (/* binding */ IndexBuilderOn),\n/* harmony export */   av: () => (/* binding */ IndexBuilder),\n/* harmony export */   aw: () => (/* binding */ Index),\n/* harmony export */   ax: () => (/* binding */ index),\n/* harmony export */   ay: () => (/* binding */ uniqueIndex),\n/* harmony export */   az: () => (/* binding */ primaryKey),\n/* harmony export */   b: () => (/* binding */ Param),\n/* harmony export */   b0: () => (/* binding */ PgMaterializedViewConfig),\n/* harmony export */   b1: () => (/* binding */ PgMaterializedView),\n/* harmony export */   b2: () => (/* binding */ pgView),\n/* harmony export */   b3: () => (/* binding */ pgMaterializedView),\n/* harmony export */   b4: () => (/* binding */ ColumnAliasProxyHandler),\n/* harmony export */   b5: () => (/* binding */ RelationTableAliasProxyHandler),\n/* harmony export */   b6: () => (/* binding */ aliasedRelation),\n/* harmony export */   b7: () => (/* binding */ hasOwnEntityKind),\n/* harmony export */   b8: () => (/* binding */ bindIfParam),\n/* harmony export */   b9: () => (/* binding */ ne),\n/* harmony export */   bA: () => (/* binding */ createOne),\n/* harmony export */   bB: () => (/* binding */ createMany),\n/* harmony export */   bC: () => (/* binding */ FakePrimitiveParam),\n/* harmony export */   bD: () => (/* binding */ isSQLWrapper),\n/* harmony export */   bE: () => (/* binding */ StringChunk),\n/* harmony export */   bF: () => (/* binding */ Name),\n/* harmony export */   bG: () => (/* binding */ name),\n/* harmony export */   bH: () => (/* binding */ isDriverValueEncoder),\n/* harmony export */   bI: () => (/* binding */ noopDecoder),\n/* harmony export */   bJ: () => (/* binding */ noopEncoder),\n/* harmony export */   bK: () => (/* binding */ noopMapper),\n/* harmony export */   bL: () => (/* binding */ param),\n/* harmony export */   bM: () => (/* binding */ Placeholder),\n/* harmony export */   bN: () => (/* binding */ placeholder),\n/* harmony export */   bO: () => (/* binding */ TableName),\n/* harmony export */   bP: () => (/* binding */ Schema),\n/* harmony export */   bQ: () => (/* binding */ Columns),\n/* harmony export */   bR: () => (/* binding */ OriginalName),\n/* harmony export */   bS: () => (/* binding */ BaseName),\n/* harmony export */   bT: () => (/* binding */ IsAlias),\n/* harmony export */   bU: () => (/* binding */ ExtraConfigBuilder),\n/* harmony export */   bV: () => (/* binding */ isTable),\n/* harmony export */   bW: () => (/* binding */ iife),\n/* harmony export */   ba: () => (/* binding */ or),\n/* harmony export */   bb: () => (/* binding */ not),\n/* harmony export */   bc: () => (/* binding */ gt),\n/* harmony export */   bd: () => (/* binding */ gte),\n/* harmony export */   be: () => (/* binding */ lt),\n/* harmony export */   bf: () => (/* binding */ lte),\n/* harmony export */   bg: () => (/* binding */ inArray),\n/* harmony export */   bh: () => (/* binding */ notInArray),\n/* harmony export */   bi: () => (/* binding */ isNull),\n/* harmony export */   bj: () => (/* binding */ isNotNull),\n/* harmony export */   bk: () => (/* binding */ exists),\n/* harmony export */   bl: () => (/* binding */ notExists),\n/* harmony export */   bm: () => (/* binding */ between),\n/* harmony export */   bn: () => (/* binding */ notBetween),\n/* harmony export */   bo: () => (/* binding */ like),\n/* harmony export */   bp: () => (/* binding */ notLike),\n/* harmony export */   bq: () => (/* binding */ ilike),\n/* harmony export */   br: () => (/* binding */ notIlike),\n/* harmony export */   bs: () => (/* binding */ arrayContains),\n/* harmony export */   bt: () => (/* binding */ arrayContained),\n/* harmony export */   bu: () => (/* binding */ arrayOverlaps),\n/* harmony export */   bv: () => (/* binding */ asc),\n/* harmony export */   bw: () => (/* binding */ desc),\n/* harmony export */   bx: () => (/* binding */ Relation),\n/* harmony export */   by: () => (/* binding */ Relations),\n/* harmony export */   bz: () => (/* binding */ relations),\n/* harmony export */   c: () => (/* binding */ createTableRelationsHelpers),\n/* harmony export */   d: () => (/* binding */ mapUpdateSet),\n/* harmony export */   e: () => (/* binding */ entityKind),\n/* harmony export */   f: () => (/* binding */ fillPlaceholders),\n/* harmony export */   g: () => (/* binding */ mapRelationalRow),\n/* harmony export */   h: () => (/* binding */ QueryBuilder),\n/* harmony export */   i: () => (/* binding */ is),\n/* harmony export */   j: () => (/* binding */ SelectionProxyHandler),\n/* harmony export */   k: () => (/* binding */ PgSelectBuilder),\n/* harmony export */   l: () => (/* binding */ TransactionRollbackError),\n/* harmony export */   m: () => (/* binding */ mapResultRow),\n/* harmony export */   n: () => (/* binding */ TableAliasProxyHandler),\n/* harmony export */   o: () => (/* binding */ orderSelectedFields),\n/* harmony export */   p: () => (/* binding */ Column),\n/* harmony export */   q: () => (/* binding */ getTableName),\n/* harmony export */   r: () => (/* binding */ Subquery),\n/* harmony export */   s: () => (/* binding */ sql),\n/* harmony export */   t: () => (/* binding */ tracer),\n/* harmony export */   u: () => (/* binding */ SubqueryConfig),\n/* harmony export */   v: () => (/* binding */ View),\n/* harmony export */   w: () => (/* binding */ aliasedTableColumn),\n/* harmony export */   x: () => (/* binding */ getOperators),\n/* harmony export */   y: () => (/* binding */ mapColumnsInSQLToAlias),\n/* harmony export */   z: () => (/* binding */ mapColumnsInAliasedSQLToAlias)\n/* harmony export */ });\nconst entityKind = Symbol.for('drizzle:entityKind');\nconst hasOwnEntityKind = Symbol.for('drizzle:hasOwnEntityKind');\nfunction is(value, type) {\n    if (!value || typeof value !== 'object') {\n        return false;\n    }\n    if (value instanceof type) { // eslint-disable-line no-instanceof/no-instanceof\n        return true;\n    }\n    if (!Object.prototype.hasOwnProperty.call(type, entityKind)) {\n        throw new Error(`Class \"${type.name ?? '<unknown>'}\" doesn't look like a Drizzle entity. If this is incorrect and the class is provided by Drizzle, please report this as a bug.`);\n    }\n    let cls = value.constructor;\n    if (cls) {\n        // Traverse the prototype chain to find the entityKind\n        while (cls) {\n            if (entityKind in cls && cls[entityKind] === type[entityKind]) {\n                return true;\n            }\n            cls = Object.getPrototypeOf(cls);\n        }\n    }\n    return false;\n}\n\n/*\n    `Column` only accepts a full `ColumnConfig` as its generic.\n    To infer parts of the config, use `AnyColumn` that accepts a partial config.\n    See `GetColumnData` for example usage of inferring.\n*/\nclass Column {\n    table;\n    static [entityKind] = 'Column';\n    name;\n    primary;\n    notNull;\n    default;\n    defaultFn;\n    hasDefault;\n    isUnique;\n    uniqueName;\n    uniqueType;\n    dataType;\n    columnType;\n    enumValues = undefined;\n    config;\n    constructor(table, config) {\n        this.table = table;\n        this.config = config;\n        this.name = config.name;\n        this.notNull = config.notNull;\n        this.default = config.default;\n        this.defaultFn = config.defaultFn;\n        this.hasDefault = config.hasDefault;\n        this.primary = config.primaryKey;\n        this.isUnique = config.isUnique;\n        this.uniqueName = config.uniqueName;\n        this.uniqueType = config.uniqueType;\n        this.dataType = config.dataType;\n        this.columnType = config.columnType;\n    }\n    mapFromDriverValue(value) {\n        return value;\n    }\n    mapToDriverValue(value) {\n        return value;\n    }\n}\n\nconst ViewBaseConfig = Symbol.for('drizzle:ViewBaseConfig');\nclass View {\n    static [entityKind] = 'View';\n    /** @internal */\n    [ViewBaseConfig];\n    constructor({ name, schema, selectedFields, query }) {\n        this[ViewBaseConfig] = {\n            name,\n            originalName: name,\n            schema,\n            selectedFields,\n            query: query,\n            isExisting: !query,\n            isAlias: false,\n        };\n    }\n    getSQL() {\n        return new SQL([this]);\n    }\n}\n\nconst SubqueryConfig = Symbol.for('drizzle:SubqueryConfig');\nclass Subquery {\n    static [entityKind] = 'Subquery';\n    /** @internal */\n    [SubqueryConfig];\n    constructor(sql, selection, alias, isWith = false) {\n        this[SubqueryConfig] = {\n            sql,\n            selection,\n            alias,\n            isWith,\n        };\n    }\n    getSQL() {\n        return new SQL([this]);\n    }\n}\nclass WithSubquery extends Subquery {\n    static [entityKind] = 'WithSubquery';\n}\nclass SelectionProxyHandler {\n    static [entityKind] = 'SelectionProxyHandler';\n    config;\n    constructor(config) {\n        this.config = { ...config };\n    }\n    get(subquery, prop) {\n        if (prop === SubqueryConfig) {\n            return {\n                ...subquery[SubqueryConfig],\n                selection: new Proxy(subquery[SubqueryConfig].selection, this),\n            };\n        }\n        if (prop === ViewBaseConfig) {\n            return {\n                ...subquery[ViewBaseConfig],\n                selectedFields: new Proxy(subquery[ViewBaseConfig].selectedFields, this),\n            };\n        }\n        if (typeof prop === 'symbol') {\n            return subquery[prop];\n        }\n        const columns = is(subquery, Subquery)\n            ? subquery[SubqueryConfig].selection\n            : is(subquery, View)\n                ? subquery[ViewBaseConfig].selectedFields\n                : subquery;\n        const value = columns[prop];\n        if (is(value, SQL.Aliased)) {\n            // Never return the underlying SQL expression for a field previously selected in a subquery\n            if (this.config.sqlAliasedBehavior === 'sql' && !value.isSelectionField) {\n                return value.sql;\n            }\n            const newValue = value.clone();\n            newValue.isSelectionField = true;\n            return newValue;\n        }\n        if (is(value, SQL)) {\n            if (this.config.sqlBehavior === 'sql') {\n                return value;\n            }\n            throw new Error(`You tried to reference \"${prop}\" field from a subquery, which is a raw SQL field, but it doesn't have an alias declared. Please add an alias to the field using \".as('alias')\" method.`);\n        }\n        if (is(value, Column)) {\n            if (this.config.alias) {\n                return new Proxy(value, new ColumnAliasProxyHandler(new Proxy(value.table, new TableAliasProxyHandler(this.config.alias, this.config.replaceOriginalName ?? false))));\n            }\n            return value;\n        }\n        if (typeof value !== 'object' || value === null) {\n            return value;\n        }\n        return new Proxy(value, new SelectionProxyHandler(this.config));\n    }\n}\n\n/** @internal */\nfunction mapResultRow(columns, row, joinsNotNullableMap) {\n    // Key -> nested object key, value -> table name if all fields in the nested object are from the same table, false otherwise\n    const nullifyMap = {};\n    const result = columns.reduce((result, { path, field }, columnIndex) => {\n        let decoder;\n        if (is(field, Column)) {\n            decoder = field;\n        }\n        else if (is(field, SQL)) {\n            decoder = field.decoder;\n        }\n        else {\n            decoder = field.sql.decoder;\n        }\n        let node = result;\n        for (const [pathChunkIndex, pathChunk] of path.entries()) {\n            if (pathChunkIndex < path.length - 1) {\n                if (!(pathChunk in node)) {\n                    node[pathChunk] = {};\n                }\n                node = node[pathChunk];\n            }\n            else {\n                const rawValue = row[columnIndex];\n                const value = node[pathChunk] = rawValue === null ? null : decoder.mapFromDriverValue(rawValue);\n                if (joinsNotNullableMap && is(field, Column) && path.length === 2) {\n                    const objectName = path[0];\n                    if (!(objectName in nullifyMap)) {\n                        nullifyMap[objectName] = value === null ? getTableName(field.table) : false;\n                    }\n                    else if (typeof nullifyMap[objectName] === 'string' && nullifyMap[objectName] !== getTableName(field.table)) {\n                        nullifyMap[objectName] = false;\n                    }\n                }\n            }\n        }\n        return result;\n    }, {});\n    // Nullify all nested objects from nullifyMap that are nullable\n    if (joinsNotNullableMap && Object.keys(nullifyMap).length > 0) {\n        for (const [objectName, tableName] of Object.entries(nullifyMap)) {\n            if (typeof tableName === 'string' && !joinsNotNullableMap[tableName]) {\n                result[objectName] = null;\n            }\n        }\n    }\n    return result;\n}\n/** @internal */\nfunction orderSelectedFields(fields, pathPrefix) {\n    return Object.entries(fields).reduce((result, [name, field]) => {\n        if (typeof name !== 'string') {\n            return result;\n        }\n        const newPath = pathPrefix ? [...pathPrefix, name] : [name];\n        if (is(field, Column) || is(field, SQL) || is(field, SQL.Aliased)) {\n            result.push({ path: newPath, field });\n        }\n        else if (is(field, Table)) {\n            result.push(...orderSelectedFields(field[Table.Symbol.Columns], newPath));\n        }\n        else {\n            result.push(...orderSelectedFields(field, newPath));\n        }\n        return result;\n    }, []);\n}\n/** @internal */\nfunction mapUpdateSet(table, values) {\n    const entries = Object.entries(values)\n        .filter(([, value]) => value !== undefined)\n        .map(([key, value]) => {\n        // eslint-disable-next-line unicorn/prefer-ternary\n        if (is(value, SQL)) {\n            return [key, value];\n        }\n        else {\n            return [key, new Param(value, table[Table.Symbol.Columns][key])];\n        }\n    });\n    if (entries.length === 0) {\n        throw new Error('No values to set');\n    }\n    return Object.fromEntries(entries);\n}\n/** @internal */\nfunction applyMixins(baseClass, extendedClasses) {\n    for (const extendedClass of extendedClasses) {\n        for (const name of Object.getOwnPropertyNames(extendedClass.prototype)) {\n            Object.defineProperty(baseClass.prototype, name, Object.getOwnPropertyDescriptor(extendedClass.prototype, name) || Object.create(null));\n        }\n    }\n}\nfunction getTableColumns(table) {\n    return table[Table.Symbol.Columns];\n}\n/** @internal */\nfunction getTableLikeName(table) {\n    return is(table, Subquery)\n        ? table[SubqueryConfig].alias\n        : is(table, View)\n            ? table[ViewBaseConfig].name\n            : is(table, SQL)\n                ? undefined\n                : table[Table.Symbol.IsAlias]\n                    ? table[Table.Symbol.Name]\n                    : table[Table.Symbol.BaseName];\n}\nfunction iife(fn, ...args) {\n    return fn(...args);\n}\n\n/** @internal */\nconst TableName = Symbol.for('drizzle:Name');\n/** @internal */\nconst Schema = Symbol.for('drizzle:Schema');\n/** @internal */\nconst Columns = Symbol.for('drizzle:Columns');\n/** @internal */\nconst OriginalName = Symbol.for('drizzle:OriginalName');\n/** @internal */\nconst BaseName = Symbol.for('drizzle:BaseName');\n/** @internal */\nconst IsAlias = Symbol.for('drizzle:IsAlias');\n/** @internal */\nconst ExtraConfigBuilder = Symbol.for('drizzle:ExtraConfigBuilder');\nconst IsDrizzleTable = Symbol.for('drizzle:IsDrizzleTable');\nclass Table {\n    static [entityKind] = 'Table';\n    /** @internal */\n    static Symbol = {\n        Name: TableName,\n        Schema: Schema,\n        OriginalName: OriginalName,\n        Columns: Columns,\n        BaseName: BaseName,\n        IsAlias: IsAlias,\n        ExtraConfigBuilder: ExtraConfigBuilder,\n    };\n    /**\n     * @internal\n     * Can be changed if the table is aliased.\n     */\n    [TableName];\n    /**\n     * @internal\n     * Used to store the original name of the table, before any aliasing.\n     */\n    [OriginalName];\n    /** @internal */\n    [Schema];\n    /** @internal */\n    [Columns];\n    /**\n     *  @internal\n     * Used to store the table name before the transformation via the `tableCreator` functions.\n     */\n    [BaseName];\n    /** @internal */\n    [IsAlias] = false;\n    /** @internal */\n    [ExtraConfigBuilder] = undefined;\n    [IsDrizzleTable] = true;\n    constructor(name, schema, baseName) {\n        this[TableName] = this[OriginalName] = name;\n        this[Schema] = schema;\n        this[BaseName] = baseName;\n    }\n    getSQL() {\n        return new SQL([this]);\n    }\n}\nfunction isTable(table) {\n    return typeof table === 'object' && table !== null && IsDrizzleTable in table;\n}\nfunction getTableName(table) {\n    return table[TableName];\n}\n\nclass QueryPromise {\n    static [entityKind] = 'QueryPromise';\n    [Symbol.toStringTag] = 'QueryPromise';\n    catch(onRejected) {\n        return this.then(undefined, onRejected);\n    }\n    finally(onFinally) {\n        return this.then((value) => {\n            onFinally?.();\n            return value;\n        }, (reason) => {\n            onFinally?.();\n            throw reason;\n        });\n    }\n    then(onFulfilled, onRejected) {\n        return this.execute().then(onFulfilled, onRejected);\n    }\n}\n\n/** @internal */\nconst tracer = {\n    startActiveSpan(name, fn) {\n        {\n            return fn();\n        }\n    },\n};\n\nclass DrizzleError extends Error {\n    static [entityKind] = 'DrizzleError';\n    constructor(message) {\n        super(message);\n        this.name = 'DrizzleError';\n    }\n    static wrap(error, message) {\n        return error instanceof Error // eslint-disable-line no-instanceof/no-instanceof\n            ? new DrizzleError(message ? `${message}: ${error.message}` : error.message)\n            : new DrizzleError(message ?? String(error));\n    }\n}\nclass TransactionRollbackError extends DrizzleError {\n    static [entityKind] = 'TransactionRollbackError';\n    constructor() {\n        super('Rollback');\n    }\n}\n\n/** @internal */\nconst InlineForeignKeys = Symbol.for('drizzle:PgInlineForeignKeys');\nclass PgTable extends Table {\n    static [entityKind] = 'PgTable';\n    /** @internal */\n    static Symbol = Object.assign({}, Table.Symbol, {\n        InlineForeignKeys: InlineForeignKeys,\n    });\n    /**@internal */\n    [InlineForeignKeys] = [];\n    /** @internal */\n    [Table.Symbol.ExtraConfigBuilder] = undefined;\n}\n/** @internal */\nfunction pgTableWithSchema(name, columns, extraConfig, schema, baseName = name) {\n    const rawTable = new PgTable(name, schema, baseName);\n    const builtColumns = Object.fromEntries(Object.entries(columns).map(([name, colBuilderBase]) => {\n        const colBuilder = colBuilderBase;\n        const column = colBuilder.build(rawTable);\n        rawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n        return [name, column];\n    }));\n    const table = Object.assign(rawTable, builtColumns);\n    table[Table.Symbol.Columns] = builtColumns;\n    if (extraConfig) {\n        table[PgTable.Symbol.ExtraConfigBuilder] = extraConfig;\n    }\n    return table;\n}\nconst pgTable = (name, columns, extraConfig) => {\n    return pgTableWithSchema(name, columns, extraConfig, undefined);\n};\nfunction pgTableCreator(customizeTableName) {\n    return (name, columns, extraConfig) => {\n        return pgTableWithSchema(customizeTableName(name), columns, extraConfig, undefined, name);\n    };\n}\n\nclass CheckBuilder {\n    name;\n    value;\n    static [entityKind] = 'PgCheckBuilder';\n    brand;\n    constructor(name, value) {\n        this.name = name;\n        this.value = value;\n    }\n    /** @internal */\n    build(table) {\n        return new Check(table, this);\n    }\n}\nclass Check {\n    table;\n    static [entityKind] = 'PgCheck';\n    name;\n    value;\n    constructor(table, builder) {\n        this.table = table;\n        this.name = builder.name;\n        this.value = builder.value;\n    }\n}\nfunction check(name, value) {\n    return new CheckBuilder(name, value);\n}\n\nclass ForeignKeyBuilder {\n    static [entityKind] = 'PgForeignKeyBuilder';\n    /** @internal */\n    reference;\n    /** @internal */\n    _onUpdate = 'no action';\n    /** @internal */\n    _onDelete = 'no action';\n    constructor(config, actions) {\n        this.reference = () => {\n            const { columns, foreignColumns } = config();\n            return { columns, foreignTable: foreignColumns[0].table, foreignColumns };\n        };\n        if (actions) {\n            this._onUpdate = actions.onUpdate;\n            this._onDelete = actions.onDelete;\n        }\n    }\n    onUpdate(action) {\n        this._onUpdate = action === undefined ? 'no action' : action;\n        return this;\n    }\n    onDelete(action) {\n        this._onDelete = action === undefined ? 'no action' : action;\n        return this;\n    }\n    /** @internal */\n    build(table) {\n        return new ForeignKey(table, this);\n    }\n}\nclass ForeignKey {\n    table;\n    static [entityKind] = 'PgForeignKey';\n    reference;\n    onUpdate;\n    onDelete;\n    constructor(table, builder) {\n        this.table = table;\n        this.reference = builder.reference;\n        this.onUpdate = builder._onUpdate;\n        this.onDelete = builder._onDelete;\n    }\n    getName() {\n        const { columns, foreignColumns } = this.reference();\n        const columnNames = columns.map((column) => column.name);\n        const foreignColumnNames = foreignColumns.map((column) => column.name);\n        const chunks = [\n            this.table[PgTable.Symbol.Name],\n            ...columnNames,\n            foreignColumns[0].table[PgTable.Symbol.Name],\n            ...foreignColumnNames,\n        ];\n        return `${chunks.join('_')}_fk`;\n    }\n}\nfunction foreignKey(config) {\n    function mappedConfig() {\n        const { columns, foreignColumns } = config;\n        return {\n            columns,\n            foreignColumns,\n        };\n    }\n    return new ForeignKeyBuilder(mappedConfig);\n}\n\nclass IndexBuilderOn {\n    unique;\n    name;\n    static [entityKind] = 'PgIndexBuilderOn';\n    constructor(unique, name) {\n        this.unique = unique;\n        this.name = name;\n    }\n    on(...columns) {\n        return new IndexBuilder(columns, this.unique, false, this.name);\n    }\n    onOnly(...columns) {\n        return new IndexBuilder(columns, this.unique, true, this.name);\n    }\n}\nclass IndexBuilder {\n    static [entityKind] = 'PgIndexBuilder';\n    /** @internal */\n    config;\n    constructor(columns, unique, only, name) {\n        this.config = {\n            name,\n            columns,\n            unique,\n            only,\n        };\n    }\n    concurrently() {\n        this.config.concurrently = true;\n        return this;\n    }\n    using(method) {\n        this.config.using = method;\n        return this;\n    }\n    asc() {\n        this.config.order = 'asc';\n        return this;\n    }\n    desc() {\n        this.config.order = 'desc';\n        return this;\n    }\n    nullsFirst() {\n        this.config.nulls = 'first';\n        return this;\n    }\n    nullsLast() {\n        this.config.nulls = 'last';\n        return this;\n    }\n    where(condition) {\n        this.config.where = condition;\n        return this;\n    }\n    /** @internal */\n    build(table) {\n        return new Index(this.config, table);\n    }\n}\nclass Index {\n    static [entityKind] = 'PgIndex';\n    config;\n    constructor(config, table) {\n        this.config = { ...config, table };\n    }\n}\nfunction index(name) {\n    return new IndexBuilderOn(false, name);\n}\nfunction uniqueIndex(name) {\n    return new IndexBuilderOn(true, name);\n}\n\nfunction primaryKey(...columns) {\n    return new PrimaryKeyBuilder(columns);\n}\nclass PrimaryKeyBuilder {\n    static [entityKind] = 'PgPrimaryKeyBuilder';\n    /** @internal */\n    columns;\n    constructor(columns) {\n        this.columns = columns;\n    }\n    /** @internal */\n    build(table) {\n        return new PrimaryKey(table, this.columns);\n    }\n}\nclass PrimaryKey {\n    table;\n    static [entityKind] = 'PgPrimaryKey';\n    columns;\n    constructor(table, columns) {\n        this.table = table;\n        this.columns = columns;\n    }\n    getName() {\n        return `${this.table[PgTable.Symbol.Name]}_${this.columns.map((column) => column.name).join('_')}_pk`;\n    }\n}\n\nfunction unique(name) {\n    return new UniqueOnConstraintBuilder(name);\n}\nfunction uniqueKeyName(table, columns) {\n    return `${table[PgTable.Symbol.Name]}_${columns.join('_')}_unique`;\n}\nclass UniqueConstraintBuilder {\n    name;\n    static [entityKind] = 'PgUniqueConstraintBuilder';\n    /** @internal */\n    columns;\n    /** @internal */\n    nullsNotDistinctConfig = false;\n    constructor(columns, name) {\n        this.name = name;\n        this.columns = columns;\n    }\n    nullsNotDistinct() {\n        this.nullsNotDistinctConfig = true;\n        return this;\n    }\n    /** @internal */\n    build(table) {\n        return new UniqueConstraint(table, this.columns, this.nullsNotDistinctConfig, this.name);\n    }\n}\nclass UniqueOnConstraintBuilder {\n    static [entityKind] = 'PgUniqueOnConstraintBuilder';\n    /** @internal */\n    name;\n    constructor(name) {\n        this.name = name;\n    }\n    on(...columns) {\n        return new UniqueConstraintBuilder(columns, this.name);\n    }\n}\nclass UniqueConstraint {\n    table;\n    static [entityKind] = 'PgUniqueConstraint';\n    columns;\n    name;\n    nullsNotDistinct = false;\n    constructor(table, columns, nullsNotDistinct, name) {\n        this.table = table;\n        this.columns = columns;\n        this.name = name ?? uniqueKeyName(this.table, this.columns.map((column) => column.name));\n        this.nullsNotDistinct = nullsNotDistinct;\n    }\n    getName() {\n        return this.name;\n    }\n}\n\nfunction getTableConfig(table) {\n    const columns = Object.values(table[Table.Symbol.Columns]);\n    const indexes = [];\n    const checks = [];\n    const primaryKeys = [];\n    const foreignKeys = Object.values(table[PgTable.Symbol.InlineForeignKeys]);\n    const uniqueConstraints = [];\n    const name = table[Table.Symbol.Name];\n    const schema = table[Table.Symbol.Schema];\n    const extraConfigBuilder = table[PgTable.Symbol.ExtraConfigBuilder];\n    if (extraConfigBuilder !== undefined) {\n        const extraConfig = extraConfigBuilder(table[Table.Symbol.Columns]);\n        for (const builder of Object.values(extraConfig)) {\n            if (is(builder, IndexBuilder)) {\n                indexes.push(builder.build(table));\n            }\n            else if (is(builder, CheckBuilder)) {\n                checks.push(builder.build(table));\n            }\n            else if (is(builder, UniqueConstraintBuilder)) {\n                uniqueConstraints.push(builder.build(table));\n            }\n            else if (is(builder, PrimaryKeyBuilder)) {\n                primaryKeys.push(builder.build(table));\n            }\n            else if (is(builder, ForeignKeyBuilder)) {\n                foreignKeys.push(builder.build(table));\n            }\n        }\n    }\n    return {\n        columns,\n        indexes,\n        foreignKeys,\n        checks,\n        primaryKeys,\n        uniqueConstraints,\n        name,\n        schema,\n    };\n}\nfunction getViewConfig(view) {\n    return {\n        ...view[ViewBaseConfig],\n        ...view[PgViewConfig],\n    };\n}\nfunction getMaterializedViewConfig(view) {\n    return {\n        ...view[ViewBaseConfig],\n        ...view[PgMaterializedViewConfig],\n    };\n}\nfunction parsePgArrayValue(arrayString, startFrom, inQuotes) {\n    for (let i = startFrom; i < arrayString.length; i++) {\n        const char = arrayString[i];\n        if (char === '\\\\') {\n            i++;\n            continue;\n        }\n        if (char === '\"') {\n            return [arrayString.slice(startFrom, i).replace(/\\\\/g, ''), i + 1];\n        }\n        if (inQuotes) {\n            continue;\n        }\n        if (char === ',' || char === '}') {\n            return [arrayString.slice(startFrom, i).replace(/\\\\/g, ''), i];\n        }\n    }\n    return [arrayString.slice(startFrom).replace(/\\\\/g, ''), arrayString.length];\n}\nfunction parsePgNestedArray(arrayString, startFrom = 0) {\n    const result = [];\n    let i = startFrom;\n    let lastCharIsComma = false;\n    while (i < arrayString.length) {\n        const char = arrayString[i];\n        if (char === ',') {\n            if (lastCharIsComma || i === startFrom) {\n                result.push('');\n            }\n            lastCharIsComma = true;\n            i++;\n            continue;\n        }\n        lastCharIsComma = false;\n        if (char === '\\\\') {\n            i += 2;\n            continue;\n        }\n        if (char === '\"') {\n            const [value, startFrom] = parsePgArrayValue(arrayString, i + 1, true);\n            result.push(value);\n            i = startFrom;\n            continue;\n        }\n        if (char === '}') {\n            return [result, i + 1];\n        }\n        if (char === '{') {\n            const [value, startFrom] = parsePgNestedArray(arrayString, i + 1);\n            result.push(value);\n            i = startFrom;\n            continue;\n        }\n        const [value, newStartFrom] = parsePgArrayValue(arrayString, i, false);\n        result.push(value);\n        i = newStartFrom;\n    }\n    return [result, i];\n}\nfunction parsePgArray(arrayString) {\n    const [result] = parsePgNestedArray(arrayString, 1);\n    return result;\n}\nfunction makePgArray(array) {\n    return `{${array.map((item) => {\n        if (Array.isArray(item)) {\n            return makePgArray(item);\n        }\n        if (typeof item === 'string' && item.includes(',')) {\n            return `\"${item.replace(/\"/g, '\\\\\"')}\"`;\n        }\n        return `${item}`;\n    }).join(',')}}`;\n}\n\n// To understand how to use `ColumnBuilder` and `AnyColumnBuilder`, see `Column` and `AnyColumn` documentation.\nclass ColumnBuilder {\n    static [entityKind] = 'ColumnBuilder';\n    config;\n    constructor(name, dataType, columnType) {\n        this.config = {\n            name,\n            notNull: false,\n            default: undefined,\n            hasDefault: false,\n            primaryKey: false,\n            isUnique: false,\n            uniqueName: undefined,\n            uniqueType: undefined,\n            dataType,\n            columnType,\n        };\n    }\n    /**\n     * Changes the data type of the column. Commonly used with `json` columns. Also, useful for branded types.\n     *\n     * @example\n     * ```ts\n     * const users = pgTable('users', {\n     * \tid: integer('id').$type<UserId>().primaryKey(),\n     * \tdetails: json('details').$type<UserDetails>().notNull(),\n     * });\n     * ```\n     */\n    $type() {\n        return this;\n    }\n    /**\n     * Adds a `not null` clause to the column definition.\n     *\n     * Affects the `select` model of the table - columns *without* `not null` will be nullable on select.\n     */\n    notNull() {\n        this.config.notNull = true;\n        return this;\n    }\n    /**\n     * Adds a `default <value>` clause to the column definition.\n     *\n     * Affects the `insert` model of the table - columns *with* `default` are optional on insert.\n     *\n     * If you need to set a dynamic default value, use {@link $defaultFn} instead.\n     */\n    default(value) {\n        this.config.default = value;\n        this.config.hasDefault = true;\n        return this;\n    }\n    /**\n     * Adds a dynamic default value to the column.\n     * The function will be called when the row is inserted, and the returned value will be used as the column value.\n     *\n     * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n     */\n    $defaultFn(fn) {\n        this.config.defaultFn = fn;\n        this.config.hasDefault = true;\n        return this;\n    }\n    /**\n     * Alias for {@link $defaultFn}.\n     */\n    $default = this.$defaultFn;\n    /**\n     * Adds a `primary key` clause to the column definition. This implicitly makes the column `not null`.\n     *\n     * In SQLite, `integer primary key` implicitly makes the column auto-incrementing.\n     */\n    primaryKey() {\n        this.config.primaryKey = true;\n        this.config.notNull = true;\n        return this;\n    }\n}\n\nclass PgColumnBuilder extends ColumnBuilder {\n    foreignKeyConfigs = [];\n    static [entityKind] = 'PgColumnBuilder';\n    array(size) {\n        return new PgArrayBuilder(this.config.name, this, size);\n    }\n    references(ref, actions = {}) {\n        this.foreignKeyConfigs.push({ ref, actions });\n        return this;\n    }\n    unique(name, config) {\n        this.config.isUnique = true;\n        this.config.uniqueName = name;\n        this.config.uniqueType = config?.nulls;\n        return this;\n    }\n    /** @internal */\n    buildForeignKeys(column, table) {\n        return this.foreignKeyConfigs.map(({ ref, actions }) => {\n            return iife((ref, actions) => {\n                const builder = new ForeignKeyBuilder(() => {\n                    const foreignColumn = ref();\n                    return { columns: [column], foreignColumns: [foreignColumn] };\n                });\n                if (actions.onUpdate) {\n                    builder.onUpdate(actions.onUpdate);\n                }\n                if (actions.onDelete) {\n                    builder.onDelete(actions.onDelete);\n                }\n                return builder.build(table);\n            }, ref, actions);\n        });\n    }\n}\n// To understand how to use `PgColumn` and `PgColumn`, see `Column` and `AnyColumn` documentation.\nclass PgColumn extends Column {\n    table;\n    static [entityKind] = 'PgColumn';\n    constructor(table, config) {\n        if (!config.uniqueName) {\n            config.uniqueName = uniqueKeyName(table, [config.name]);\n        }\n        super(table, config);\n        this.table = table;\n    }\n}\n\nclass PgArrayBuilder extends PgColumnBuilder {\n    static [entityKind] = 'PgArrayBuilder';\n    constructor(name, baseBuilder, size) {\n        super(name, 'array', 'PgArray');\n        this.config.baseBuilder = baseBuilder;\n        this.config.size = size;\n    }\n    /** @internal */\n    build(table) {\n        const baseColumn = this.config.baseBuilder.build(table);\n        return new PgArray(table, this.config, baseColumn);\n    }\n}\nclass PgArray extends PgColumn {\n    baseColumn;\n    range;\n    size;\n    static [entityKind] = 'PgArray';\n    constructor(table, config, baseColumn, range) {\n        super(table, config);\n        this.baseColumn = baseColumn;\n        this.range = range;\n        this.size = config.size;\n    }\n    getSQLType() {\n        return `${this.baseColumn.getSQLType()}[${typeof this.size === 'number' ? this.size : ''}]`;\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === 'string') {\n            // Thank you node-postgres for not parsing enum arrays\n            value = parsePgArray(value);\n        }\n        return value.map((v) => this.baseColumn.mapFromDriverValue(v));\n    }\n    mapToDriverValue(value, isNestedArray = false) {\n        const a = value.map((v) => v === null\n            ? null\n            : is(this.baseColumn, PgArray)\n                ? this.baseColumn.mapToDriverValue(v, true)\n                : this.baseColumn.mapToDriverValue(v));\n        if (isNestedArray)\n            return a;\n        return makePgArray(a);\n    }\n}\n\nclass PgDateColumnBaseBuilder extends PgColumnBuilder {\n    static [entityKind] = 'PgDateColumnBaseBuilder';\n    defaultNow() {\n        return this.default(sql `now()`);\n    }\n}\n\nclass PgDateBuilder extends PgDateColumnBaseBuilder {\n    static [entityKind] = 'PgDateBuilder';\n    constructor(name) {\n        super(name, 'date', 'PgDate');\n    }\n    /** @internal */\n    build(table) {\n        return new PgDate(table, this.config);\n    }\n}\nclass PgDate extends PgColumn {\n    static [entityKind] = 'PgDate';\n    getSQLType() {\n        return 'date';\n    }\n    mapFromDriverValue(value) {\n        return new Date(value);\n    }\n    mapToDriverValue(value) {\n        return value.toISOString();\n    }\n}\nclass PgDateStringBuilder extends PgDateColumnBaseBuilder {\n    static [entityKind] = 'PgDateStringBuilder';\n    constructor(name) {\n        super(name, 'string', 'PgDateString');\n    }\n    /** @internal */\n    build(table) {\n        return new PgDateString(table, this.config);\n    }\n}\nclass PgDateString extends PgColumn {\n    static [entityKind] = 'PgDateString';\n    getSQLType() {\n        return 'date';\n    }\n}\nfunction date(name, config) {\n    if (config?.mode === 'date') {\n        return new PgDateBuilder(name);\n    }\n    return new PgDateStringBuilder(name);\n}\n\nclass PgJsonBuilder extends PgColumnBuilder {\n    static [entityKind] = 'PgJsonBuilder';\n    constructor(name) {\n        super(name, 'json', 'PgJson');\n    }\n    /** @internal */\n    build(table) {\n        return new PgJson(table, this.config);\n    }\n}\nclass PgJson extends PgColumn {\n    static [entityKind] = 'PgJson';\n    constructor(table, config) {\n        super(table, config);\n    }\n    getSQLType() {\n        return 'json';\n    }\n    mapToDriverValue(value) {\n        return JSON.stringify(value);\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === 'string') {\n            try {\n                return JSON.parse(value);\n            }\n            catch {\n                return value;\n            }\n        }\n        return value;\n    }\n}\nfunction json(name) {\n    return new PgJsonBuilder(name);\n}\n\nclass PgJsonbBuilder extends PgColumnBuilder {\n    static [entityKind] = 'PgJsonbBuilder';\n    constructor(name) {\n        super(name, 'json', 'PgJsonb');\n    }\n    /** @internal */\n    build(table) {\n        return new PgJsonb(table, this.config);\n    }\n}\nclass PgJsonb extends PgColumn {\n    static [entityKind] = 'PgJsonb';\n    constructor(table, config) {\n        super(table, config);\n    }\n    getSQLType() {\n        return 'jsonb';\n    }\n    mapToDriverValue(value) {\n        return JSON.stringify(value);\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === 'string') {\n            try {\n                return JSON.parse(value);\n            }\n            catch {\n                return value;\n            }\n        }\n        return value;\n    }\n}\nfunction jsonb(name) {\n    return new PgJsonbBuilder(name);\n}\n\nclass PgNumericBuilder extends PgColumnBuilder {\n    static [entityKind] = 'PgNumericBuilder';\n    constructor(name, precision, scale) {\n        super(name, 'string', 'PgNumeric');\n        this.config.precision = precision;\n        this.config.scale = scale;\n    }\n    /** @internal */\n    build(table) {\n        return new PgNumeric(table, this.config);\n    }\n}\nclass PgNumeric extends PgColumn {\n    static [entityKind] = 'PgNumeric';\n    precision;\n    scale;\n    constructor(table, config) {\n        super(table, config);\n        this.precision = config.precision;\n        this.scale = config.scale;\n    }\n    getSQLType() {\n        if (this.precision !== undefined && this.scale !== undefined) {\n            return `numeric(${this.precision}, ${this.scale})`;\n        }\n        else if (this.precision === undefined) {\n            return 'numeric';\n        }\n        else {\n            return `numeric(${this.precision})`;\n        }\n    }\n}\nfunction numeric(name, config) {\n    return new PgNumericBuilder(name, config?.precision, config?.scale);\n}\nconst decimal = numeric;\n\nclass PgTimeBuilder extends PgDateColumnBaseBuilder {\n    withTimezone;\n    precision;\n    static [entityKind] = 'PgTimeBuilder';\n    constructor(name, withTimezone, precision) {\n        super(name, 'string', 'PgTime');\n        this.withTimezone = withTimezone;\n        this.precision = precision;\n        this.config.withTimezone = withTimezone;\n        this.config.precision = precision;\n    }\n    /** @internal */\n    build(table) {\n        return new PgTime(table, this.config);\n    }\n}\nclass PgTime extends PgColumn {\n    static [entityKind] = 'PgTime';\n    withTimezone;\n    precision;\n    constructor(table, config) {\n        super(table, config);\n        this.withTimezone = config.withTimezone;\n        this.precision = config.precision;\n    }\n    getSQLType() {\n        const precision = this.precision === undefined ? '' : `(${this.precision})`;\n        return `time${precision}${this.withTimezone ? ' with time zone' : ''}`;\n    }\n}\nfunction time(name, config = {}) {\n    return new PgTimeBuilder(name, config.withTimezone ?? false, config.precision);\n}\n\nclass PgTimestampBuilder extends PgDateColumnBaseBuilder {\n    static [entityKind] = 'PgTimestampBuilder';\n    constructor(name, withTimezone, precision) {\n        super(name, 'date', 'PgTimestamp');\n        this.config.withTimezone = withTimezone;\n        this.config.precision = precision;\n    }\n    /** @internal */\n    build(table) {\n        return new PgTimestamp(table, this.config);\n    }\n}\nclass PgTimestamp extends PgColumn {\n    static [entityKind] = 'PgTimestamp';\n    withTimezone;\n    precision;\n    constructor(table, config) {\n        super(table, config);\n        this.withTimezone = config.withTimezone;\n        this.precision = config.precision;\n    }\n    getSQLType() {\n        const precision = this.precision === undefined ? '' : ` (${this.precision})`;\n        return `timestamp${precision}${this.withTimezone ? ' with time zone' : ''}`;\n    }\n    mapFromDriverValue = (value) => {\n        return new Date(this.withTimezone ? value : value + '+0000');\n    };\n    mapToDriverValue = (value) => {\n        return this.withTimezone ? value.toUTCString() : value.toISOString();\n    };\n}\nclass PgTimestampStringBuilder extends PgDateColumnBaseBuilder {\n    static [entityKind] = 'PgTimestampStringBuilder';\n    constructor(name, withTimezone, precision) {\n        super(name, 'string', 'PgTimestampString');\n        this.config.withTimezone = withTimezone;\n        this.config.precision = precision;\n    }\n    /** @internal */\n    build(table) {\n        return new PgTimestampString(table, this.config);\n    }\n}\nclass PgTimestampString extends PgColumn {\n    static [entityKind] = 'PgTimestampString';\n    withTimezone;\n    precision;\n    constructor(table, config) {\n        super(table, config);\n        this.withTimezone = config.withTimezone;\n        this.precision = config.precision;\n    }\n    getSQLType() {\n        const precision = this.precision === undefined ? '' : `(${this.precision})`;\n        return `timestamp${precision}${this.withTimezone ? ' with time zone' : ''}`;\n    }\n}\nfunction timestamp(name, config = {}) {\n    if (config.mode === 'string') {\n        return new PgTimestampStringBuilder(name, config.withTimezone ?? false, config.precision);\n    }\n    return new PgTimestampBuilder(name, config.withTimezone ?? false, config.precision);\n}\n\nclass PgUUIDBuilder extends PgColumnBuilder {\n    static [entityKind] = 'PgUUIDBuilder';\n    constructor(name) {\n        super(name, 'string', 'PgUUID');\n    }\n    /**\n     * Adds `default gen_random_uuid()` to the column definition.\n     */\n    defaultRandom() {\n        return this.default(sql `gen_random_uuid()`);\n    }\n    /** @internal */\n    build(table) {\n        return new PgUUID(table, this.config);\n    }\n}\nclass PgUUID extends PgColumn {\n    static [entityKind] = 'PgUUID';\n    getSQLType() {\n        return 'uuid';\n    }\n}\nfunction uuid(name) {\n    return new PgUUIDBuilder(name);\n}\n\nclass PgDialect {\n    static [entityKind] = 'PgDialect';\n    async migrate(migrations, session) {\n        const migrationTableCreate = sql `\n\t\t\tCREATE TABLE IF NOT EXISTS \"drizzle\".\"__drizzle_migrations\" (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at bigint\n\t\t\t)\n\t\t`;\n        await session.execute(sql `CREATE SCHEMA IF NOT EXISTS \"drizzle\"`);\n        await session.execute(migrationTableCreate);\n        const dbMigrations = await session.all(sql `select id, hash, created_at from \"drizzle\".\"__drizzle_migrations\" order by created_at desc limit 1`);\n        const lastDbMigration = dbMigrations[0];\n        await session.transaction(async (tx) => {\n            for await (const migration of migrations) {\n                if (!lastDbMigration\n                    || Number(lastDbMigration.created_at) < migration.folderMillis) {\n                    for (const stmt of migration.sql) {\n                        await tx.execute(sql.raw(stmt));\n                    }\n                    await tx.execute(sql `insert into \"drizzle\".\"__drizzle_migrations\" (\"hash\", \"created_at\") values(${migration.hash}, ${migration.folderMillis})`);\n                }\n            }\n        });\n    }\n    escapeName(name) {\n        return `\"${name}\"`;\n    }\n    escapeParam(num) {\n        return `$${num + 1}`;\n    }\n    escapeString(str) {\n        return `'${str.replace(/'/g, \"''\")}'`;\n    }\n    buildDeleteQuery({ table, where, returning }) {\n        const returningSql = returning\n            ? sql ` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n            : undefined;\n        const whereSql = where ? sql ` where ${where}` : undefined;\n        return sql `delete from ${table}${whereSql}${returningSql}`;\n    }\n    buildUpdateSet(table, set) {\n        const setEntries = Object.entries(set);\n        const setSize = setEntries.length;\n        return sql.join(setEntries\n            .flatMap(([colName, value], i) => {\n            const col = table[Table.Symbol.Columns][colName];\n            const res = sql `${sql.identifier(col.name)} = ${value}`;\n            if (i < setSize - 1) {\n                return [res, sql.raw(', ')];\n            }\n            return [res];\n        }));\n    }\n    buildUpdateQuery({ table, set, where, returning }) {\n        const setSql = this.buildUpdateSet(table, set);\n        const returningSql = returning\n            ? sql ` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n            : undefined;\n        const whereSql = where ? sql ` where ${where}` : undefined;\n        return sql `update ${table} set ${setSql}${whereSql}${returningSql}`;\n    }\n    /**\n     * Builds selection SQL with provided fields/expressions\n     *\n     * Examples:\n     *\n     * `select <selection> from`\n     *\n     * `insert ... returning <selection>`\n     *\n     * If `isSingleTable` is true, then columns won't be prefixed with table name\n     */\n    buildSelection(fields, { isSingleTable = false } = {}) {\n        const columnsLen = fields.length;\n        const chunks = fields\n            .flatMap(({ field }, i) => {\n            const chunk = [];\n            if (is(field, SQL.Aliased) && field.isSelectionField) {\n                chunk.push(sql.identifier(field.fieldAlias));\n            }\n            else if (is(field, SQL.Aliased) || is(field, SQL)) {\n                const query = is(field, SQL.Aliased) ? field.sql : field;\n                if (isSingleTable) {\n                    chunk.push(new SQL(query.queryChunks.map((c) => {\n                        if (is(c, PgColumn)) {\n                            return sql.identifier(c.name);\n                        }\n                        return c;\n                    })));\n                }\n                else {\n                    chunk.push(query);\n                }\n                if (is(field, SQL.Aliased)) {\n                    chunk.push(sql ` as ${sql.identifier(field.fieldAlias)}`);\n                }\n            }\n            else if (is(field, Column)) {\n                if (isSingleTable) {\n                    chunk.push(sql.identifier(field.name));\n                }\n                else {\n                    chunk.push(field);\n                }\n            }\n            if (i < columnsLen - 1) {\n                chunk.push(sql `, `);\n            }\n            return chunk;\n        });\n        return sql.join(chunks);\n    }\n    buildSelectQuery({ withList, fields, fieldsFlat, where, having, table, joins, orderBy, groupBy, limit, offset, lockingClauses, distinct, }) {\n        const fieldsList = fieldsFlat ?? orderSelectedFields(fields);\n        for (const f of fieldsList) {\n            if (is(f.field, Column)\n                && getTableName(f.field.table)\n                    !== (is(table, Subquery)\n                        ? table[SubqueryConfig].alias\n                        : is(table, PgViewBase)\n                            ? table[ViewBaseConfig].name\n                            : is(table, SQL)\n                                ? undefined\n                                : getTableName(table))\n                && !((table) => joins?.some(({ alias }) => alias === (table[Table.Symbol.IsAlias] ? getTableName(table) : table[Table.Symbol.BaseName])))(f.field.table)) {\n                const tableName = getTableName(f.field.table);\n                throw new Error(`Your \"${f.path.join('->')}\" field references a column \"${tableName}\".\"${f.field.name}\", but the table \"${tableName}\" is not part of the query! Did you forget to join it?`);\n            }\n        }\n        const isSingleTable = !joins || joins.length === 0;\n        let withSql;\n        if (withList?.length) {\n            const withSqlChunks = [sql `with `];\n            for (const [i, w] of withList.entries()) {\n                withSqlChunks.push(sql `${sql.identifier(w[SubqueryConfig].alias)} as (${w[SubqueryConfig].sql})`);\n                if (i < withList.length - 1) {\n                    withSqlChunks.push(sql `, `);\n                }\n            }\n            withSqlChunks.push(sql ` `);\n            withSql = sql.join(withSqlChunks);\n        }\n        let distinctSql;\n        if (distinct) {\n            distinctSql = distinct === true ? sql ` distinct` : sql ` distinct on (${sql.join(distinct.on, ', ')})`;\n        }\n        const selection = this.buildSelection(fieldsList, { isSingleTable });\n        const tableSql = (() => {\n            if (is(table, Table) && table[Table.Symbol.OriginalName] !== table[Table.Symbol.Name]) {\n                let fullName = sql `${sql.identifier(table[Table.Symbol.OriginalName])}`;\n                if (table[Table.Symbol.Schema]) {\n                    fullName = sql `${sql.identifier(table[Table.Symbol.Schema])}.${fullName}`;\n                }\n                return sql `${fullName} ${sql.identifier(table[Table.Symbol.Name])}`;\n            }\n            return table;\n        })();\n        const joinsArray = [];\n        if (joins) {\n            for (const [index, joinMeta] of joins.entries()) {\n                if (index === 0) {\n                    joinsArray.push(sql ` `);\n                }\n                const table = joinMeta.table;\n                const lateralSql = joinMeta.lateral ? sql ` lateral` : undefined;\n                if (is(table, PgTable)) {\n                    const tableName = table[PgTable.Symbol.Name];\n                    const tableSchema = table[PgTable.Symbol.Schema];\n                    const origTableName = table[PgTable.Symbol.OriginalName];\n                    const alias = tableName === origTableName ? undefined : joinMeta.alias;\n                    joinsArray.push(sql `${sql.raw(joinMeta.joinType)} join${lateralSql} ${tableSchema ? sql `${sql.identifier(tableSchema)}.` : undefined}${sql.identifier(origTableName)}${alias && sql ` ${sql.identifier(alias)}`} on ${joinMeta.on}`);\n                }\n                else if (is(table, View)) {\n                    const viewName = table[ViewBaseConfig].name;\n                    const viewSchema = table[ViewBaseConfig].schema;\n                    const origViewName = table[ViewBaseConfig].originalName;\n                    const alias = viewName === origViewName ? undefined : joinMeta.alias;\n                    joinsArray.push(sql `${sql.raw(joinMeta.joinType)} join${lateralSql} ${viewSchema ? sql `${sql.identifier(viewSchema)}.` : undefined}${sql.identifier(origViewName)}${alias && sql ` ${sql.identifier(alias)}`} on ${joinMeta.on}`);\n                }\n                else {\n                    joinsArray.push(sql `${sql.raw(joinMeta.joinType)} join${lateralSql} ${table} on ${joinMeta.on}`);\n                }\n                if (index < joins.length - 1) {\n                    joinsArray.push(sql ` `);\n                }\n            }\n        }\n        const joinsSql = sql.join(joinsArray);\n        const whereSql = where ? sql ` where ${where}` : undefined;\n        const havingSql = having ? sql ` having ${having}` : undefined;\n        let orderBySql;\n        if (orderBy && orderBy.length > 0) {\n            orderBySql = sql ` order by ${sql.join(orderBy, sql `, `)}`;\n        }\n        let groupBySql;\n        if (groupBy && groupBy.length > 0) {\n            groupBySql = sql ` group by ${sql.join(groupBy, sql `, `)}`;\n        }\n        const limitSql = limit ? sql ` limit ${limit}` : undefined;\n        const offsetSql = offset ? sql ` offset ${offset}` : undefined;\n        const lockingClausesSql = sql.empty();\n        if (lockingClauses) {\n            for (const { strength, config } of lockingClauses) {\n                const clauseSql = sql ` for ${sql.raw(strength)}`;\n                if (config.of) {\n                    clauseSql.append(sql ` of ${config.of}`);\n                }\n                if (config.noWait) {\n                    clauseSql.append(sql ` no wait`);\n                }\n                else if (config.skipLocked) {\n                    clauseSql.append(sql ` skip locked`);\n                }\n                lockingClausesSql.append(clauseSql);\n            }\n        }\n        return sql `${withSql}select${distinctSql} ${selection} from ${tableSql}${joinsSql}${whereSql}${groupBySql}${havingSql}${orderBySql}${limitSql}${offsetSql}${lockingClausesSql}`;\n    }\n    buildInsertQuery({ table, values, onConflict, returning }) {\n        const valuesSqlList = [];\n        const columns = table[Table.Symbol.Columns];\n        const colEntries = Object.entries(columns);\n        const insertOrder = colEntries.map(([, column]) => sql.identifier(column.name));\n        for (const [valueIndex, value] of values.entries()) {\n            const valueList = [];\n            for (const [fieldName, col] of colEntries) {\n                const colValue = value[fieldName];\n                if (colValue === undefined || (is(colValue, Param) && colValue.value === undefined)) {\n                    // eslint-disable-next-line unicorn/no-negated-condition\n                    if (col.defaultFn !== undefined) {\n                        const defaultFnResult = col.defaultFn();\n                        const defaultValue = is(defaultFnResult, SQL) ? defaultFnResult : sql.param(defaultFnResult, col);\n                        valueList.push(defaultValue);\n                    }\n                    else {\n                        valueList.push(sql `default`);\n                    }\n                }\n                else {\n                    valueList.push(colValue);\n                }\n            }\n            valuesSqlList.push(valueList);\n            if (valueIndex < values.length - 1) {\n                valuesSqlList.push(sql `, `);\n            }\n        }\n        const valuesSql = sql.join(valuesSqlList);\n        const returningSql = returning\n            ? sql ` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n            : undefined;\n        const onConflictSql = onConflict ? sql ` on conflict ${onConflict}` : undefined;\n        return sql `insert into ${table} ${insertOrder} values ${valuesSql}${onConflictSql}${returningSql}`;\n    }\n    buildRefreshMaterializedViewQuery({ view, concurrently, withNoData }) {\n        const concurrentlySql = concurrently ? sql ` concurrently` : undefined;\n        const withNoDataSql = withNoData ? sql ` with no data` : undefined;\n        return sql `refresh materialized view${concurrentlySql} ${view}${withNoDataSql}`;\n    }\n    prepareTyping(encoder) {\n        if (is(encoder, PgJsonb) || is(encoder, PgJson)) {\n            return 'json';\n        }\n        else if (is(encoder, PgNumeric)) {\n            return 'decimal';\n        }\n        else if (is(encoder, PgTime)) {\n            return 'time';\n        }\n        else if (is(encoder, PgTimestamp)) {\n            return 'timestamp';\n        }\n        else if (is(encoder, PgDate)) {\n            return 'date';\n        }\n        else if (is(encoder, PgUUID)) {\n            return 'uuid';\n        }\n        else {\n            return 'none';\n        }\n    }\n    sqlToQuery(sql) {\n        return sql.toQuery({\n            escapeName: this.escapeName,\n            escapeParam: this.escapeParam,\n            escapeString: this.escapeString,\n            prepareTyping: this.prepareTyping,\n        });\n    }\n    // buildRelationalQueryWithPK({\n    // \tfullSchema,\n    // \tschema,\n    // \ttableNamesMap,\n    // \ttable,\n    // \ttableConfig,\n    // \tqueryConfig: config,\n    // \ttableAlias,\n    // \tisRoot = false,\n    // \tjoinOn,\n    // }: {\n    // \tfullSchema: Record<string, unknown>;\n    // \tschema: TablesRelationalConfig;\n    // \ttableNamesMap: Record<string, string>;\n    // \ttable: PgTable;\n    // \ttableConfig: TableRelationalConfig;\n    // \tqueryConfig: true | DBQueryConfig<'many', true>;\n    // \ttableAlias: string;\n    // \tisRoot?: boolean;\n    // \tjoinOn?: SQL;\n    // }): BuildRelationalQueryResult<PgTable, PgColumn> {\n    // \t// For { \"<relation>\": true }, return a table with selection of all columns\n    // \tif (config === true) {\n    // \t\tconst selectionEntries = Object.entries(tableConfig.columns);\n    // \t\tconst selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = selectionEntries.map((\n    // \t\t\t[key, value],\n    // \t\t) => ({\n    // \t\t\tdbKey: value.name,\n    // \t\t\ttsKey: key,\n    // \t\t\tfield: value as PgColumn,\n    // \t\t\trelationTableTsKey: undefined,\n    // \t\t\tisJson: false,\n    // \t\t\tselection: [],\n    // \t\t}));\n    // \t\treturn {\n    // \t\t\ttableTsKey: tableConfig.tsName,\n    // \t\t\tsql: table,\n    // \t\t\tselection,\n    // \t\t};\n    // \t}\n    // \t// let selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = [];\n    // \t// let selectionForBuild = selection;\n    // \tconst aliasedColumns = Object.fromEntries(\n    // \t\tObject.entries(tableConfig.columns).map(([key, value]) => [key, aliasedTableColumn(value, tableAlias)]),\n    // \t);\n    // \tconst aliasedRelations = Object.fromEntries(\n    // \t\tObject.entries(tableConfig.relations).map(([key, value]) => [key, aliasedRelation(value, tableAlias)]),\n    // \t);\n    // \tconst aliasedFields = Object.assign({}, aliasedColumns, aliasedRelations);\n    // \tlet where, hasUserDefinedWhere;\n    // \tif (config.where) {\n    // \t\tconst whereSql = typeof config.where === 'function' ? config.where(aliasedFields, operators) : config.where;\n    // \t\twhere = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n    // \t\thasUserDefinedWhere = !!where;\n    // \t}\n    // \twhere = and(joinOn, where);\n    // \t// const fieldsSelection: { tsKey: string; value: PgColumn | SQL.Aliased; isExtra?: boolean }[] = [];\n    // \tlet joins: Join[] = [];\n    // \tlet selectedColumns: string[] = [];\n    // \t// Figure out which columns to select\n    // \tif (config.columns) {\n    // \t\tlet isIncludeMode = false;\n    // \t\tfor (const [field, value] of Object.entries(config.columns)) {\n    // \t\t\tif (value === undefined) {\n    // \t\t\t\tcontinue;\n    // \t\t\t}\n    // \t\t\tif (field in tableConfig.columns) {\n    // \t\t\t\tif (!isIncludeMode && value === true) {\n    // \t\t\t\t\tisIncludeMode = true;\n    // \t\t\t\t}\n    // \t\t\t\tselectedColumns.push(field);\n    // \t\t\t}\n    // \t\t}\n    // \t\tif (selectedColumns.length > 0) {\n    // \t\t\tselectedColumns = isIncludeMode\n    // \t\t\t\t? selectedColumns.filter((c) => config.columns?.[c] === true)\n    // \t\t\t\t: Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));\n    // \t\t}\n    // \t} else {\n    // \t\t// Select all columns if selection is not specified\n    // \t\tselectedColumns = Object.keys(tableConfig.columns);\n    // \t}\n    // \t// for (const field of selectedColumns) {\n    // \t// \tconst column = tableConfig.columns[field]! as PgColumn;\n    // \t// \tfieldsSelection.push({ tsKey: field, value: column });\n    // \t// }\n    // \tlet initiallySelectedRelations: {\n    // \t\ttsKey: string;\n    // \t\tqueryConfig: true | DBQueryConfig<'many', false>;\n    // \t\trelation: Relation;\n    // \t}[] = [];\n    // \t// let selectedRelations: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = [];\n    // \t// Figure out which relations to select\n    // \tif (config.with) {\n    // \t\tinitiallySelectedRelations = Object.entries(config.with)\n    // \t\t\t.filter((entry): entry is [typeof entry[0], NonNullable<typeof entry[1]>] => !!entry[1])\n    // \t\t\t.map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey]! }));\n    // \t}\n    // \tconst manyRelations = initiallySelectedRelations.filter((r) =>\n    // \t\tis(r.relation, Many)\n    // \t\t&& (schema[tableNamesMap[r.relation.referencedTable[Table.Symbol.Name]]!]?.primaryKey.length ?? 0) > 0\n    // \t);\n    // \t// If this is the last Many relation (or there are no Many relations), we are on the innermost subquery level\n    // \tconst isInnermostQuery = manyRelations.length < 2;\n    // \tconst selectedExtras: {\n    // \t\ttsKey: string;\n    // \t\tvalue: SQL.Aliased;\n    // \t}[] = [];\n    // \t// Figure out which extras to select\n    // \tif (isInnermostQuery && config.extras) {\n    // \t\tconst extras = typeof config.extras === 'function'\n    // \t\t\t? config.extras(aliasedFields, { sql })\n    // \t\t\t: config.extras;\n    // \t\tfor (const [tsKey, value] of Object.entries(extras)) {\n    // \t\t\tselectedExtras.push({\n    // \t\t\t\ttsKey,\n    // \t\t\t\tvalue: mapColumnsInAliasedSQLToAlias(value, tableAlias),\n    // \t\t\t});\n    // \t\t}\n    // \t}\n    // \t// Transform `fieldsSelection` into `selection`\n    // \t// `fieldsSelection` shouldn't be used after this point\n    // \t// for (const { tsKey, value, isExtra } of fieldsSelection) {\n    // \t// \tselection.push({\n    // \t// \t\tdbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey]!.name,\n    // \t// \t\ttsKey,\n    // \t// \t\tfield: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,\n    // \t// \t\trelationTableTsKey: undefined,\n    // \t// \t\tisJson: false,\n    // \t// \t\tisExtra,\n    // \t// \t\tselection: [],\n    // \t// \t});\n    // \t// }\n    // \tlet orderByOrig = typeof config.orderBy === 'function'\n    // \t\t? config.orderBy(aliasedFields, orderByOperators)\n    // \t\t: config.orderBy ?? [];\n    // \tif (!Array.isArray(orderByOrig)) {\n    // \t\torderByOrig = [orderByOrig];\n    // \t}\n    // \tconst orderBy = orderByOrig.map((orderByValue) => {\n    // \t\tif (is(orderByValue, Column)) {\n    // \t\t\treturn aliasedTableColumn(orderByValue, tableAlias) as PgColumn;\n    // \t\t}\n    // \t\treturn mapColumnsInSQLToAlias(orderByValue, tableAlias);\n    // \t});\n    // \tconst limit = isInnermostQuery ? config.limit : undefined;\n    // \tconst offset = isInnermostQuery ? config.offset : undefined;\n    // \t// For non-root queries without additional config except columns, return a table with selection\n    // \tif (\n    // \t\t!isRoot\n    // \t\t&& initiallySelectedRelations.length === 0\n    // \t\t&& selectedExtras.length === 0\n    // \t\t&& !where\n    // \t\t&& orderBy.length === 0\n    // \t\t&& limit === undefined\n    // \t\t&& offset === undefined\n    // \t) {\n    // \t\treturn {\n    // \t\t\ttableTsKey: tableConfig.tsName,\n    // \t\t\tsql: table,\n    // \t\t\tselection: selectedColumns.map((key) => ({\n    // \t\t\t\tdbKey: tableConfig.columns[key]!.name,\n    // \t\t\t\ttsKey: key,\n    // \t\t\t\tfield: tableConfig.columns[key] as PgColumn,\n    // \t\t\t\trelationTableTsKey: undefined,\n    // \t\t\t\tisJson: false,\n    // \t\t\t\tselection: [],\n    // \t\t\t})),\n    // \t\t};\n    // \t}\n    // \tconst selectedRelationsWithoutPK:\n    // \t// Process all relations without primary keys, because they need to be joined differently and will all be on the same query level\n    // \tfor (\n    // \t\tconst {\n    // \t\t\ttsKey: selectedRelationTsKey,\n    // \t\t\tqueryConfig: selectedRelationConfigValue,\n    // \t\t\trelation,\n    // \t\t} of initiallySelectedRelations\n    // \t) {\n    // \t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n    // \t\tconst relationTableName = relation.referencedTable[Table.Symbol.Name];\n    // \t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n    // \t\tconst relationTable = schema[relationTableTsName]!;\n    // \t\tif (relationTable.primaryKey.length > 0) {\n    // \t\t\tcontinue;\n    // \t\t}\n    // \t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n    // \t\tconst joinOn = and(\n    // \t\t\t...normalizedRelation.fields.map((field, i) =>\n    // \t\t\t\teq(\n    // \t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n    // \t\t\t\t\taliasedTableColumn(field, tableAlias),\n    // \t\t\t\t)\n    // \t\t\t),\n    // \t\t);\n    // \t\tconst builtRelation = this.buildRelationalQueryWithoutPK({\n    // \t\t\tfullSchema,\n    // \t\t\tschema,\n    // \t\t\ttableNamesMap,\n    // \t\t\ttable: fullSchema[relationTableTsName] as PgTable,\n    // \t\t\ttableConfig: schema[relationTableTsName]!,\n    // \t\t\tqueryConfig: selectedRelationConfigValue,\n    // \t\t\ttableAlias: relationTableAlias,\n    // \t\t\tjoinOn,\n    // \t\t\tnestedQueryRelation: relation,\n    // \t\t});\n    // \t\tconst field = sql`${sql.identifier(relationTableAlias)}.${sql.identifier('data')}`.as(selectedRelationTsKey);\n    // \t\tjoins.push({\n    // \t\t\ton: sql`true`,\n    // \t\t\ttable: new Subquery(builtRelation.sql as SQL, {}, relationTableAlias),\n    // \t\t\talias: relationTableAlias,\n    // \t\t\tjoinType: 'left',\n    // \t\t\tlateral: true,\n    // \t\t});\n    // \t\tselectedRelations.push({\n    // \t\t\tdbKey: selectedRelationTsKey,\n    // \t\t\ttsKey: selectedRelationTsKey,\n    // \t\t\tfield,\n    // \t\t\trelationTableTsKey: relationTableTsName,\n    // \t\t\tisJson: true,\n    // \t\t\tselection: builtRelation.selection,\n    // \t\t});\n    // \t}\n    // \tconst oneRelations = initiallySelectedRelations.filter((r): r is typeof r & { relation: One } =>\n    // \t\tis(r.relation, One)\n    // \t);\n    // \t// Process all One relations with PKs, because they can all be joined on the same level\n    // \tfor (\n    // \t\tconst {\n    // \t\t\ttsKey: selectedRelationTsKey,\n    // \t\t\tqueryConfig: selectedRelationConfigValue,\n    // \t\t\trelation,\n    // \t\t} of oneRelations\n    // \t) {\n    // \t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n    // \t\tconst relationTableName = relation.referencedTable[Table.Symbol.Name];\n    // \t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n    // \t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n    // \t\tconst relationTable = schema[relationTableTsName]!;\n    // \t\tif (relationTable.primaryKey.length === 0) {\n    // \t\t\tcontinue;\n    // \t\t}\n    // \t\tconst joinOn = and(\n    // \t\t\t...normalizedRelation.fields.map((field, i) =>\n    // \t\t\t\teq(\n    // \t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n    // \t\t\t\t\taliasedTableColumn(field, tableAlias),\n    // \t\t\t\t)\n    // \t\t\t),\n    // \t\t);\n    // \t\tconst builtRelation = this.buildRelationalQueryWithPK({\n    // \t\t\tfullSchema,\n    // \t\t\tschema,\n    // \t\t\ttableNamesMap,\n    // \t\t\ttable: fullSchema[relationTableTsName] as PgTable,\n    // \t\t\ttableConfig: schema[relationTableTsName]!,\n    // \t\t\tqueryConfig: selectedRelationConfigValue,\n    // \t\t\ttableAlias: relationTableAlias,\n    // \t\t\tjoinOn,\n    // \t\t});\n    // \t\tconst field = sql`case when ${sql.identifier(relationTableAlias)} is null then null else json_build_array(${\n    // \t\t\tsql.join(\n    // \t\t\t\tbuiltRelation.selection.map(({ field }) =>\n    // \t\t\t\t\tis(field, SQL.Aliased)\n    // \t\t\t\t\t\t? sql`${sql.identifier(relationTableAlias)}.${sql.identifier(field.fieldAlias)}`\n    // \t\t\t\t\t\t: is(field, Column)\n    // \t\t\t\t\t\t? aliasedTableColumn(field, relationTableAlias)\n    // \t\t\t\t\t\t: field\n    // \t\t\t\t),\n    // \t\t\t\tsql`, `,\n    // \t\t\t)\n    // \t\t}) end`.as(selectedRelationTsKey);\n    // \t\tconst isLateralJoin = is(builtRelation.sql, SQL);\n    // \t\tjoins.push({\n    // \t\t\ton: isLateralJoin ? sql`true` : joinOn,\n    // \t\t\ttable: is(builtRelation.sql, SQL)\n    // \t\t\t\t? new Subquery(builtRelation.sql, {}, relationTableAlias)\n    // \t\t\t\t: aliasedTable(builtRelation.sql, relationTableAlias),\n    // \t\t\talias: relationTableAlias,\n    // \t\t\tjoinType: 'left',\n    // \t\t\tlateral: is(builtRelation.sql, SQL),\n    // \t\t});\n    // \t\tselectedRelations.push({\n    // \t\t\tdbKey: selectedRelationTsKey,\n    // \t\t\ttsKey: selectedRelationTsKey,\n    // \t\t\tfield,\n    // \t\t\trelationTableTsKey: relationTableTsName,\n    // \t\t\tisJson: true,\n    // \t\t\tselection: builtRelation.selection,\n    // \t\t});\n    // \t}\n    // \tlet distinct: PgSelectConfig['distinct'];\n    // \tlet tableFrom: PgTable | Subquery = table;\n    // \t// Process first Many relation - each one requires a nested subquery\n    // \tconst manyRelation = manyRelations[0];\n    // \tif (manyRelation) {\n    // \t\tconst {\n    // \t\t\ttsKey: selectedRelationTsKey,\n    // \t\t\tqueryConfig: selectedRelationQueryConfig,\n    // \t\t\trelation,\n    // \t\t} = manyRelation;\n    // \t\tdistinct = {\n    // \t\t\ton: tableConfig.primaryKey.map((c) => aliasedTableColumn(c as PgColumn, tableAlias)),\n    // \t\t};\n    // \t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n    // \t\tconst relationTableName = relation.referencedTable[Table.Symbol.Name];\n    // \t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n    // \t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n    // \t\tconst joinOn = and(\n    // \t\t\t...normalizedRelation.fields.map((field, i) =>\n    // \t\t\t\teq(\n    // \t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n    // \t\t\t\t\taliasedTableColumn(field, tableAlias),\n    // \t\t\t\t)\n    // \t\t\t),\n    // \t\t);\n    // \t\tconst builtRelationJoin = this.buildRelationalQueryWithPK({\n    // \t\t\tfullSchema,\n    // \t\t\tschema,\n    // \t\t\ttableNamesMap,\n    // \t\t\ttable: fullSchema[relationTableTsName] as PgTable,\n    // \t\t\ttableConfig: schema[relationTableTsName]!,\n    // \t\t\tqueryConfig: selectedRelationQueryConfig,\n    // \t\t\ttableAlias: relationTableAlias,\n    // \t\t\tjoinOn,\n    // \t\t});\n    // \t\tconst builtRelationSelectionField = sql`case when ${\n    // \t\t\tsql.identifier(relationTableAlias)\n    // \t\t} is null then '[]' else json_agg(json_build_array(${\n    // \t\t\tsql.join(\n    // \t\t\t\tbuiltRelationJoin.selection.map(({ field }) =>\n    // \t\t\t\t\tis(field, SQL.Aliased)\n    // \t\t\t\t\t\t? sql`${sql.identifier(relationTableAlias)}.${sql.identifier(field.fieldAlias)}`\n    // \t\t\t\t\t\t: is(field, Column)\n    // \t\t\t\t\t\t? aliasedTableColumn(field, relationTableAlias)\n    // \t\t\t\t\t\t: field\n    // \t\t\t\t),\n    // \t\t\t\tsql`, `,\n    // \t\t\t)\n    // \t\t})) over (partition by ${sql.join(distinct.on, sql`, `)}) end`.as(selectedRelationTsKey);\n    // \t\tconst isLateralJoin = is(builtRelationJoin.sql, SQL);\n    // \t\tjoins.push({\n    // \t\t\ton: isLateralJoin ? sql`true` : joinOn,\n    // \t\t\ttable: isLateralJoin\n    // \t\t\t\t? new Subquery(builtRelationJoin.sql as SQL, {}, relationTableAlias)\n    // \t\t\t\t: aliasedTable(builtRelationJoin.sql as PgTable, relationTableAlias),\n    // \t\t\talias: relationTableAlias,\n    // \t\t\tjoinType: 'left',\n    // \t\t\tlateral: isLateralJoin,\n    // \t\t});\n    // \t\t// Build the \"from\" subquery with the remaining Many relations\n    // \t\tconst builtTableFrom = this.buildRelationalQueryWithPK({\n    // \t\t\tfullSchema,\n    // \t\t\tschema,\n    // \t\t\ttableNamesMap,\n    // \t\t\ttable,\n    // \t\t\ttableConfig,\n    // \t\t\tqueryConfig: {\n    // \t\t\t\t...config,\n    // \t\t\t\twhere: undefined,\n    // \t\t\t\torderBy: undefined,\n    // \t\t\t\tlimit: undefined,\n    // \t\t\t\toffset: undefined,\n    // \t\t\t\twith: manyRelations.slice(1).reduce<NonNullable<typeof config['with']>>(\n    // \t\t\t\t\t(result, { tsKey, queryConfig: configValue }) => {\n    // \t\t\t\t\t\tresult[tsKey] = configValue;\n    // \t\t\t\t\t\treturn result;\n    // \t\t\t\t\t},\n    // \t\t\t\t\t{},\n    // \t\t\t\t),\n    // \t\t\t},\n    // \t\t\ttableAlias,\n    // \t\t});\n    // \t\tselectedRelations.push({\n    // \t\t\tdbKey: selectedRelationTsKey,\n    // \t\t\ttsKey: selectedRelationTsKey,\n    // \t\t\tfield: builtRelationSelectionField,\n    // \t\t\trelationTableTsKey: relationTableTsName,\n    // \t\t\tisJson: true,\n    // \t\t\tselection: builtRelationJoin.selection,\n    // \t\t});\n    // \t\t// selection = builtTableFrom.selection.map((item) =>\n    // \t\t// \tis(item.field, SQL.Aliased)\n    // \t\t// \t\t? { ...item, field: sql`${sql.identifier(tableAlias)}.${sql.identifier(item.field.fieldAlias)}` }\n    // \t\t// \t\t: item\n    // \t\t// );\n    // \t\t// selectionForBuild = [{\n    // \t\t// \tdbKey: '*',\n    // \t\t// \ttsKey: '*',\n    // \t\t// \tfield: sql`${sql.identifier(tableAlias)}.*`,\n    // \t\t// \tselection: [],\n    // \t\t// \tisJson: false,\n    // \t\t// \trelationTableTsKey: undefined,\n    // \t\t// }];\n    // \t\t// const newSelectionItem: (typeof selection)[number] = {\n    // \t\t// \tdbKey: selectedRelationTsKey,\n    // \t\t// \ttsKey: selectedRelationTsKey,\n    // \t\t// \tfield,\n    // \t\t// \trelationTableTsKey: relationTableTsName,\n    // \t\t// \tisJson: true,\n    // \t\t// \tselection: builtRelationJoin.selection,\n    // \t\t// };\n    // \t\t// selection.push(newSelectionItem);\n    // \t\t// selectionForBuild.push(newSelectionItem);\n    // \t\ttableFrom = is(builtTableFrom.sql, PgTable)\n    // \t\t\t? builtTableFrom.sql\n    // \t\t\t: new Subquery(builtTableFrom.sql, {}, tableAlias);\n    // \t}\n    // \tif (selectedColumns.length === 0 && selectedRelations.length === 0 && selectedExtras.length === 0) {\n    // \t\tthrow new DrizzleError(`No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\")`);\n    // \t}\n    // \tlet selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'];\n    // \tfunction prepareSelectedColumns() {\n    // \t\treturn selectedColumns.map((key) => ({\n    // \t\t\tdbKey: tableConfig.columns[key]!.name,\n    // \t\t\ttsKey: key,\n    // \t\t\tfield: tableConfig.columns[key] as PgColumn,\n    // \t\t\trelationTableTsKey: undefined,\n    // \t\t\tisJson: false,\n    // \t\t\tselection: [],\n    // \t\t}));\n    // \t}\n    // \tfunction prepareSelectedExtras() {\n    // \t\treturn selectedExtras.map((item) => ({\n    // \t\t\tdbKey: item.value.fieldAlias,\n    // \t\t\ttsKey: item.tsKey,\n    // \t\t\tfield: item.value,\n    // \t\t\trelationTableTsKey: undefined,\n    // \t\t\tisJson: false,\n    // \t\t\tselection: [],\n    // \t\t}));\n    // \t}\n    // \tif (isRoot) {\n    // \t\tselection = [\n    // \t\t\t...prepareSelectedColumns(),\n    // \t\t\t...prepareSelectedExtras(),\n    // \t\t];\n    // \t}\n    // \tif (hasUserDefinedWhere || orderBy.length > 0) {\n    // \t\ttableFrom = new Subquery(\n    // \t\t\tthis.buildSelectQuery({\n    // \t\t\t\ttable: is(tableFrom, PgTable) ? aliasedTable(tableFrom, tableAlias) : tableFrom,\n    // \t\t\t\tfields: {},\n    // \t\t\t\tfieldsFlat: selectionForBuild.map(({ field }) => ({\n    // \t\t\t\t\tpath: [],\n    // \t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n    // \t\t\t\t})),\n    // \t\t\t\tjoins,\n    // \t\t\t\tdistinct,\n    // \t\t\t}),\n    // \t\t\t{},\n    // \t\t\ttableAlias,\n    // \t\t);\n    // \t\tselectionForBuild = selection.map((item) =>\n    // \t\t\tis(item.field, SQL.Aliased)\n    // \t\t\t\t? { ...item, field: sql`${sql.identifier(tableAlias)}.${sql.identifier(item.field.fieldAlias)}` }\n    // \t\t\t\t: item\n    // \t\t);\n    // \t\tjoins = [];\n    // \t\tdistinct = undefined;\n    // \t}\n    // \tconst result = this.buildSelectQuery({\n    // \t\ttable: is(tableFrom, PgTable) ? aliasedTable(tableFrom, tableAlias) : tableFrom,\n    // \t\tfields: {},\n    // \t\tfieldsFlat: selectionForBuild.map(({ field }) => ({\n    // \t\t\tpath: [],\n    // \t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n    // \t\t})),\n    // \t\twhere,\n    // \t\tlimit,\n    // \t\toffset,\n    // \t\tjoins,\n    // \t\torderBy,\n    // \t\tdistinct,\n    // \t});\n    // \treturn {\n    // \t\ttableTsKey: tableConfig.tsName,\n    // \t\tsql: result,\n    // \t\tselection,\n    // \t};\n    // }\n    buildRelationalQueryWithoutPK({ fullSchema, schema, tableNamesMap, table, tableConfig, queryConfig: config, tableAlias, nestedQueryRelation, joinOn, }) {\n        let selection = [];\n        let limit, offset, orderBy = [], where;\n        const joins = [];\n        if (config === true) {\n            const selectionEntries = Object.entries(tableConfig.columns);\n            selection = selectionEntries.map(([key, value]) => ({\n                dbKey: value.name,\n                tsKey: key,\n                field: aliasedTableColumn(value, tableAlias),\n                relationTableTsKey: undefined,\n                isJson: false,\n                selection: [],\n            }));\n        }\n        else {\n            const aliasedColumns = Object.fromEntries(Object.entries(tableConfig.columns).map(([key, value]) => [key, aliasedTableColumn(value, tableAlias)]));\n            if (config.where) {\n                const whereSql = typeof config.where === 'function'\n                    ? config.where(aliasedColumns, getOperators())\n                    : config.where;\n                where = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n            }\n            const fieldsSelection = [];\n            let selectedColumns = [];\n            // Figure out which columns to select\n            if (config.columns) {\n                let isIncludeMode = false;\n                for (const [field, value] of Object.entries(config.columns)) {\n                    if (value === undefined) {\n                        continue;\n                    }\n                    if (field in tableConfig.columns) {\n                        if (!isIncludeMode && value === true) {\n                            isIncludeMode = true;\n                        }\n                        selectedColumns.push(field);\n                    }\n                }\n                if (selectedColumns.length > 0) {\n                    selectedColumns = isIncludeMode\n                        ? selectedColumns.filter((c) => config.columns?.[c] === true)\n                        : Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));\n                }\n            }\n            else {\n                // Select all columns if selection is not specified\n                selectedColumns = Object.keys(tableConfig.columns);\n            }\n            for (const field of selectedColumns) {\n                const column = tableConfig.columns[field];\n                fieldsSelection.push({ tsKey: field, value: column });\n            }\n            let selectedRelations = [];\n            // Figure out which relations to select\n            if (config.with) {\n                selectedRelations = Object.entries(config.with)\n                    .filter((entry) => !!entry[1])\n                    .map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey] }));\n            }\n            let extras;\n            // Figure out which extras to select\n            if (config.extras) {\n                extras = typeof config.extras === 'function'\n                    ? config.extras(aliasedColumns, { sql })\n                    : config.extras;\n                for (const [tsKey, value] of Object.entries(extras)) {\n                    fieldsSelection.push({\n                        tsKey,\n                        value: mapColumnsInAliasedSQLToAlias(value, tableAlias),\n                    });\n                }\n            }\n            // Transform `fieldsSelection` into `selection`\n            // `fieldsSelection` shouldn't be used after this point\n            for (const { tsKey, value } of fieldsSelection) {\n                selection.push({\n                    dbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey].name,\n                    tsKey,\n                    field: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,\n                    relationTableTsKey: undefined,\n                    isJson: false,\n                    selection: [],\n                });\n            }\n            let orderByOrig = typeof config.orderBy === 'function'\n                ? config.orderBy(aliasedColumns, getOrderByOperators())\n                : config.orderBy ?? [];\n            if (!Array.isArray(orderByOrig)) {\n                orderByOrig = [orderByOrig];\n            }\n            orderBy = orderByOrig.map((orderByValue) => {\n                if (is(orderByValue, Column)) {\n                    return aliasedTableColumn(orderByValue, tableAlias);\n                }\n                return mapColumnsInSQLToAlias(orderByValue, tableAlias);\n            });\n            limit = config.limit;\n            offset = config.offset;\n            // Process all relations\n            for (const { tsKey: selectedRelationTsKey, queryConfig: selectedRelationConfigValue, relation, } of selectedRelations) {\n                const normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n                const relationTableName = relation.referencedTable[Table.Symbol.Name];\n                const relationTableTsName = tableNamesMap[relationTableName];\n                const relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n                const joinOn = and(...normalizedRelation.fields.map((field, i) => eq(aliasedTableColumn(normalizedRelation.references[i], relationTableAlias), aliasedTableColumn(field, tableAlias))));\n                const builtRelation = this.buildRelationalQueryWithoutPK({\n                    fullSchema,\n                    schema,\n                    tableNamesMap,\n                    table: fullSchema[relationTableTsName],\n                    tableConfig: schema[relationTableTsName],\n                    queryConfig: is(relation, One)\n                        ? (selectedRelationConfigValue === true\n                            ? { limit: 1 }\n                            : { ...selectedRelationConfigValue, limit: 1 })\n                        : selectedRelationConfigValue,\n                    tableAlias: relationTableAlias,\n                    joinOn,\n                    nestedQueryRelation: relation,\n                });\n                const field = sql `${sql.identifier(relationTableAlias)}.${sql.identifier('data')}`.as(selectedRelationTsKey);\n                joins.push({\n                    on: sql `true`,\n                    table: new Subquery(builtRelation.sql, {}, relationTableAlias),\n                    alias: relationTableAlias,\n                    joinType: 'left',\n                    lateral: true,\n                });\n                selection.push({\n                    dbKey: selectedRelationTsKey,\n                    tsKey: selectedRelationTsKey,\n                    field,\n                    relationTableTsKey: relationTableTsName,\n                    isJson: true,\n                    selection: builtRelation.selection,\n                });\n            }\n        }\n        if (selection.length === 0) {\n            throw new DrizzleError(`No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\")`);\n        }\n        let result;\n        where = and(joinOn, where);\n        if (nestedQueryRelation) {\n            let field = sql `json_build_array(${sql.join(selection.map(({ field, tsKey, isJson }) => isJson\n                ? sql `${sql.identifier(`${tableAlias}_${tsKey}`)}.${sql.identifier('data')}`\n                : is(field, SQL.Aliased)\n                    ? field.sql\n                    : field), sql `, `)})`;\n            if (is(nestedQueryRelation, Many)) {\n                field = sql `coalesce(json_agg(${field}${orderBy.length > 0 ? sql ` order by ${sql.join(orderBy, sql `, `)}` : undefined}), '[]'::json)`;\n                // orderBy = [];\n            }\n            const nestedSelection = [{\n                    dbKey: 'data',\n                    tsKey: 'data',\n                    field: field.as('data'),\n                    isJson: true,\n                    relationTableTsKey: tableConfig.tsName,\n                    selection,\n                }];\n            const needsSubquery = limit !== undefined || offset !== undefined || orderBy.length > 0;\n            if (needsSubquery) {\n                result = this.buildSelectQuery({\n                    table: aliasedTable(table, tableAlias),\n                    fields: {},\n                    fieldsFlat: [{\n                            path: [],\n                            field: sql.raw('*'),\n                        }],\n                    where,\n                    limit,\n                    offset,\n                    orderBy,\n                });\n                where = undefined;\n                limit = undefined;\n                offset = undefined;\n                orderBy = [];\n            }\n            else {\n                result = aliasedTable(table, tableAlias);\n            }\n            result = this.buildSelectQuery({\n                table: is(result, PgTable) ? result : new Subquery(result, {}, tableAlias),\n                fields: {},\n                fieldsFlat: nestedSelection.map(({ field }) => ({\n                    path: [],\n                    field: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n                })),\n                joins,\n                where,\n                limit,\n                offset,\n                orderBy,\n            });\n        }\n        else {\n            result = this.buildSelectQuery({\n                table: aliasedTable(table, tableAlias),\n                fields: {},\n                fieldsFlat: selection.map(({ field }) => ({\n                    path: [],\n                    field: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n                })),\n                joins,\n                where,\n                limit,\n                offset,\n                orderBy,\n            });\n        }\n        return {\n            tableTsKey: tableConfig.tsName,\n            sql: result,\n            selection,\n        };\n    }\n}\n\nclass TypedQueryBuilder {\n    static [entityKind] = 'TypedQueryBuilder';\n    /** @internal */\n    getSelectedFields() {\n        return this._.selectedFields;\n    }\n}\n\nclass PgSelectBuilder {\n    static [entityKind] = 'PgSelectBuilder';\n    fields;\n    session;\n    dialect;\n    withList = [];\n    distinct;\n    constructor(config) {\n        this.fields = config.fields;\n        this.session = config.session;\n        this.dialect = config.dialect;\n        if (config.withList) {\n            this.withList = config.withList;\n        }\n        this.distinct = config.distinct;\n    }\n    /**\n     * Specify the table, subquery, or other target that you're\n     * building a select query against.\n     *\n     * {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-FROM|Postgres from documentation}\n     */\n    from(source) {\n        const isPartialSelect = !!this.fields;\n        let fields;\n        if (this.fields) {\n            fields = this.fields;\n        }\n        else if (is(source, Subquery)) {\n            // This is required to use the proxy handler to get the correct field values from the subquery\n            fields = Object.fromEntries(Object.keys(source[SubqueryConfig].selection).map((key) => [key, source[key]]));\n        }\n        else if (is(source, PgViewBase)) {\n            fields = source[ViewBaseConfig].selectedFields;\n        }\n        else if (is(source, SQL)) {\n            fields = {};\n        }\n        else {\n            fields = getTableColumns(source);\n        }\n        return new PgSelect({\n            table: source,\n            fields,\n            isPartialSelect,\n            session: this.session,\n            dialect: this.dialect,\n            withList: this.withList,\n            distinct: this.distinct,\n        });\n    }\n}\nclass PgSelectQueryBuilder extends TypedQueryBuilder {\n    static [entityKind] = 'PgSelectQueryBuilder';\n    _;\n    config;\n    joinsNotNullableMap;\n    tableName;\n    isPartialSelect;\n    session;\n    dialect;\n    constructor({ table, fields, isPartialSelect, session, dialect, withList, distinct }) {\n        super();\n        this.config = {\n            withList,\n            table,\n            fields: { ...fields },\n            distinct,\n        };\n        this.isPartialSelect = isPartialSelect;\n        this.session = session;\n        this.dialect = dialect;\n        this._ = {\n            selectedFields: fields,\n        };\n        this.tableName = getTableLikeName(table);\n        this.joinsNotNullableMap = typeof this.tableName === 'string' ? { [this.tableName]: true } : {};\n    }\n    createJoin(joinType) {\n        return (table, on) => {\n            const baseTableName = this.tableName;\n            const tableName = getTableLikeName(table);\n            if (typeof tableName === 'string' && this.config.joins?.some((join) => join.alias === tableName)) {\n                throw new Error(`Alias \"${tableName}\" is already used in this query`);\n            }\n            if (!this.isPartialSelect) {\n                // If this is the first join and this is not a partial select and we're not selecting from raw SQL, \"move\" the fields from the main table to the nested object\n                if (Object.keys(this.joinsNotNullableMap).length === 1 && typeof baseTableName === 'string') {\n                    this.config.fields = {\n                        [baseTableName]: this.config.fields,\n                    };\n                }\n                if (typeof tableName === 'string' && !is(table, SQL)) {\n                    const selection = is(table, Subquery)\n                        ? table[SubqueryConfig].selection\n                        : is(table, View)\n                            ? table[ViewBaseConfig].selectedFields\n                            : table[Table.Symbol.Columns];\n                    this.config.fields[tableName] = selection;\n                }\n            }\n            if (typeof on === 'function') {\n                on = on(new Proxy(this.config.fields, new SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' })));\n            }\n            if (!this.config.joins) {\n                this.config.joins = [];\n            }\n            this.config.joins.push({ on, table, joinType, alias: tableName });\n            if (typeof tableName === 'string') {\n                switch (joinType) {\n                    case 'left': {\n                        this.joinsNotNullableMap[tableName] = false;\n                        break;\n                    }\n                    case 'right': {\n                        this.joinsNotNullableMap = Object.fromEntries(Object.entries(this.joinsNotNullableMap).map(([key]) => [key, false]));\n                        this.joinsNotNullableMap[tableName] = true;\n                        break;\n                    }\n                    case 'inner': {\n                        this.joinsNotNullableMap[tableName] = true;\n                        break;\n                    }\n                    case 'full': {\n                        this.joinsNotNullableMap = Object.fromEntries(Object.entries(this.joinsNotNullableMap).map(([key]) => [key, false]));\n                        this.joinsNotNullableMap[tableName] = false;\n                        break;\n                    }\n                }\n            }\n            return this;\n        };\n    }\n    /**\n     * For each row of the table, include\n     * values from a matching row of the joined\n     * table, if there is a matching row. If not,\n     * all of the columns of the joined table\n     * will be set to null.\n     */\n    leftJoin = this.createJoin('left');\n    /**\n     * Includes all of the rows of the joined table.\n     * If there is no matching row in the main table,\n     * all the columns of the main table will be\n     * set to null.\n     */\n    rightJoin = this.createJoin('right');\n    /**\n     * This is the default type of join.\n     *\n     * For each row of the table, the joined table\n     * needs to have a matching row, or it will\n     * be excluded from results.\n     */\n    innerJoin = this.createJoin('inner');\n    /**\n     * Rows from both the main & joined are included,\n     * regardless of whether or not they have matching\n     * rows in the other table.\n     */\n    fullJoin = this.createJoin('full');\n    /**\n     * Specify a condition to narrow the result set. Multiple\n     * conditions can be combined with the `and` and `or`\n     * functions.\n     *\n     * ## Examples\n     *\n     * ```ts\n     * // Find cars made in the year 2000\n     * db.select().from(cars).where(eq(cars.year, 2000));\n     * ```\n     */\n    where(where) {\n        if (typeof where === 'function') {\n            where = where(new Proxy(this.config.fields, new SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' })));\n        }\n        this.config.where = where;\n        return this;\n    }\n    /**\n     * Sets the HAVING clause of this query, which often\n     * used with GROUP BY and filters rows after they've been\n     * grouped together and combined.\n     *\n     * {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-HAVING|Postgres having clause documentation}\n     */\n    having(having) {\n        if (typeof having === 'function') {\n            having = having(new Proxy(this.config.fields, new SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' })));\n        }\n        this.config.having = having;\n        return this;\n    }\n    groupBy(...columns) {\n        if (typeof columns[0] === 'function') {\n            const groupBy = columns[0](new Proxy(this.config.fields, new SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' })));\n            this.config.groupBy = Array.isArray(groupBy) ? groupBy : [groupBy];\n        }\n        else {\n            this.config.groupBy = columns;\n        }\n        return this;\n    }\n    orderBy(...columns) {\n        if (typeof columns[0] === 'function') {\n            const orderBy = columns[0](new Proxy(this.config.fields, new SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' })));\n            this.config.orderBy = Array.isArray(orderBy) ? orderBy : [orderBy];\n        }\n        else {\n            this.config.orderBy = columns;\n        }\n        return this;\n    }\n    /**\n     * Set the maximum number of rows that will be\n     * returned by this query.\n     *\n     * ## Examples\n     *\n     * ```ts\n     * // Get the first 10 people from this query.\n     * db.select().from(people).limit(10);\n     * ```\n     *\n     * {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-LIMIT|Postgres LIMIT documentation}\n     */\n    limit(limit) {\n        this.config.limit = limit;\n        return this;\n    }\n    /**\n     * Skip a number of rows when returning results\n     * from this query.\n     *\n     * ## Examples\n     *\n     * ```ts\n     * // Get the 10th-20th people from this query.\n     * db.select().from(people).offset(10).limit(10);\n     * ```\n     */\n    offset(offset) {\n        this.config.offset = offset;\n        return this;\n    }\n    /**\n     * The FOR clause specifies a lock strength for this query\n     * that controls how strictly it acquires exclusive access to\n     * the rows being queried.\n     *\n     * {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-FOR-UPDATE-SHARE|Postgres locking clause documentation}\n     */\n    for(strength, config = {}) {\n        if (!this.config.lockingClauses) {\n            this.config.lockingClauses = [];\n        }\n        this.config.lockingClauses.push({ strength, config });\n        return this;\n    }\n    /** @internal */\n    getSQL() {\n        return this.dialect.buildSelectQuery(this.config);\n    }\n    toSQL() {\n        const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n        return rest;\n    }\n    as(alias) {\n        return new Proxy(new Subquery(this.getSQL(), this.config.fields, alias), new SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }));\n    }\n}\nclass PgSelect extends PgSelectQueryBuilder {\n    static [entityKind] = 'PgSelect';\n    _prepare(name) {\n        const { session, config, dialect, joinsNotNullableMap } = this;\n        if (!session) {\n            throw new Error('Cannot execute a query on a query builder. Please use a database instance instead.');\n        }\n        return tracer.startActiveSpan('drizzle.prepareQuery', () => {\n            const fieldsList = orderSelectedFields(config.fields);\n            const query = session.prepareQuery(dialect.sqlToQuery(this.getSQL()), fieldsList, name);\n            query.joinsNotNullableMap = joinsNotNullableMap;\n            return query;\n        });\n    }\n    /**\n     * Create a prepared statement for this query. This allows\n     * the database to remember this query for the given session\n     * and call it by name, rather than specifying the full query.\n     *\n     * {@link https://www.postgresql.org/docs/current/sql-prepare.html|Postgres prepare documentation}\n     */\n    prepare(name) {\n        return this._prepare(name);\n    }\n    execute = (placeholderValues) => {\n        return tracer.startActiveSpan('drizzle.operation', () => {\n            return this._prepare().execute(placeholderValues);\n        });\n    };\n}\napplyMixins(PgSelect, [QueryPromise]);\n\nclass QueryBuilder {\n    static [entityKind] = 'PgQueryBuilder';\n    dialect;\n    $with(alias) {\n        const queryBuilder = this;\n        return {\n            as(qb) {\n                if (typeof qb === 'function') {\n                    qb = qb(queryBuilder);\n                }\n                return new Proxy(new WithSubquery(qb.getSQL(), qb.getSelectedFields(), alias, true), new SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }));\n            },\n        };\n    }\n    with(...queries) {\n        const self = this;\n        function select(fields) {\n            return new PgSelectBuilder({\n                fields: fields ?? undefined,\n                session: undefined,\n                dialect: self.getDialect(),\n                withList: queries,\n            });\n        }\n        function selectDistinct(fields) {\n            return new PgSelectBuilder({\n                fields: fields ?? undefined,\n                session: undefined,\n                dialect: self.getDialect(),\n                distinct: true,\n            });\n        }\n        function selectDistinctOn(on, fields) {\n            return new PgSelectBuilder({\n                fields: fields ?? undefined,\n                session: undefined,\n                dialect: self.getDialect(),\n                distinct: { on },\n            });\n        }\n        return { select, selectDistinct, selectDistinctOn };\n    }\n    select(fields) {\n        return new PgSelectBuilder({\n            fields: fields ?? undefined,\n            session: undefined,\n            dialect: this.getDialect(),\n        });\n    }\n    selectDistinct(fields) {\n        return new PgSelectBuilder({\n            fields: fields ?? undefined,\n            session: undefined,\n            dialect: this.getDialect(),\n            distinct: true,\n        });\n    }\n    selectDistinctOn(on, fields) {\n        return new PgSelectBuilder({\n            fields: fields ?? undefined,\n            session: undefined,\n            dialect: this.getDialect(),\n            distinct: { on },\n        });\n    }\n    // Lazy load dialect to avoid circular dependency\n    getDialect() {\n        if (!this.dialect) {\n            this.dialect = new PgDialect();\n        }\n        return this.dialect;\n    }\n}\n\nclass DefaultViewBuilderCore {\n    name;\n    schema;\n    static [entityKind] = 'PgDefaultViewBuilderCore';\n    constructor(name, schema) {\n        this.name = name;\n        this.schema = schema;\n    }\n    config = {};\n    with(config) {\n        this.config.with = config;\n        return this;\n    }\n}\nclass ViewBuilder extends DefaultViewBuilderCore {\n    static [entityKind] = 'PgViewBuilder';\n    as(qb) {\n        if (typeof qb === 'function') {\n            qb = qb(new QueryBuilder());\n        }\n        const selectionProxy = new SelectionProxyHandler({\n            alias: this.name,\n            sqlBehavior: 'error',\n            sqlAliasedBehavior: 'alias',\n            replaceOriginalName: true,\n        });\n        const aliasedSelection = new Proxy(qb.getSelectedFields(), selectionProxy);\n        return new Proxy(new PgView({\n            pgConfig: this.config,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: aliasedSelection,\n                query: qb.getSQL().inlineParams(),\n            },\n        }), selectionProxy);\n    }\n}\nclass ManualViewBuilder extends DefaultViewBuilderCore {\n    static [entityKind] = 'PgManualViewBuilder';\n    columns;\n    constructor(name, columns, schema) {\n        super(name, schema);\n        this.columns = getTableColumns(pgTable(name, columns));\n    }\n    existing() {\n        return new Proxy(new PgView({\n            pgConfig: undefined,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: this.columns,\n                query: undefined,\n            },\n        }), new SelectionProxyHandler({\n            alias: this.name,\n            sqlBehavior: 'error',\n            sqlAliasedBehavior: 'alias',\n            replaceOriginalName: true,\n        }));\n    }\n    as(query) {\n        return new Proxy(new PgView({\n            pgConfig: this.config,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: this.columns,\n                query: query.inlineParams(),\n            },\n        }), new SelectionProxyHandler({\n            alias: this.name,\n            sqlBehavior: 'error',\n            sqlAliasedBehavior: 'alias',\n            replaceOriginalName: true,\n        }));\n    }\n}\nclass MaterializedViewBuilderCore {\n    name;\n    schema;\n    static [entityKind] = 'PgMaterializedViewBuilderCore';\n    constructor(name, schema) {\n        this.name = name;\n        this.schema = schema;\n    }\n    config = {};\n    using(using) {\n        this.config.using = using;\n        return this;\n    }\n    with(config) {\n        this.config.with = config;\n        return this;\n    }\n    tablespace(tablespace) {\n        this.config.tablespace = tablespace;\n        return this;\n    }\n    withNoData() {\n        this.config.withNoData = true;\n        return this;\n    }\n}\nclass MaterializedViewBuilder extends MaterializedViewBuilderCore {\n    static [entityKind] = 'PgMaterializedViewBuilder';\n    as(qb) {\n        if (typeof qb === 'function') {\n            qb = qb(new QueryBuilder());\n        }\n        const selectionProxy = new SelectionProxyHandler({\n            alias: this.name,\n            sqlBehavior: 'error',\n            sqlAliasedBehavior: 'alias',\n            replaceOriginalName: true,\n        });\n        const aliasedSelection = new Proxy(qb.getSelectedFields(), selectionProxy);\n        return new Proxy(new PgMaterializedView({\n            pgConfig: {\n                with: this.config.with,\n                using: this.config.using,\n                tablespace: this.config.tablespace,\n                withNoData: this.config.withNoData,\n            },\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: aliasedSelection,\n                query: qb.getSQL().inlineParams(),\n            },\n        }), selectionProxy);\n    }\n}\nclass ManualMaterializedViewBuilder extends MaterializedViewBuilderCore {\n    static [entityKind] = 'PgManualMaterializedViewBuilder';\n    columns;\n    constructor(name, columns, schema) {\n        super(name, schema);\n        this.columns = getTableColumns(pgTable(name, columns));\n    }\n    existing() {\n        return new Proxy(new PgMaterializedView({\n            pgConfig: undefined,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: this.columns,\n                query: undefined,\n            },\n        }), new SelectionProxyHandler({\n            alias: this.name,\n            sqlBehavior: 'error',\n            sqlAliasedBehavior: 'alias',\n            replaceOriginalName: true,\n        }));\n    }\n    as(query) {\n        return new Proxy(new PgMaterializedView({\n            pgConfig: undefined,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: this.columns,\n                query: query.inlineParams(),\n            },\n        }), new SelectionProxyHandler({\n            alias: this.name,\n            sqlBehavior: 'error',\n            sqlAliasedBehavior: 'alias',\n            replaceOriginalName: true,\n        }));\n    }\n}\nclass PgViewBase extends View {\n    static [entityKind] = 'PgViewBase';\n}\nconst PgViewConfig = Symbol.for('drizzle:PgViewConfig');\nclass PgView extends PgViewBase {\n    static [entityKind] = 'PgView';\n    [PgViewConfig];\n    constructor({ pgConfig, config }) {\n        super(config);\n        if (pgConfig) {\n            this[PgViewConfig] = {\n                with: pgConfig.with,\n            };\n        }\n    }\n}\nconst PgMaterializedViewConfig = Symbol.for('drizzle:PgMaterializedViewConfig');\nclass PgMaterializedView extends PgViewBase {\n    static [entityKind] = 'PgMaterializedView';\n    [PgMaterializedViewConfig];\n    constructor({ pgConfig, config }) {\n        super(config);\n        this[PgMaterializedViewConfig] = {\n            with: pgConfig?.with,\n            using: pgConfig?.using,\n            tablespace: pgConfig?.tablespace,\n            withNoData: pgConfig?.withNoData,\n        };\n    }\n}\n/** @internal */\nfunction pgViewWithSchema(name, selection, schema) {\n    if (selection) {\n        return new ManualViewBuilder(name, selection, schema);\n    }\n    return new ViewBuilder(name, schema);\n}\n/** @internal */\nfunction pgMaterializedViewWithSchema(name, selection, schema) {\n    if (selection) {\n        return new ManualMaterializedViewBuilder(name, selection, schema);\n    }\n    return new MaterializedViewBuilder(name, schema);\n}\nfunction pgView(name, columns) {\n    return pgViewWithSchema(name, columns, undefined);\n}\nfunction pgMaterializedView(name, columns) {\n    return pgMaterializedViewWithSchema(name, columns, undefined);\n}\n\nclass Relation {\n    sourceTable;\n    referencedTable;\n    relationName;\n    static [entityKind] = 'Relation';\n    referencedTableName;\n    fieldName;\n    constructor(sourceTable, referencedTable, relationName) {\n        this.sourceTable = sourceTable;\n        this.referencedTable = referencedTable;\n        this.relationName = relationName;\n        this.referencedTableName = referencedTable[Table.Symbol.Name];\n    }\n}\nclass Relations {\n    table;\n    config;\n    static [entityKind] = 'Relations';\n    constructor(table, config) {\n        this.table = table;\n        this.config = config;\n    }\n}\nclass One extends Relation {\n    config;\n    isNullable;\n    static [entityKind] = 'One';\n    constructor(sourceTable, referencedTable, config, isNullable) {\n        super(sourceTable, referencedTable, config?.relationName);\n        this.config = config;\n        this.isNullable = isNullable;\n    }\n    withFieldName(fieldName) {\n        const relation = new One(this.sourceTable, this.referencedTable, this.config, this.isNullable);\n        relation.fieldName = fieldName;\n        return relation;\n    }\n}\nclass Many extends Relation {\n    config;\n    static [entityKind] = 'Many';\n    constructor(sourceTable, referencedTable, config) {\n        super(sourceTable, referencedTable, config?.relationName);\n        this.config = config;\n    }\n    withFieldName(fieldName) {\n        const relation = new Many(this.sourceTable, this.referencedTable, this.config);\n        relation.fieldName = fieldName;\n        return relation;\n    }\n}\nfunction getOperators() {\n    return {\n        and,\n        between,\n        eq,\n        exists,\n        gt,\n        gte,\n        ilike,\n        inArray,\n        isNull,\n        isNotNull,\n        like,\n        lt,\n        lte,\n        ne,\n        not,\n        notBetween,\n        notExists,\n        notLike,\n        notIlike,\n        notInArray,\n        or,\n        sql,\n    };\n}\nfunction getOrderByOperators() {\n    return {\n        sql,\n        asc,\n        desc,\n    };\n}\nfunction extractTablesRelationalConfig(schema, configHelpers) {\n    if (Object.keys(schema).length === 1\n        && 'default' in schema\n        && !is(schema['default'], Table)) {\n        schema = schema['default'];\n    }\n    // table DB name -> schema table key\n    const tableNamesMap = {};\n    // Table relations found before their tables - need to buffer them until we know the schema table key\n    const relationsBuffer = {};\n    const tablesConfig = {};\n    for (const [key, value] of Object.entries(schema)) {\n        if (isTable(value)) {\n            const dbName = value[Table.Symbol.Name];\n            const bufferedRelations = relationsBuffer[dbName];\n            tableNamesMap[dbName] = key;\n            tablesConfig[key] = {\n                tsName: key,\n                dbName: value[Table.Symbol.Name],\n                columns: value[Table.Symbol.Columns],\n                relations: bufferedRelations?.relations ?? {},\n                primaryKey: bufferedRelations?.primaryKey ?? [],\n            };\n            // Fill in primary keys\n            for (const column of Object.values(value[Table.Symbol.Columns])) {\n                if (column.primary) {\n                    tablesConfig[key].primaryKey.push(column);\n                }\n            }\n            const extraConfig = value[Table.Symbol.ExtraConfigBuilder]?.(value);\n            if (extraConfig) {\n                for (const configEntry of Object.values(extraConfig)) {\n                    if (is(configEntry, PrimaryKeyBuilder)) {\n                        tablesConfig[key].primaryKey.push(...configEntry.columns);\n                    }\n                }\n            }\n        }\n        else if (is(value, Relations)) {\n            const dbName = value.table[Table.Symbol.Name];\n            const tableName = tableNamesMap[dbName];\n            const relations = value.config(configHelpers(value.table));\n            let primaryKey;\n            for (const [relationName, relation] of Object.entries(relations)) {\n                if (tableName) {\n                    const tableConfig = tablesConfig[tableName];\n                    tableConfig.relations[relationName] = relation;\n                }\n                else {\n                    if (!(dbName in relationsBuffer)) {\n                        relationsBuffer[dbName] = {\n                            relations: {},\n                            primaryKey,\n                        };\n                    }\n                    relationsBuffer[dbName].relations[relationName] = relation;\n                }\n            }\n        }\n    }\n    return { tables: tablesConfig, tableNamesMap };\n}\nfunction relations(table, relations) {\n    return new Relations(table, (helpers) => Object.fromEntries(Object.entries(relations(helpers)).map(([key, value]) => [\n        key,\n        value.withFieldName(key),\n    ])));\n}\nfunction createOne(sourceTable) {\n    return function one(table, config) {\n        return new One(sourceTable, table, config, (config?.fields.reduce((res, f) => res && f.notNull, true)\n            ?? false));\n    };\n}\nfunction createMany(sourceTable) {\n    return function many(referencedTable, config) {\n        return new Many(sourceTable, referencedTable, config);\n    };\n}\nfunction normalizeRelation(schema, tableNamesMap, relation) {\n    if (is(relation, One) && relation.config) {\n        return {\n            fields: relation.config.fields,\n            references: relation.config.references,\n        };\n    }\n    const referencedTableTsName = tableNamesMap[relation.referencedTable[Table.Symbol.Name]];\n    if (!referencedTableTsName) {\n        throw new Error(`Table \"${relation.referencedTable[Table.Symbol.Name]}\" not found in schema`);\n    }\n    const referencedTableConfig = schema[referencedTableTsName];\n    if (!referencedTableConfig) {\n        throw new Error(`Table \"${referencedTableTsName}\" not found in schema`);\n    }\n    const sourceTable = relation.sourceTable;\n    const sourceTableTsName = tableNamesMap[sourceTable[Table.Symbol.Name]];\n    if (!sourceTableTsName) {\n        throw new Error(`Table \"${sourceTable[Table.Symbol.Name]}\" not found in schema`);\n    }\n    const reverseRelations = [];\n    for (const referencedTableRelation of Object.values(referencedTableConfig.relations)) {\n        if ((relation.relationName\n            && relation !== referencedTableRelation\n            && referencedTableRelation.relationName === relation.relationName)\n            || (!relation.relationName\n                && referencedTableRelation.referencedTable === relation.sourceTable)) {\n            reverseRelations.push(referencedTableRelation);\n        }\n    }\n    if (reverseRelations.length > 1) {\n        throw relation.relationName\n            ? new Error(`There are multiple relations with name \"${relation.relationName}\" in table \"${referencedTableTsName}\"`)\n            : new Error(`There are multiple relations between \"${referencedTableTsName}\" and \"${relation.sourceTable[Table.Symbol.Name]}\". Please specify relation name`);\n    }\n    if (reverseRelations[0]\n        && is(reverseRelations[0], One)\n        && reverseRelations[0].config) {\n        return {\n            fields: reverseRelations[0].config.references,\n            references: reverseRelations[0].config.fields,\n        };\n    }\n    throw new Error(`There is not enough information to infer relation \"${sourceTableTsName}.${relation.fieldName}\"`);\n}\nfunction createTableRelationsHelpers(sourceTable) {\n    return {\n        one: createOne(sourceTable),\n        many: createMany(sourceTable),\n    };\n}\nfunction mapRelationalRow(tablesConfig, tableConfig, row, buildQueryResultSelection, mapColumnValue = (value) => value) {\n    const result = {};\n    for (const [selectionItemIndex, selectionItem,] of buildQueryResultSelection.entries()) {\n        if (selectionItem.isJson) {\n            const relation = tableConfig.relations[selectionItem.tsKey];\n            const rawSubRows = row[selectionItemIndex];\n            const subRows = typeof rawSubRows === 'string'\n                ? JSON.parse(rawSubRows)\n                : rawSubRows;\n            result[selectionItem.tsKey] = is(relation, One)\n                ? subRows\n                    && mapRelationalRow(tablesConfig, tablesConfig[selectionItem.relationTableTsKey], subRows, selectionItem.selection, mapColumnValue)\n                : subRows.map((subRow) => mapRelationalRow(tablesConfig, tablesConfig[selectionItem.relationTableTsKey], subRow, selectionItem.selection, mapColumnValue));\n        }\n        else {\n            const value = mapColumnValue(row[selectionItemIndex]);\n            const field = selectionItem.field;\n            let decoder;\n            if (is(field, Column)) {\n                decoder = field;\n            }\n            else if (is(field, SQL)) {\n                decoder = field.decoder;\n            }\n            else {\n                decoder = field.sql.decoder;\n            }\n            result[selectionItem.tsKey] = value === null ? null : decoder.mapFromDriverValue(value);\n        }\n    }\n    return result;\n}\n\nfunction bindIfParam(value, column) {\n    if (isDriverValueEncoder(column)\n        && !isSQLWrapper(value)\n        && !is(value, Param)\n        && !is(value, Placeholder)\n        && !is(value, Column)\n        && !is(value, Table)\n        && !is(value, View)) {\n        return new Param(value, column);\n    }\n    return value;\n}\n/**\n * Test that two values are equal.\n *\n * Remember that the SQL standard dictates that\n * two NULL values are not equal, so if you want to test\n * whether a value is null, you may want to use\n * `isNull` instead.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made by Ford\n * db.select().from(cars)\n *   .where(eq(cars.make, 'Ford'))\n * ```\n *\n * @see isNull for a way to test equality to NULL.\n */\nconst eq = (left, right) => {\n    return sql `${left} = ${bindIfParam(right, left)}`;\n};\n/**\n * Test that two values are not equal.\n *\n * Remember that the SQL standard dictates that\n * two NULL values are not equal, so if you want to test\n * whether a value is not null, you may want to use\n * `isNotNull` instead.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars not made by Ford\n * db.select().from(cars)\n *   .where(ne(cars.make, 'Ford'))\n * ```\n *\n * @see isNotNull for a way to test whether a value is not null.\n */\nconst ne = (left, right) => {\n    return sql `${left} <> ${bindIfParam(right, left)}`;\n};\nfunction and(...unfilteredConditions) {\n    const conditions = unfilteredConditions.filter((c) => c !== undefined);\n    if (conditions.length === 0) {\n        return undefined;\n    }\n    if (conditions.length === 1) {\n        return new SQL(conditions);\n    }\n    return new SQL([\n        new StringChunk('('),\n        sql.join(conditions, new StringChunk(' and ')),\n        new StringChunk(')'),\n    ]);\n}\nfunction or(...unfilteredConditions) {\n    const conditions = unfilteredConditions.filter((c) => c !== undefined);\n    if (conditions.length === 0) {\n        return undefined;\n    }\n    if (conditions.length === 1) {\n        return new SQL(conditions);\n    }\n    return new SQL([\n        new StringChunk('('),\n        sql.join(conditions, new StringChunk(' or ')),\n        new StringChunk(')'),\n    ]);\n}\n/**\n * Negate the meaning of an expression using the `not` keyword.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars _not_ made by GM or Ford.\n * db.select().from(cars)\n *   .where(not(inArray(cars.make, ['GM', 'Ford'])))\n * ```\n */\nfunction not(condition) {\n    return sql `not ${condition}`;\n}\n/**\n * Test that the first expression passed is greater than\n * the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made after 2000.\n * db.select().from(cars)\n *   .where(gt(cars.year, 2000))\n * ```\n *\n * @see gte for greater-than-or-equal\n */\nconst gt = (left, right) => {\n    return sql `${left} > ${bindIfParam(right, left)}`;\n};\n/**\n * Test that the first expression passed is greater than\n * or equal to the second expression. Use `gt` to\n * test whether an expression is strictly greater\n * than another.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made on or after 2000.\n * db.select().from(cars)\n *   .where(gte(cars.year, 2000))\n * ```\n *\n * @see gt for a strictly greater-than condition\n */\nconst gte = (left, right) => {\n    return sql `${left} >= ${bindIfParam(right, left)}`;\n};\n/**\n * Test that the first expression passed is less than\n * the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made before 2000.\n * db.select().from(cars)\n *   .where(lt(cars.year, 2000))\n * ```\n *\n * @see lte for greater-than-or-equal\n */\nconst lt = (left, right) => {\n    return sql `${left} < ${bindIfParam(right, left)}`;\n};\n/**\n * Test that the first expression passed is less than\n * or equal to the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made before 2000.\n * db.select().from(cars)\n *   .where(lte(cars.year, 2000))\n * ```\n *\n * @see lt for a strictly less-than condition\n */\nconst lte = (left, right) => {\n    return sql `${left} <= ${bindIfParam(right, left)}`;\n};\nfunction inArray(column, values) {\n    if (Array.isArray(values)) {\n        if (values.length === 0) {\n            throw new Error('inArray requires at least one value');\n        }\n        return sql `${column} in ${values.map((v) => bindIfParam(v, column))}`;\n    }\n    return sql `${column} in ${bindIfParam(values, column)}`;\n}\nfunction notInArray(column, values) {\n    if (Array.isArray(values)) {\n        if (values.length === 0) {\n            throw new Error('notInArray requires at least one value');\n        }\n        return sql `${column} not in ${values.map((v) => bindIfParam(v, column))}`;\n    }\n    return sql `${column} not in ${bindIfParam(values, column)}`;\n}\n/**\n * Test whether an expression is NULL. By the SQL standard,\n * NULL is neither equal nor not equal to itself, so\n * it's recommended to use `isNull` and `notIsNull` for\n * comparisons to NULL.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars that have no discontinuedAt date.\n * db.select().from(cars)\n *   .where(isNull(cars.discontinuedAt))\n * ```\n *\n * @see isNotNull for the inverse of this test\n */\nfunction isNull(value) {\n    return sql `${value} is null`;\n}\n/**\n * Test whether an expression is not NULL. By the SQL standard,\n * NULL is neither equal nor not equal to itself, so\n * it's recommended to use `isNull` and `notIsNull` for\n * comparisons to NULL.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars that have been discontinued.\n * db.select().from(cars)\n *   .where(isNotNull(cars.discontinuedAt))\n * ```\n *\n * @see isNull for the inverse of this test\n */\nfunction isNotNull(value) {\n    return sql `${value} is not null`;\n}\n/**\n * Test whether a subquery evaluates to have any rows.\n *\n * ## Examples\n *\n * ```ts\n * // Users whose `homeCity` column has a match in a cities\n * // table.\n * db\n *   .select()\n *   .from(users)\n *   .where(\n *     exists(db.select()\n *       .from(cities)\n *       .where(eq(users.homeCity, cities.id))),\n *   );\n * ```\n *\n * @see notExists for the inverse of this test\n */\nfunction exists(subquery) {\n    return sql `exists (${subquery})`;\n}\n/**\n * Test whether a subquery doesn't include any result\n * rows.\n *\n * ## Examples\n *\n * ```ts\n * // Users whose `homeCity` column doesn't match\n * // a row in the cities table.\n * db\n *   .select()\n *   .from(users)\n *   .where(\n *     notExists(db.select()\n *       .from(cities)\n *       .where(eq(users.homeCity, cities.id))),\n *   );\n * ```\n *\n * @see exists for the inverse of this test\n */\nfunction notExists(subquery) {\n    return sql `not exists (${subquery})`;\n}\nfunction between(column, min, max) {\n    return sql `${column} between ${bindIfParam(min, column)} and ${bindIfParam(max, column)}`;\n}\nfunction notBetween(column, min, max) {\n    return sql `${column} not between ${bindIfParam(min, column)} and ${bindIfParam(max, column)}`;\n}\n/**\n * Compare a column to a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars with 'Turbo' in their names.\n * db.select().from(cars)\n *   .where(like(cars.name, '%Turbo%'))\n * ```\n *\n * @see ilike for a case-insensitive version of this condition\n */\nfunction like(column, value) {\n    return sql `${column} like ${value}`;\n}\n/**\n * The inverse of like - this tests that a given column\n * does not match a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars that don't have \"ROver\" in their name.\n * db.select().from(cars)\n *   .where(notLike(cars.name, '%Rover%'))\n * ```\n *\n * @see like for the inverse condition\n * @see notIlike for a case-insensitive version of this condition\n */\nfunction notLike(column, value) {\n    return sql `${column} not like ${value}`;\n}\n/**\n * Case-insensitively compare a column to a pattern,\n * which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * Unlike like, this performs a case-insensitive comparison.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars with 'Turbo' in their names.\n * db.select().from(cars)\n *   .where(ilike(cars.name, '%Turbo%'))\n * ```\n *\n * @see like for a case-sensitive version of this condition\n */\nfunction ilike(column, value) {\n    return sql `${column} ilike ${value}`;\n}\n/**\n * The inverse of ilike - this case-insensitively tests that a given column\n * does not match a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars that don't have \"Rover\" in their name.\n * db.select().from(cars)\n *   .where(notLike(cars.name, '%Rover%'))\n * ```\n *\n * @see ilike for the inverse condition\n * @see notLike for a case-sensitive version of this condition\n */\nfunction notIlike(column, value) {\n    return sql `${column} not ilike ${value}`;\n}\nfunction arrayContains(column, values) {\n    if (Array.isArray(values)) {\n        if (values.length === 0) {\n            throw new Error('arrayContains requires at least one value');\n        }\n        const array = sql `${bindIfParam(values, column)}`;\n        return sql `${column} @> ${array}`;\n    }\n    return sql `${column} @> ${bindIfParam(values, column)}`;\n}\nfunction arrayContained(column, values) {\n    if (Array.isArray(values)) {\n        if (values.length === 0) {\n            throw new Error('arrayContained requires at least one value');\n        }\n        const array = sql `${bindIfParam(values, column)}`;\n        return sql `${column} <@ ${array}`;\n    }\n    return sql `${column} <@ ${bindIfParam(values, column)}`;\n}\nfunction arrayOverlaps(column, values) {\n    if (Array.isArray(values)) {\n        if (values.length === 0) {\n            throw new Error('arrayOverlaps requires at least one value');\n        }\n        const array = sql `${bindIfParam(values, column)}`;\n        return sql `${column} && ${array}`;\n    }\n    return sql `${column} && ${bindIfParam(values, column)}`;\n}\n\n/**\n * Used in sorting, this specifies that the given\n * column or expression should be sorted in ascending\n * order. By the SQL standard, ascending order is the\n * default, so it is not usually necessary to specify\n * ascending sort order.\n *\n * ## Examples\n *\n * ```ts\n * // Return cars, starting with the oldest models\n * // and going in ascending order to the newest.\n * db.select().from(cars)\n *   .orderBy(asc(cars.year));\n * ```\n *\n * @see desc to sort in descending order\n */\nfunction asc(column) {\n    return sql `${column} asc`;\n}\n/**\n * Used in sorting, this specifies that the given\n * column or expression should be sorted in descending\n * order.\n *\n * ## Examples\n *\n * ```ts\n * // Select users, with the most recently created\n * // records coming first.\n * db.select().from(users)\n *   .orderBy(desc(users.createdAt));\n * ```\n *\n * @see asc to sort in ascending order\n */\nfunction desc(column) {\n    return sql `${column} desc`;\n}\n\n/**\n * This class is used to indicate a primitive param value that is used in `sql` tag.\n * It is only used on type level and is never instantiated at runtime.\n * If you see a value of this type in the code, its runtime value is actually the primitive param value.\n */\nclass FakePrimitiveParam {\n    static [entityKind] = 'FakePrimitiveParam';\n}\nfunction isSQLWrapper(value) {\n    return typeof value === 'object' && value !== null && 'getSQL' in value\n        && typeof value.getSQL === 'function';\n}\nfunction mergeQueries(queries) {\n    const result = { sql: '', params: [] };\n    for (const query of queries) {\n        result.sql += query.sql;\n        result.params.push(...query.params);\n        if (query.typings?.length) {\n            if (!result.typings) {\n                result.typings = [];\n            }\n            result.typings.push(...query.typings);\n        }\n    }\n    return result;\n}\nclass StringChunk {\n    static [entityKind] = 'StringChunk';\n    value;\n    constructor(value) {\n        this.value = Array.isArray(value) ? value : [value];\n    }\n    getSQL() {\n        return new SQL([this]);\n    }\n}\nclass SQL {\n    queryChunks;\n    static [entityKind] = 'SQL';\n    /** @internal */\n    decoder = noopDecoder;\n    shouldInlineParams = false;\n    constructor(queryChunks) {\n        this.queryChunks = queryChunks;\n    }\n    append(query) {\n        this.queryChunks.push(...query.queryChunks);\n        return this;\n    }\n    toQuery(config) {\n        return tracer.startActiveSpan('drizzle.buildSQL', (span) => {\n            const query = this.buildQueryFromSourceParams(this.queryChunks, config);\n            span?.setAttributes({\n                'drizzle.query.text': query.sql,\n                'drizzle.query.params': JSON.stringify(query.params),\n            });\n            return query;\n        });\n    }\n    buildQueryFromSourceParams(chunks, _config) {\n        const config = Object.assign({}, _config, {\n            inlineParams: _config.inlineParams || this.shouldInlineParams,\n            paramStartIndex: _config.paramStartIndex || { value: 0 },\n        });\n        const { escapeName, escapeParam, prepareTyping, inlineParams, paramStartIndex, } = config;\n        return mergeQueries(chunks.map((chunk) => {\n            if (is(chunk, StringChunk)) {\n                return { sql: chunk.value.join(''), params: [] };\n            }\n            if (is(chunk, Name)) {\n                return { sql: escapeName(chunk.value), params: [] };\n            }\n            if (chunk === undefined) {\n                return { sql: '', params: [] };\n            }\n            if (Array.isArray(chunk)) {\n                const result = [new StringChunk('(')];\n                for (const [i, p] of chunk.entries()) {\n                    result.push(p);\n                    if (i < chunk.length - 1) {\n                        result.push(new StringChunk(', '));\n                    }\n                }\n                result.push(new StringChunk(')'));\n                return this.buildQueryFromSourceParams(result, config);\n            }\n            if (is(chunk, SQL)) {\n                return this.buildQueryFromSourceParams(chunk.queryChunks, {\n                    ...config,\n                    inlineParams: inlineParams || chunk.shouldInlineParams,\n                });\n            }\n            if (is(chunk, Table)) {\n                const schemaName = chunk[Table.Symbol.Schema];\n                const tableName = chunk[Table.Symbol.Name];\n                return {\n                    sql: schemaName === undefined\n                        ? escapeName(tableName)\n                        : escapeName(schemaName) + '.' + escapeName(tableName),\n                    params: [],\n                };\n            }\n            if (is(chunk, Column)) {\n                return { sql: escapeName(chunk.table[Table.Symbol.Name]) + '.' + escapeName(chunk.name), params: [] };\n            }\n            if (is(chunk, View)) {\n                const schemaName = chunk[ViewBaseConfig].schema;\n                const viewName = chunk[ViewBaseConfig].name;\n                return {\n                    sql: schemaName === undefined\n                        ? escapeName(viewName)\n                        : escapeName(schemaName) + '.' + escapeName(viewName),\n                    params: [],\n                };\n            }\n            if (is(chunk, Param)) {\n                const mappedValue = (chunk.value === null) ? null : chunk.encoder.mapToDriverValue(chunk.value);\n                if (is(mappedValue, SQL)) {\n                    return this.buildQueryFromSourceParams([mappedValue], config);\n                }\n                if (inlineParams) {\n                    return { sql: this.mapInlineParam(mappedValue, config), params: [] };\n                }\n                let typings;\n                if (prepareTyping !== undefined) {\n                    typings = [prepareTyping(chunk.encoder)];\n                }\n                return { sql: escapeParam(paramStartIndex.value++, mappedValue), params: [mappedValue], typings };\n            }\n            if (is(chunk, Placeholder)) {\n                return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk] };\n            }\n            if (is(chunk, SQL.Aliased) && chunk.fieldAlias !== undefined) {\n                return { sql: escapeName(chunk.fieldAlias), params: [] };\n            }\n            if (is(chunk, Subquery)) {\n                if (chunk[SubqueryConfig].isWith) {\n                    return { sql: escapeName(chunk[SubqueryConfig].alias), params: [] };\n                }\n                return this.buildQueryFromSourceParams([\n                    new StringChunk('('),\n                    chunk[SubqueryConfig].sql,\n                    new StringChunk(') '),\n                    new Name(chunk[SubqueryConfig].alias),\n                ], config);\n            }\n            // if (is(chunk, Placeholder)) {\n            // \treturn {sql: escapeParam}\n            if (isSQLWrapper(chunk)) {\n                return this.buildQueryFromSourceParams([\n                    new StringChunk('('),\n                    chunk.getSQL(),\n                    new StringChunk(')'),\n                ], config);\n            }\n            if (is(chunk, Relation)) {\n                return this.buildQueryFromSourceParams([\n                    chunk.sourceTable,\n                    new StringChunk('.'),\n                    sql.identifier(chunk.fieldName),\n                ], config);\n            }\n            if (inlineParams) {\n                return { sql: this.mapInlineParam(chunk, config), params: [] };\n            }\n            return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk] };\n        }));\n    }\n    mapInlineParam(chunk, { escapeString }) {\n        if (chunk === null) {\n            return 'null';\n        }\n        if (typeof chunk === 'number' || typeof chunk === 'boolean') {\n            return chunk.toString();\n        }\n        if (typeof chunk === 'string') {\n            return escapeString(chunk);\n        }\n        if (typeof chunk === 'object') {\n            const mappedValueAsString = chunk.toString();\n            if (mappedValueAsString === '[object Object]') {\n                return escapeString(JSON.stringify(chunk));\n            }\n            return escapeString(mappedValueAsString);\n        }\n        throw new Error('Unexpected param value: ' + chunk);\n    }\n    getSQL() {\n        return this;\n    }\n    as(alias) {\n        // TODO: remove with deprecated overloads\n        if (alias === undefined) {\n            return this;\n        }\n        return new SQL.Aliased(this, alias);\n    }\n    mapWith(decoder) {\n        this.decoder = typeof decoder === 'function' ? { mapFromDriverValue: decoder } : decoder;\n        return this;\n    }\n    inlineParams() {\n        this.shouldInlineParams = true;\n        return this;\n    }\n}\n/**\n * Any DB name (table, column, index etc.)\n */\nclass Name {\n    value;\n    static [entityKind] = 'Name';\n    brand;\n    constructor(value) {\n        this.value = value;\n    }\n    getSQL() {\n        return new SQL([this]);\n    }\n}\n/**\n * Any DB name (table, column, index etc.)\n * @deprecated Use `sql.identifier` instead.\n */\nfunction name(value) {\n    return new Name(value);\n}\nfunction isDriverValueEncoder(value) {\n    return typeof value === 'object' && value !== null && 'mapToDriverValue' in value\n        && typeof value.mapToDriverValue === 'function';\n}\nconst noopDecoder = {\n    mapFromDriverValue: (value) => value,\n};\nconst noopEncoder = {\n    mapToDriverValue: (value) => value,\n};\nconst noopMapper = {\n    ...noopDecoder,\n    ...noopEncoder,\n};\n/** Parameter value that is optionally bound to an encoder (for example, a column). */\nclass Param {\n    value;\n    encoder;\n    static [entityKind] = 'Param';\n    brand;\n    /**\n     * @param value - Parameter value\n     * @param encoder - Encoder to convert the value to a driver parameter\n     */\n    constructor(value, encoder = noopEncoder) {\n        this.value = value;\n        this.encoder = encoder;\n    }\n    getSQL() {\n        return new SQL([this]);\n    }\n}\n/** @deprecated Use `sql.param` instead. */\nfunction param(value, encoder) {\n    return new Param(value, encoder);\n}\n/*\n    The type of `params` is specified as `SQLSourceParam[]`, but that's slightly incorrect -\n    in runtime, users won't pass `FakePrimitiveParam` instances as `params` - they will pass primitive values\n    which will be wrapped in `Param` using `buildChunksFromParam(...)`. That's why the overload\n    specify `params` as `any[]` and not as `SQLSourceParam[]`. This type is used to make our lives easier and\n    the type checker happy.\n*/\nfunction sql(strings, ...params) {\n    const queryChunks = [];\n    if (params.length > 0 || (strings.length > 0 && strings[0] !== '')) {\n        queryChunks.push(new StringChunk(strings[0]));\n    }\n    for (const [paramIndex, param] of params.entries()) {\n        queryChunks.push(param, new StringChunk(strings[paramIndex + 1]));\n    }\n    return new SQL(queryChunks);\n}\n(function (sql) {\n    function empty() {\n        return new SQL([]);\n    }\n    sql.empty = empty;\n    /** @deprecated - use `sql.join()` */\n    function fromList(list) {\n        return new SQL(list);\n    }\n    sql.fromList = fromList;\n    /**\n     * Convenience function to create an SQL query from a raw string.\n     * @param str The raw SQL query string.\n     */\n    function raw(str) {\n        return new SQL([new StringChunk(str)]);\n    }\n    sql.raw = raw;\n    /**\n     * Join a list of SQL chunks with a separator.\n     * @example\n     * ```ts\n     * const query = sql.join([sql`a`, sql`b`, sql`c`]);\n     * // sql`abc`\n     * ```\n     * @example\n     * ```ts\n     * const query = sql.join([sql`a`, sql`b`, sql`c`], sql`, `);\n     * // sql`a, b, c`\n     * ```\n     */\n    function join(chunks, separator) {\n        const result = [];\n        for (const [i, chunk] of chunks.entries()) {\n            if (i > 0 && separator !== undefined) {\n                result.push(separator);\n            }\n            result.push(chunk);\n        }\n        return new SQL(result);\n    }\n    sql.join = join;\n    /**\n     * Create a SQL chunk that represents a DB identifier (table, column, index etc.).\n     * When used in a query, the identifier will be escaped based on the DB engine.\n     * For example, in PostgreSQL, identifiers are escaped with double quotes.\n     *\n     * **WARNING: This function does not offer any protection against SQL injections, so you must validate any user input beforehand.**\n     *\n     * @example ```ts\n     * const query = sql`SELECT * FROM ${sql.identifier('my-table')}`;\n     * // 'SELECT * FROM \"my-table\"'\n     * ```\n     */\n    function identifier(value) {\n        return new Name(value);\n    }\n    sql.identifier = identifier;\n    function placeholder(name) {\n        return new Placeholder(name);\n    }\n    sql.placeholder = placeholder;\n    function param(value, encoder) {\n        return new Param(value, encoder);\n    }\n    sql.param = param;\n})(sql || (sql = {}));\n(function (SQL) {\n    class Aliased {\n        sql;\n        fieldAlias;\n        static [entityKind] = 'SQL.Aliased';\n        /** @internal */\n        isSelectionField = false;\n        constructor(sql, fieldAlias) {\n            this.sql = sql;\n            this.fieldAlias = fieldAlias;\n        }\n        getSQL() {\n            return this.sql;\n        }\n        /** @internal */\n        clone() {\n            return new Aliased(this.sql, this.fieldAlias);\n        }\n    }\n    SQL.Aliased = Aliased;\n})(SQL || (SQL = {}));\nclass Placeholder {\n    name;\n    static [entityKind] = 'Placeholder';\n    constructor(name) {\n        this.name = name;\n    }\n    getSQL() {\n        return new SQL([this]);\n    }\n}\n/** @deprecated Use `sql.placeholder` instead. */\nfunction placeholder(name) {\n    return new Placeholder(name);\n}\nfunction fillPlaceholders(params, values) {\n    return params.map((p) => {\n        if (is(p, Placeholder)) {\n            if (!(p.name in values)) {\n                throw new Error(`No value for placeholder \"${p.name}\" was provided`);\n            }\n            return values[p.name];\n        }\n        return p;\n    });\n}\n// Defined separately from the Column class to resolve circular dependency\nColumn.prototype.getSQL = function () {\n    return new SQL([this]);\n};\n\nclass ColumnAliasProxyHandler {\n    table;\n    static [entityKind] = 'ColumnAliasProxyHandler';\n    constructor(table) {\n        this.table = table;\n    }\n    get(columnObj, prop) {\n        if (prop === 'table') {\n            return this.table;\n        }\n        return columnObj[prop];\n    }\n}\nclass TableAliasProxyHandler {\n    alias;\n    replaceOriginalName;\n    static [entityKind] = 'TableAliasProxyHandler';\n    constructor(alias, replaceOriginalName) {\n        this.alias = alias;\n        this.replaceOriginalName = replaceOriginalName;\n    }\n    get(target, prop) {\n        if (prop === Table.Symbol.IsAlias) {\n            return true;\n        }\n        if (prop === Table.Symbol.Name) {\n            return this.alias;\n        }\n        if (this.replaceOriginalName && prop === Table.Symbol.OriginalName) {\n            return this.alias;\n        }\n        if (prop === ViewBaseConfig) {\n            return {\n                ...target[ViewBaseConfig],\n                name: this.alias,\n                isAlias: true,\n            };\n        }\n        if (prop === Table.Symbol.Columns) {\n            const columns = target[Table.Symbol.Columns];\n            if (!columns) {\n                return columns;\n            }\n            const proxiedColumns = {};\n            Object.keys(columns).map((key) => {\n                proxiedColumns[key] = new Proxy(columns[key], new ColumnAliasProxyHandler(new Proxy(target, this)));\n            });\n            return proxiedColumns;\n        }\n        const value = target[prop];\n        if (is(value, Column)) {\n            return new Proxy(value, new ColumnAliasProxyHandler(new Proxy(target, this)));\n        }\n        return value;\n    }\n}\nclass RelationTableAliasProxyHandler {\n    alias;\n    static [entityKind] = 'RelationTableAliasProxyHandler';\n    constructor(alias) {\n        this.alias = alias;\n    }\n    get(target, prop) {\n        if (prop === 'sourceTable') {\n            return aliasedTable(target.sourceTable, this.alias);\n        }\n        return target[prop];\n    }\n}\nfunction aliasedTable(table, tableAlias) {\n    return new Proxy(table, new TableAliasProxyHandler(tableAlias, false));\n}\nfunction aliasedRelation(relation, tableAlias) {\n    return new Proxy(relation, new RelationTableAliasProxyHandler(tableAlias));\n}\nfunction aliasedTableColumn(column, tableAlias) {\n    return new Proxy(column, new ColumnAliasProxyHandler(new Proxy(column.table, new TableAliasProxyHandler(tableAlias, false))));\n}\nfunction mapColumnsInAliasedSQLToAlias(query, alias) {\n    return new SQL.Aliased(mapColumnsInSQLToAlias(query.sql, alias), query.fieldAlias);\n}\nfunction mapColumnsInSQLToAlias(query, alias) {\n    return sql.join(query.queryChunks.map((c) => {\n        if (is(c, Column)) {\n            return aliasedTableColumn(c, alias);\n        }\n        if (is(c, SQL)) {\n            return mapColumnsInSQLToAlias(c, alias);\n        }\n        if (is(c, SQL.Aliased)) {\n            return mapColumnsInAliasedSQLToAlias(c, alias);\n        }\n        return c;\n    }));\n}\n\n\n//# sourceMappingURL=alias-cf8e03cd.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/drizzle-orm/alias-cf8e03cd.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/drizzle-orm/index.mjs":
/*!********************************************!*\
  !*** ./node_modules/drizzle-orm/index.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseName: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bS),\n/* harmony export */   Column: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   ColumnAliasProxyHandler: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b4),\n/* harmony export */   ColumnBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.C),\n/* harmony export */   Columns: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bQ),\n/* harmony export */   ConsoleLogWriter: () => (/* binding */ ConsoleLogWriter),\n/* harmony export */   DefaultLogger: () => (/* binding */ DefaultLogger),\n/* harmony export */   DrizzleError: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.D),\n/* harmony export */   ExtraConfigBuilder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bU),\n/* harmony export */   FakePrimitiveParam: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bC),\n/* harmony export */   IsAlias: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bT),\n/* harmony export */   Many: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.M),\n/* harmony export */   Name: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bF),\n/* harmony export */   NoopLogger: () => (/* binding */ NoopLogger),\n/* harmony export */   One: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.O),\n/* harmony export */   OriginalName: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bR),\n/* harmony export */   Param: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   Placeholder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bM),\n/* harmony export */   QueryPromise: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.Q),\n/* harmony export */   Relation: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bx),\n/* harmony export */   RelationTableAliasProxyHandler: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b5),\n/* harmony export */   Relations: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.by),\n/* harmony export */   SQL: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S),\n/* harmony export */   Schema: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bP),\n/* harmony export */   SelectionProxyHandler: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j),\n/* harmony export */   StringChunk: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bE),\n/* harmony export */   Subquery: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.r),\n/* harmony export */   SubqueryConfig: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.u),\n/* harmony export */   Table: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T),\n/* harmony export */   TableAliasProxyHandler: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.n),\n/* harmony export */   TableName: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bO),\n/* harmony export */   TransactionRollbackError: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.l),\n/* harmony export */   View: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.v),\n/* harmony export */   ViewBaseConfig: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.V),\n/* harmony export */   WithSubquery: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.W),\n/* harmony export */   aliasedRelation: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b6),\n/* harmony export */   aliasedTable: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.G),\n/* harmony export */   aliasedTableColumn: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w),\n/* harmony export */   and: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.E),\n/* harmony export */   applyMixins: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.H),\n/* harmony export */   arrayContained: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bt),\n/* harmony export */   arrayContains: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bs),\n/* harmony export */   arrayOverlaps: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bu),\n/* harmony export */   asc: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bv),\n/* harmony export */   between: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bm),\n/* harmony export */   bindIfParam: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b8),\n/* harmony export */   createMany: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bB),\n/* harmony export */   createOne: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bA),\n/* harmony export */   createTableRelationsHelpers: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   desc: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bw),\n/* harmony export */   entityKind: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e),\n/* harmony export */   eq: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.F),\n/* harmony export */   exists: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bk),\n/* harmony export */   extractTablesRelationalConfig: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   fillPlaceholders: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.f),\n/* harmony export */   getOperators: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.x),\n/* harmony export */   getOrderByOperators: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.A),\n/* harmony export */   getTableColumns: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.I),\n/* harmony export */   getTableLikeName: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.K),\n/* harmony export */   getTableName: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.q),\n/* harmony export */   gt: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bc),\n/* harmony export */   gte: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bd),\n/* harmony export */   hasOwnEntityKind: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b7),\n/* harmony export */   iife: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bW),\n/* harmony export */   ilike: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bq),\n/* harmony export */   inArray: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bg),\n/* harmony export */   is: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i),\n/* harmony export */   isDriverValueEncoder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bH),\n/* harmony export */   isNotNull: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bj),\n/* harmony export */   isNull: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bi),\n/* harmony export */   isSQLWrapper: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bD),\n/* harmony export */   isTable: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bV),\n/* harmony export */   like: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bo),\n/* harmony export */   lt: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.be),\n/* harmony export */   lte: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bf),\n/* harmony export */   mapColumnsInAliasedSQLToAlias: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.z),\n/* harmony export */   mapColumnsInSQLToAlias: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.y),\n/* harmony export */   mapRelationalRow: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   mapResultRow: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.m),\n/* harmony export */   mapUpdateSet: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   name: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bG),\n/* harmony export */   ne: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b9),\n/* harmony export */   noopDecoder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bI),\n/* harmony export */   noopEncoder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bJ),\n/* harmony export */   noopMapper: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bK),\n/* harmony export */   normalizeRelation: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.B),\n/* harmony export */   not: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bb),\n/* harmony export */   notBetween: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bn),\n/* harmony export */   notExists: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bl),\n/* harmony export */   notIlike: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.br),\n/* harmony export */   notInArray: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bh),\n/* harmony export */   notLike: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bp),\n/* harmony export */   or: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.ba),\n/* harmony export */   orderSelectedFields: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.o),\n/* harmony export */   param: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bL),\n/* harmony export */   placeholder: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bN),\n/* harmony export */   relations: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.bz),\n/* harmony export */   sql: () => (/* reexport safe */ _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s)\n/* harmony export */ });\n/* harmony import */ var _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./alias-cf8e03cd.mjs */ \"(rsc)/./node_modules/drizzle-orm/alias-cf8e03cd.mjs\");\n\n\n\nclass ConsoleLogWriter {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'ConsoleLogWriter';\n    write(message) {\n        console.log(message);\n    }\n}\nclass DefaultLogger {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'DefaultLogger';\n    writer;\n    constructor(config) {\n        this.writer = config?.writer ?? new ConsoleLogWriter();\n    }\n    logQuery(query, params) {\n        const stringifiedParams = params.map((p) => {\n            try {\n                return JSON.stringify(p);\n            }\n            catch {\n                return String(p);\n            }\n        });\n        const paramsStr = stringifiedParams.length ? ` -- params: [${stringifiedParams.join(', ')}]` : '';\n        this.writer.write(`Query: ${query}${paramsStr}`);\n    }\n}\nclass NoopLogger {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'NoopLogger';\n    logQuery() {\n        // noop\n    }\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZHJpenpsZS1vcm0vaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF1RDtBQUNvcUQ7O0FBRTN0RDtBQUNBLFlBQVksa0RBQVU7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksa0RBQVU7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULHFFQUFxRSw2QkFBNkI7QUFDbEcsb0NBQW9DLE1BQU0sRUFBRSxVQUFVO0FBQ3REO0FBQ0E7QUFDQTtBQUNBLFlBQVksa0RBQVU7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRW1FO0FBQ25FIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEVkZ2FyIEogUm9qYXMgTFxcZGV2XFxjYXByZXMtd2ViXFxub2RlX21vZHVsZXNcXGRyaXp6bGUtb3JtXFxpbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZSBhcyBlbnRpdHlLaW5kIH0gZnJvbSAnLi9hbGlhcy1jZjhlMDNjZC5tanMnO1xuZXhwb3J0IHsgYlMgYXMgQmFzZU5hbWUsIHAgYXMgQ29sdW1uLCBiNCBhcyBDb2x1bW5BbGlhc1Byb3h5SGFuZGxlciwgQyBhcyBDb2x1bW5CdWlsZGVyLCBiUSBhcyBDb2x1bW5zLCBEIGFzIERyaXp6bGVFcnJvciwgYlUgYXMgRXh0cmFDb25maWdCdWlsZGVyLCBiQyBhcyBGYWtlUHJpbWl0aXZlUGFyYW0sIGJUIGFzIElzQWxpYXMsIE0gYXMgTWFueSwgYkYgYXMgTmFtZSwgTyBhcyBPbmUsIGJSIGFzIE9yaWdpbmFsTmFtZSwgYiBhcyBQYXJhbSwgYk0gYXMgUGxhY2Vob2xkZXIsIFEgYXMgUXVlcnlQcm9taXNlLCBieCBhcyBSZWxhdGlvbiwgYjUgYXMgUmVsYXRpb25UYWJsZUFsaWFzUHJveHlIYW5kbGVyLCBieSBhcyBSZWxhdGlvbnMsIFMgYXMgU1FMLCBiUCBhcyBTY2hlbWEsIGogYXMgU2VsZWN0aW9uUHJveHlIYW5kbGVyLCBiRSBhcyBTdHJpbmdDaHVuaywgciBhcyBTdWJxdWVyeSwgdSBhcyBTdWJxdWVyeUNvbmZpZywgVCBhcyBUYWJsZSwgbiBhcyBUYWJsZUFsaWFzUHJveHlIYW5kbGVyLCBiTyBhcyBUYWJsZU5hbWUsIGwgYXMgVHJhbnNhY3Rpb25Sb2xsYmFja0Vycm9yLCB2IGFzIFZpZXcsIFYgYXMgVmlld0Jhc2VDb25maWcsIFcgYXMgV2l0aFN1YnF1ZXJ5LCBiNiBhcyBhbGlhc2VkUmVsYXRpb24sIEcgYXMgYWxpYXNlZFRhYmxlLCB3IGFzIGFsaWFzZWRUYWJsZUNvbHVtbiwgRSBhcyBhbmQsIEggYXMgYXBwbHlNaXhpbnMsIGJ0IGFzIGFycmF5Q29udGFpbmVkLCBicyBhcyBhcnJheUNvbnRhaW5zLCBidSBhcyBhcnJheU92ZXJsYXBzLCBidiBhcyBhc2MsIGJtIGFzIGJldHdlZW4sIGI4IGFzIGJpbmRJZlBhcmFtLCBiQiBhcyBjcmVhdGVNYW55LCBiQSBhcyBjcmVhdGVPbmUsIGMgYXMgY3JlYXRlVGFibGVSZWxhdGlvbnNIZWxwZXJzLCBidyBhcyBkZXNjLCBGIGFzIGVxLCBiayBhcyBleGlzdHMsIGEgYXMgZXh0cmFjdFRhYmxlc1JlbGF0aW9uYWxDb25maWcsIGYgYXMgZmlsbFBsYWNlaG9sZGVycywgeCBhcyBnZXRPcGVyYXRvcnMsIEEgYXMgZ2V0T3JkZXJCeU9wZXJhdG9ycywgSSBhcyBnZXRUYWJsZUNvbHVtbnMsIEsgYXMgZ2V0VGFibGVMaWtlTmFtZSwgcSBhcyBnZXRUYWJsZU5hbWUsIGJjIGFzIGd0LCBiZCBhcyBndGUsIGI3IGFzIGhhc093bkVudGl0eUtpbmQsIGJXIGFzIGlpZmUsIGJxIGFzIGlsaWtlLCBiZyBhcyBpbkFycmF5LCBpIGFzIGlzLCBiSCBhcyBpc0RyaXZlclZhbHVlRW5jb2RlciwgYmogYXMgaXNOb3ROdWxsLCBiaSBhcyBpc051bGwsIGJEIGFzIGlzU1FMV3JhcHBlciwgYlYgYXMgaXNUYWJsZSwgYm8gYXMgbGlrZSwgYmUgYXMgbHQsIGJmIGFzIGx0ZSwgeiBhcyBtYXBDb2x1bW5zSW5BbGlhc2VkU1FMVG9BbGlhcywgeSBhcyBtYXBDb2x1bW5zSW5TUUxUb0FsaWFzLCBnIGFzIG1hcFJlbGF0aW9uYWxSb3csIG0gYXMgbWFwUmVzdWx0Um93LCBkIGFzIG1hcFVwZGF0ZVNldCwgYkcgYXMgbmFtZSwgYjkgYXMgbmUsIGJJIGFzIG5vb3BEZWNvZGVyLCBiSiBhcyBub29wRW5jb2RlciwgYksgYXMgbm9vcE1hcHBlciwgQiBhcyBub3JtYWxpemVSZWxhdGlvbiwgYmIgYXMgbm90LCBibiBhcyBub3RCZXR3ZWVuLCBibCBhcyBub3RFeGlzdHMsIGJyIGFzIG5vdElsaWtlLCBiaCBhcyBub3RJbkFycmF5LCBicCBhcyBub3RMaWtlLCBiYSBhcyBvciwgbyBhcyBvcmRlclNlbGVjdGVkRmllbGRzLCBiTCBhcyBwYXJhbSwgYk4gYXMgcGxhY2Vob2xkZXIsIGJ6IGFzIHJlbGF0aW9ucywgcyBhcyBzcWwgfSBmcm9tICcuL2FsaWFzLWNmOGUwM2NkLm1qcyc7XG5cbmNsYXNzIENvbnNvbGVMb2dXcml0ZXIge1xuICAgIHN0YXRpYyBbZW50aXR5S2luZF0gPSAnQ29uc29sZUxvZ1dyaXRlcic7XG4gICAgd3JpdGUobWVzc2FnZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAgICB9XG59XG5jbGFzcyBEZWZhdWx0TG9nZ2VyIHtcbiAgICBzdGF0aWMgW2VudGl0eUtpbmRdID0gJ0RlZmF1bHRMb2dnZXInO1xuICAgIHdyaXRlcjtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgICAgdGhpcy53cml0ZXIgPSBjb25maWc/LndyaXRlciA/PyBuZXcgQ29uc29sZUxvZ1dyaXRlcigpO1xuICAgIH1cbiAgICBsb2dRdWVyeShxdWVyeSwgcGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IHN0cmluZ2lmaWVkUGFyYW1zID0gcGFyYW1zLm1hcCgocCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHBhcmFtc1N0ciA9IHN0cmluZ2lmaWVkUGFyYW1zLmxlbmd0aCA/IGAgLS0gcGFyYW1zOiBbJHtzdHJpbmdpZmllZFBhcmFtcy5qb2luKCcsICcpfV1gIDogJyc7XG4gICAgICAgIHRoaXMud3JpdGVyLndyaXRlKGBRdWVyeTogJHtxdWVyeX0ke3BhcmFtc1N0cn1gKTtcbiAgICB9XG59XG5jbGFzcyBOb29wTG9nZ2VyIHtcbiAgICBzdGF0aWMgW2VudGl0eUtpbmRdID0gJ05vb3BMb2dnZXInO1xuICAgIGxvZ1F1ZXJ5KCkge1xuICAgICAgICAvLyBub29wXG4gICAgfVxufVxuXG5leHBvcnQgeyBDb25zb2xlTG9nV3JpdGVyLCBEZWZhdWx0TG9nZ2VyLCBOb29wTG9nZ2VyLCBlbnRpdHlLaW5kIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/drizzle-orm/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/drizzle-orm/mysql-core/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/drizzle-orm/mysql-core/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Check: () => (/* binding */ Check),\n/* harmony export */   CheckBuilder: () => (/* binding */ CheckBuilder),\n/* harmony export */   ForeignKey: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.k),\n/* harmony export */   ForeignKeyBuilder: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.F),\n/* harmony export */   Index: () => (/* binding */ Index),\n/* harmony export */   IndexBuilder: () => (/* binding */ IndexBuilder),\n/* harmony export */   IndexBuilderOn: () => (/* binding */ IndexBuilderOn),\n/* harmony export */   InlineForeignKeys: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.I),\n/* harmony export */   ManualViewBuilder: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.C),\n/* harmony export */   MySqlBigInt53: () => (/* binding */ MySqlBigInt53),\n/* harmony export */   MySqlBigInt53Builder: () => (/* binding */ MySqlBigInt53Builder),\n/* harmony export */   MySqlBigInt64: () => (/* binding */ MySqlBigInt64),\n/* harmony export */   MySqlBigInt64Builder: () => (/* binding */ MySqlBigInt64Builder),\n/* harmony export */   MySqlBinary: () => (/* binding */ MySqlBinary),\n/* harmony export */   MySqlBinaryBuilder: () => (/* binding */ MySqlBinaryBuilder),\n/* harmony export */   MySqlBoolean: () => (/* binding */ MySqlBoolean),\n/* harmony export */   MySqlBooleanBuilder: () => (/* binding */ MySqlBooleanBuilder),\n/* harmony export */   MySqlChar: () => (/* binding */ MySqlChar),\n/* harmony export */   MySqlCharBuilder: () => (/* binding */ MySqlCharBuilder),\n/* harmony export */   MySqlColumn: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   MySqlColumnBuilder: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f),\n/* harmony export */   MySqlColumnBuilderWithAutoIncrement: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   MySqlColumnWithAutoIncrement: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.e),\n/* harmony export */   MySqlCustomColumn: () => (/* binding */ MySqlCustomColumn),\n/* harmony export */   MySqlCustomColumnBuilder: () => (/* binding */ MySqlCustomColumnBuilder),\n/* harmony export */   MySqlDatabase: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   MySqlDate: () => (/* binding */ MySqlDate),\n/* harmony export */   MySqlDateBuilder: () => (/* binding */ MySqlDateBuilder),\n/* harmony export */   MySqlDateString: () => (/* binding */ MySqlDateString),\n/* harmony export */   MySqlDateStringBuilder: () => (/* binding */ MySqlDateStringBuilder),\n/* harmony export */   MySqlDateTime: () => (/* binding */ MySqlDateTime),\n/* harmony export */   MySqlDateTimeBuilder: () => (/* binding */ MySqlDateTimeBuilder),\n/* harmony export */   MySqlDateTimeString: () => (/* binding */ MySqlDateTimeString),\n/* harmony export */   MySqlDateTimeStringBuilder: () => (/* binding */ MySqlDateTimeStringBuilder),\n/* harmony export */   MySqlDecimal: () => (/* binding */ MySqlDecimal),\n/* harmony export */   MySqlDecimalBuilder: () => (/* binding */ MySqlDecimalBuilder),\n/* harmony export */   MySqlDelete: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.n),\n/* harmony export */   MySqlDialect: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   MySqlDouble: () => (/* binding */ MySqlDouble),\n/* harmony export */   MySqlDoubleBuilder: () => (/* binding */ MySqlDoubleBuilder),\n/* harmony export */   MySqlEnumColumn: () => (/* binding */ MySqlEnumColumn),\n/* harmony export */   MySqlEnumColumnBuilder: () => (/* binding */ MySqlEnumColumnBuilder),\n/* harmony export */   MySqlFloat: () => (/* binding */ MySqlFloat),\n/* harmony export */   MySqlFloatBuilder: () => (/* binding */ MySqlFloatBuilder),\n/* harmony export */   MySqlInsert: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   MySqlInsertBuilder: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.o),\n/* harmony export */   MySqlInt: () => (/* binding */ MySqlInt),\n/* harmony export */   MySqlIntBuilder: () => (/* binding */ MySqlIntBuilder),\n/* harmony export */   MySqlJson: () => (/* binding */ MySqlJson),\n/* harmony export */   MySqlJsonBuilder: () => (/* binding */ MySqlJsonBuilder),\n/* harmony export */   MySqlMediumInt: () => (/* binding */ MySqlMediumInt),\n/* harmony export */   MySqlMediumIntBuilder: () => (/* binding */ MySqlMediumIntBuilder),\n/* harmony export */   MySqlReal: () => (/* binding */ MySqlReal),\n/* harmony export */   MySqlRealBuilder: () => (/* binding */ MySqlRealBuilder),\n/* harmony export */   MySqlSchema: () => (/* binding */ MySqlSchema),\n/* harmony export */   MySqlSelect: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.s),\n/* harmony export */   MySqlSelectBuilder: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.q),\n/* harmony export */   MySqlSelectQueryBuilder: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.r),\n/* harmony export */   MySqlSerial: () => (/* binding */ MySqlSerial),\n/* harmony export */   MySqlSerialBuilder: () => (/* binding */ MySqlSerialBuilder),\n/* harmony export */   MySqlSession: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.M),\n/* harmony export */   MySqlSmallInt: () => (/* binding */ MySqlSmallInt),\n/* harmony export */   MySqlSmallIntBuilder: () => (/* binding */ MySqlSmallIntBuilder),\n/* harmony export */   MySqlTable: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.h),\n/* harmony export */   MySqlText: () => (/* binding */ MySqlText),\n/* harmony export */   MySqlTextBuilder: () => (/* binding */ MySqlTextBuilder),\n/* harmony export */   MySqlTime: () => (/* binding */ MySqlTime),\n/* harmony export */   MySqlTimeBuilder: () => (/* binding */ MySqlTimeBuilder),\n/* harmony export */   MySqlTimestamp: () => (/* binding */ MySqlTimestamp),\n/* harmony export */   MySqlTimestampBuilder: () => (/* binding */ MySqlTimestampBuilder),\n/* harmony export */   MySqlTimestampString: () => (/* binding */ MySqlTimestampString),\n/* harmony export */   MySqlTimestampStringBuilder: () => (/* binding */ MySqlTimestampStringBuilder),\n/* harmony export */   MySqlTinyInt: () => (/* binding */ MySqlTinyInt),\n/* harmony export */   MySqlTinyIntBuilder: () => (/* binding */ MySqlTinyIntBuilder),\n/* harmony export */   MySqlTransaction: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   MySqlUpdate: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.u),\n/* harmony export */   MySqlUpdateBuilder: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.t),\n/* harmony export */   MySqlVarBinary: () => (/* binding */ MySqlVarBinary),\n/* harmony export */   MySqlVarBinaryBuilder: () => (/* binding */ MySqlVarBinaryBuilder),\n/* harmony export */   MySqlVarChar: () => (/* binding */ MySqlVarChar),\n/* harmony export */   MySqlVarCharBuilder: () => (/* binding */ MySqlVarCharBuilder),\n/* harmony export */   MySqlView: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.E),\n/* harmony export */   MySqlViewBase: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.D),\n/* harmony export */   MySqlViewConfig: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.j),\n/* harmony export */   MySqlYear: () => (/* binding */ MySqlYear),\n/* harmony export */   MySqlYearBuilder: () => (/* binding */ MySqlYearBuilder),\n/* harmony export */   PreparedQuery: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.P),\n/* harmony export */   PrimaryKey: () => (/* binding */ PrimaryKey),\n/* harmony export */   PrimaryKeyBuilder: () => (/* binding */ PrimaryKeyBuilder),\n/* harmony export */   QueryBuilder: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.Q),\n/* harmony export */   UniqueConstraint: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.A),\n/* harmony export */   UniqueConstraintBuilder: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.U),\n/* harmony export */   UniqueOnConstraintBuilder: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.z),\n/* harmony export */   ViewBuilder: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.B),\n/* harmony export */   ViewBuilderCore: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.V),\n/* harmony export */   alias: () => (/* binding */ alias),\n/* harmony export */   bigint: () => (/* binding */ bigint),\n/* harmony export */   binary: () => (/* binding */ binary),\n/* harmony export */   boolean: () => (/* binding */ boolean),\n/* harmony export */   char: () => (/* binding */ char),\n/* harmony export */   check: () => (/* binding */ check),\n/* harmony export */   customType: () => (/* binding */ customType),\n/* harmony export */   date: () => (/* binding */ date),\n/* harmony export */   datetime: () => (/* binding */ datetime),\n/* harmony export */   decimal: () => (/* binding */ decimal),\n/* harmony export */   double: () => (/* binding */ double),\n/* harmony export */   float: () => (/* binding */ float),\n/* harmony export */   foreignKey: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.l),\n/* harmony export */   getTableConfig: () => (/* binding */ getTableConfig),\n/* harmony export */   getViewConfig: () => (/* binding */ getViewConfig),\n/* harmony export */   index: () => (/* binding */ index),\n/* harmony export */   int: () => (/* binding */ int),\n/* harmony export */   isMySqlSchema: () => (/* binding */ isMySqlSchema),\n/* harmony export */   json: () => (/* binding */ json),\n/* harmony export */   longtext: () => (/* binding */ longtext),\n/* harmony export */   mediumint: () => (/* binding */ mediumint),\n/* harmony export */   mediumtext: () => (/* binding */ mediumtext),\n/* harmony export */   mysqlDatabase: () => (/* binding */ mysqlDatabase),\n/* harmony export */   mysqlEnum: () => (/* binding */ mysqlEnum),\n/* harmony export */   mysqlSchema: () => (/* binding */ mysqlSchema),\n/* harmony export */   mysqlTable: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.v),\n/* harmony export */   mysqlTableCreator: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.w),\n/* harmony export */   mysqlTableWithSchema: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.m),\n/* harmony export */   mysqlView: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.G),\n/* harmony export */   mysqlViewWithSchema: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.i),\n/* harmony export */   primaryKey: () => (/* binding */ primaryKey),\n/* harmony export */   real: () => (/* binding */ real),\n/* harmony export */   serial: () => (/* binding */ serial),\n/* harmony export */   smallint: () => (/* binding */ smallint),\n/* harmony export */   text: () => (/* binding */ text),\n/* harmony export */   time: () => (/* binding */ time),\n/* harmony export */   timestamp: () => (/* binding */ timestamp),\n/* harmony export */   tinyint: () => (/* binding */ tinyint),\n/* harmony export */   tinytext: () => (/* binding */ tinytext),\n/* harmony export */   unique: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.x),\n/* harmony export */   uniqueIndex: () => (/* binding */ uniqueIndex),\n/* harmony export */   uniqueKeyName: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.y),\n/* harmony export */   varbinary: () => (/* binding */ varbinary),\n/* harmony export */   varchar: () => (/* binding */ varchar),\n/* harmony export */   year: () => (/* binding */ year)\n/* harmony export */ });\n/* harmony import */ var _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../alias-cf8e03cd.mjs */ \"(rsc)/./node_modules/drizzle-orm/alias-cf8e03cd.mjs\");\n/* harmony import */ var _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../view-23898f21.mjs */ \"(rsc)/./node_modules/drizzle-orm/view-23898f21.mjs\");\n\n\n\n\nclass MySqlBigInt53Builder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.d {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlBigInt53Builder';\n    constructor(name) {\n        super(name, 'number', 'MySqlBigInt53');\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlBigInt53(table, this.config);\n    }\n}\nclass MySqlBigInt53 extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.e {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlBigInt53';\n    getSQLType() {\n        return 'bigint';\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === 'number') {\n            return value;\n        }\n        return Number(value);\n    }\n}\nclass MySqlBigInt64Builder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.d {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlBigInt64Builder';\n    constructor(name) {\n        super(name, 'bigint', 'MySqlBigInt64');\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlBigInt64(table, this.config);\n    }\n}\nclass MySqlBigInt64 extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.e {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlBigInt64';\n    getSQLType() {\n        return 'bigint';\n    }\n    // eslint-disable-next-line unicorn/prefer-native-coercion-functions\n    mapFromDriverValue(value) {\n        return BigInt(value);\n    }\n}\nfunction bigint(name, config) {\n    if (config.mode === 'number') {\n        return new MySqlBigInt53Builder(name);\n    }\n    return new MySqlBigInt64Builder(name);\n}\n\nclass MySqlBinaryBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlBinaryBuilder';\n    constructor(name, length) {\n        super(name, 'string', 'MySqlBinary');\n        this.config.length = length;\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlBinary(table, this.config);\n    }\n}\nclass MySqlBinary extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlBinary';\n    length = this.config.length;\n    getSQLType() {\n        return this.length === undefined ? `binary` : `binary(${this.length})`;\n    }\n}\nfunction binary(name, config = {}) {\n    return new MySqlBinaryBuilder(name, config.length);\n}\n\nclass MySqlBooleanBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlBooleanBuilder';\n    constructor(name) {\n        super(name, 'boolean', 'MySqlBoolean');\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlBoolean(table, this.config);\n    }\n}\nclass MySqlBoolean extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlBoolean';\n    getSQLType() {\n        return 'boolean';\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === 'boolean') {\n            return value;\n        }\n        return value === 1;\n    }\n}\nfunction boolean(name) {\n    return new MySqlBooleanBuilder(name);\n}\n\nclass MySqlCharBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlCharBuilder';\n    constructor(name, config) {\n        super(name, 'string', 'MySqlChar');\n        this.config.length = config.length;\n        this.config.enum = config.enum;\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlChar(table, this.config);\n    }\n}\nclass MySqlChar extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlChar';\n    length = this.config.length;\n    enumValues = this.config.enum;\n    getSQLType() {\n        return this.length === undefined ? `char` : `char(${this.length})`;\n    }\n}\nfunction char(name, config = {}) {\n    return new MySqlCharBuilder(name, config);\n}\n\nclass MySqlCustomColumnBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlCustomColumnBuilder';\n    constructor(name, fieldConfig, customTypeParams) {\n        super(name, 'custom', 'MySqlCustomColumn');\n        this.config.fieldConfig = fieldConfig;\n        this.config.customTypeParams = customTypeParams;\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlCustomColumn(table, this.config);\n    }\n}\nclass MySqlCustomColumn extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlCustomColumn';\n    sqlName;\n    mapTo;\n    mapFrom;\n    constructor(table, config) {\n        super(table, config);\n        this.sqlName = config.customTypeParams.dataType(config.fieldConfig);\n        this.mapTo = config.customTypeParams.toDriver;\n        this.mapFrom = config.customTypeParams.fromDriver;\n    }\n    getSQLType() {\n        return this.sqlName;\n    }\n    mapFromDriverValue(value) {\n        return typeof this.mapFrom === 'function' ? this.mapFrom(value) : value;\n    }\n    mapToDriverValue(value) {\n        return typeof this.mapTo === 'function' ? this.mapTo(value) : value;\n    }\n}\n/**\n * Custom mysql database data type generator\n */\nfunction customType(customTypeParams) {\n    return (dbName, fieldConfig) => {\n        return new MySqlCustomColumnBuilder(dbName, fieldConfig, customTypeParams);\n    };\n}\n\nclass MySqlDateBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlDateBuilder';\n    constructor(name) {\n        super(name, 'date', 'MySqlDate');\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlDate(table, this.config);\n    }\n}\nclass MySqlDate extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlDate';\n    constructor(table, config) {\n        super(table, config);\n    }\n    getSQLType() {\n        return `date`;\n    }\n    mapFromDriverValue(value) {\n        return new Date(value);\n    }\n}\nclass MySqlDateStringBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlDateStringBuilder';\n    constructor(name) {\n        super(name, 'string', 'MySqlDateString');\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlDateString(table, this.config);\n    }\n}\nclass MySqlDateString extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlDateString';\n    constructor(table, config) {\n        super(table, config);\n    }\n    getSQLType() {\n        return `date`;\n    }\n}\nfunction date(name, config = {}) {\n    if (config.mode === 'string') {\n        return new MySqlDateStringBuilder(name);\n    }\n    return new MySqlDateBuilder(name);\n}\n\nclass MySqlDateTimeBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlDateTimeBuilder';\n    constructor(name, config) {\n        super(name, 'date', 'MySqlDateTime');\n        this.config.fsp = config?.fsp;\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlDateTime(table, this.config);\n    }\n}\nclass MySqlDateTime extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlDateTime';\n    fsp;\n    constructor(table, config) {\n        super(table, config);\n        this.fsp = config.fsp;\n    }\n    getSQLType() {\n        const precision = this.fsp === undefined ? '' : `(${this.fsp})`;\n        return `datetime${precision}`;\n    }\n    mapToDriverValue(value) {\n        return value.toISOString().replace('T', ' ').replace('Z', '');\n    }\n    mapFromDriverValue(value) {\n        return new Date(value.replace(' ', 'T') + 'Z');\n    }\n}\nclass MySqlDateTimeStringBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlDateTimeStringBuilder';\n    constructor(name, config) {\n        super(name, 'string', 'MySqlDateTimeString');\n        this.config.fsp = config?.fsp;\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlDateTimeString(table, this.config);\n    }\n}\nclass MySqlDateTimeString extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlDateTimeString';\n    fsp;\n    constructor(table, config) {\n        super(table, config);\n        this.fsp = config.fsp;\n    }\n    getSQLType() {\n        const precision = this.fsp === undefined ? '' : `(${this.fsp})`;\n        return `datetime${precision}`;\n    }\n}\nfunction datetime(name, config = {}) {\n    if (config.mode === 'string') {\n        return new MySqlDateTimeStringBuilder(name, config);\n    }\n    return new MySqlDateTimeBuilder(name, config);\n}\n\nclass MySqlDecimalBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.d {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlDecimalBuilder';\n    constructor(name, precision, scale) {\n        super(name, 'string', 'MySqlDecimal');\n        this.config.precision = precision;\n        this.config.scale = scale;\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlDecimal(table, this.config);\n    }\n}\nclass MySqlDecimal extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.e {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlDecimal';\n    precision = this.config.precision;\n    scale = this.config.scale;\n    getSQLType() {\n        if (this.precision !== undefined && this.scale !== undefined) {\n            return `decimal(${this.precision},${this.scale})`;\n        }\n        else if (this.precision === undefined) {\n            return 'decimal';\n        }\n        else {\n            return `decimal(${this.precision})`;\n        }\n    }\n}\nfunction decimal(name, config = {}) {\n    return new MySqlDecimalBuilder(name, config.precision, config.scale);\n}\n\nclass MySqlDoubleBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.d {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlDoubleBuilder';\n    constructor(name, config) {\n        super(name, 'number', 'MySqlDouble');\n        this.config.precision = config?.precision;\n        this.config.scale = config?.scale;\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlDouble(table, this.config);\n    }\n}\nclass MySqlDouble extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.e {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlDouble';\n    precision = this.config.precision;\n    scale = this.config.scale;\n    getSQLType() {\n        if (this.precision !== undefined && this.scale !== undefined) {\n            return `double(${this.precision},${this.scale})`;\n        }\n        else if (this.precision === undefined) {\n            return 'double';\n        }\n        else {\n            return `double(${this.precision})`;\n        }\n    }\n}\nfunction double(name, config) {\n    return new MySqlDoubleBuilder(name, config);\n}\n\nclass MySqlEnumColumnBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlEnumColumnBuilder';\n    constructor(name, values) {\n        super(name, 'string', 'MySqlEnumColumn');\n        this.config.enumValues = values;\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlEnumColumn(table, this.config);\n    }\n}\nclass MySqlEnumColumn extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlEnumColumn';\n    enumValues = this.config.enumValues;\n    getSQLType() {\n        return `enum(${this.enumValues.map((value) => `'${value}'`).join(',')})`;\n    }\n}\nfunction mysqlEnum(name, values) {\n    if (values.length === 0) {\n        throw new Error(`You have an empty array for \"${name}\" enum values`);\n    }\n    return new MySqlEnumColumnBuilder(name, values);\n}\n\nclass MySqlFloatBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.d {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlFloatBuilder';\n    constructor(name) {\n        super(name, 'number', 'MySqlFloat');\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlFloat(table, this.config);\n    }\n}\nclass MySqlFloat extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.e {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlFloat';\n    getSQLType() {\n        return 'float';\n    }\n}\nfunction float(name) {\n    return new MySqlFloatBuilder(name);\n}\n\nclass MySqlIntBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.d {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlIntBuilder';\n    constructor(name) {\n        super(name, 'number', 'MySqlInt');\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlInt(table, this.config);\n    }\n}\nclass MySqlInt extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.e {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlInt';\n    getSQLType() {\n        return 'int';\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === 'string') {\n            return Number(value);\n        }\n        return value;\n    }\n}\nfunction int(name) {\n    return new MySqlIntBuilder(name);\n}\n\nclass MySqlJsonBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlJsonBuilder';\n    constructor(name) {\n        super(name, 'json', 'MySqlJson');\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlJson(table, this.config);\n    }\n}\nclass MySqlJson extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlJson';\n    getSQLType() {\n        return 'json';\n    }\n    mapToDriverValue(value) {\n        return JSON.stringify(value);\n    }\n}\nfunction json(name) {\n    return new MySqlJsonBuilder(name);\n}\n\nclass MySqlMediumIntBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.d {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlMediumIntBuilder';\n    constructor(name) {\n        super(name, 'number', 'MySqlMediumInt');\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlMediumInt(table, this.config);\n    }\n}\nclass MySqlMediumInt extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.e {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlMediumInt';\n    getSQLType() {\n        return 'mediumint';\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === 'string') {\n            return Number(value);\n        }\n        return value;\n    }\n}\nfunction mediumint(name) {\n    return new MySqlMediumIntBuilder(name);\n}\n\nclass MySqlRealBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.d {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlRealBuilder';\n    constructor(name, config) {\n        super(name, 'number', 'MySqlReal');\n        this.config.precision = config?.precision;\n        this.config.scale = config?.scale;\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlReal(table, this.config);\n    }\n}\nclass MySqlReal extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.e {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlReal';\n    precision = this.config.precision;\n    scale = this.config.scale;\n    getSQLType() {\n        if (this.precision !== undefined && this.scale !== undefined) {\n            return `real(${this.precision}, ${this.scale})`;\n        }\n        else if (this.precision === undefined) {\n            return 'real';\n        }\n        else {\n            return `real(${this.precision})`;\n        }\n    }\n}\nfunction real(name, config = {}) {\n    return new MySqlRealBuilder(name, config);\n}\n\nclass MySqlSerialBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.d {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlSerialBuilder';\n    constructor(name) {\n        super(name, 'number', 'MySqlSerial');\n        this.config.hasDefault = true;\n        this.config.autoIncrement = true;\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlSerial(table, this.config);\n    }\n}\nclass MySqlSerial extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.e {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlSerial';\n    getSQLType() {\n        return 'serial';\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === 'string') {\n            return Number(value);\n        }\n        return value;\n    }\n}\nfunction serial(name) {\n    return new MySqlSerialBuilder(name);\n}\n\nclass MySqlSmallIntBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.d {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlSmallIntBuilder';\n    constructor(name) {\n        super(name, 'number', 'MySqlSmallInt');\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlSmallInt(table, this.config);\n    }\n}\nclass MySqlSmallInt extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.e {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlSmallInt';\n    getSQLType() {\n        return 'smallint';\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === 'string') {\n            return Number(value);\n        }\n        return value;\n    }\n}\nfunction smallint(name) {\n    return new MySqlSmallIntBuilder(name);\n}\n\nclass MySqlTextBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlTextBuilder';\n    constructor(name, textType, config) {\n        super(name, 'string', 'MySqlText');\n        this.config.textType = textType;\n        this.config.enumValues = config.enum;\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlText(table, this.config);\n    }\n}\nclass MySqlText extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlText';\n    textType = this.config.textType;\n    enumValues = this.config.enumValues;\n    getSQLType() {\n        return this.textType;\n    }\n}\nfunction text(name, config = {}) {\n    return new MySqlTextBuilder(name, 'text', config);\n}\nfunction tinytext(name, config = {}) {\n    return new MySqlTextBuilder(name, 'tinytext', config);\n}\nfunction mediumtext(name, config = {}) {\n    return new MySqlTextBuilder(name, 'mediumtext', config);\n}\nfunction longtext(name, config = {}) {\n    return new MySqlTextBuilder(name, 'longtext', config);\n}\n\nclass MySqlTimeBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlTimeBuilder';\n    constructor(name, config) {\n        super(name, 'string', 'MySqlTime');\n        this.config.fsp = config?.fsp;\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlTime(table, this.config);\n    }\n}\nclass MySqlTime extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlTime';\n    fsp = this.config.fsp;\n    getSQLType() {\n        const precision = this.fsp === undefined ? '' : `(${this.fsp})`;\n        return `time${precision}`;\n    }\n}\nfunction time(name, config) {\n    return new MySqlTimeBuilder(name, config);\n}\n\nclass MySqlDateColumnBaseBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlDateColumnBuilder';\n    defaultNow() {\n        return this.default((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.s) `(now())`);\n    }\n    // \"on update now\" also adds an implicit default value to the column - https://dev.mysql.com/doc/refman/8.0/en/timestamp-initialization.html\n    onUpdateNow() {\n        this.config.hasOnUpdateNow = true;\n        this.config.hasDefault = true;\n        return this;\n    }\n}\nclass MySqlDateBaseColumn extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlDateColumn';\n    hasOnUpdateNow = this.config.hasOnUpdateNow;\n}\n\nclass MySqlTimestampBuilder extends MySqlDateColumnBaseBuilder {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlTimestampBuilder';\n    constructor(name, config) {\n        super(name, 'date', 'MySqlTimestamp');\n        this.config.fsp = config?.fsp;\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlTimestamp(table, this.config);\n    }\n}\nclass MySqlTimestamp extends MySqlDateBaseColumn {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlTimestamp';\n    fsp = this.config.fsp;\n    getSQLType() {\n        const precision = this.fsp === undefined ? '' : `(${this.fsp})`;\n        return `timestamp${precision}`;\n    }\n    mapFromDriverValue(value) {\n        return new Date(value + '+0000');\n    }\n    mapToDriverValue(value) {\n        return value.toISOString().slice(0, -1).replace('T', ' ');\n    }\n}\nclass MySqlTimestampStringBuilder extends MySqlDateColumnBaseBuilder {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlTimestampStringBuilder';\n    constructor(name, config) {\n        super(name, 'string', 'MySqlTimestampString');\n        this.config.fsp = config?.fsp;\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlTimestampString(table, this.config);\n    }\n}\nclass MySqlTimestampString extends MySqlDateBaseColumn {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlTimestampString';\n    fsp = this.config.fsp;\n    getSQLType() {\n        const precision = this.fsp === undefined ? '' : `(${this.fsp})`;\n        return `timestamp${precision}`;\n    }\n}\nfunction timestamp(name, config = {}) {\n    if (config.mode === 'string') {\n        return new MySqlTimestampStringBuilder(name, config);\n    }\n    return new MySqlTimestampBuilder(name, config);\n}\n\nclass MySqlTinyIntBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.d {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlTinyIntBuilder';\n    constructor(name) {\n        super(name, 'number', 'MySqlTinyInt');\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlTinyInt(table, this.config);\n    }\n}\nclass MySqlTinyInt extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.e {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlTinyInt';\n    getSQLType() {\n        return 'tinyint';\n    }\n    mapFromDriverValue(value) {\n        if (typeof value === 'string') {\n            return Number(value);\n        }\n        return value;\n    }\n}\nfunction tinyint(name) {\n    return new MySqlTinyIntBuilder(name);\n}\n\nclass MySqlVarBinaryBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlVarBinaryBuilder';\n    /** @internal */\n    constructor(name, config) {\n        super(name, 'string', 'MySqlVarBinary');\n        this.config.length = config?.length;\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlVarBinary(table, this.config);\n    }\n}\nclass MySqlVarBinary extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlVarBinary';\n    length = this.config.length;\n    getSQLType() {\n        return this.length === undefined ? `varbinary` : `varbinary(${this.length})`;\n    }\n}\nfunction varbinary(name, options) {\n    return new MySqlVarBinaryBuilder(name, options);\n}\n\nclass MySqlVarCharBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlVarCharBuilder';\n    /** @internal */\n    constructor(name, config) {\n        super(name, 'string', 'MySqlVarChar');\n        this.config.length = config.length;\n        this.config.enum = config.enum;\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlVarChar(table, this.config);\n    }\n}\nclass MySqlVarChar extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlVarChar';\n    length = this.config.length;\n    enumValues = this.config.enum;\n    getSQLType() {\n        return this.length === undefined ? `varchar` : `varchar(${this.length})`;\n    }\n}\nfunction varchar(name, config) {\n    return new MySqlVarCharBuilder(name, config);\n}\n\nclass MySqlYearBuilder extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.f {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlYearBuilder';\n    constructor(name) {\n        super(name, 'number', 'MySqlYear');\n    }\n    /** @internal */\n    build(table) {\n        return new MySqlYear(table, this.config);\n    }\n}\nclass MySqlYear extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.g {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlYear';\n    getSQLType() {\n        return `year`;\n    }\n}\nfunction year(name) {\n    return new MySqlYearBuilder(name);\n}\n\nfunction alias(table, alias) {\n    return new Proxy(table, new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.n(alias, false));\n}\n\nclass CheckBuilder {\n    name;\n    value;\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlCheckBuilder';\n    brand;\n    constructor(name, value) {\n        this.name = name;\n        this.value = value;\n    }\n    /** @internal */\n    build(table) {\n        return new Check(table, this);\n    }\n}\nclass Check {\n    table;\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlCheck';\n    name;\n    value;\n    constructor(table, builder) {\n        this.table = table;\n        this.name = builder.name;\n        this.value = builder.value;\n    }\n}\nfunction check(name, value) {\n    return new CheckBuilder(name, value);\n}\n\nclass IndexBuilderOn {\n    name;\n    unique;\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlIndexBuilderOn';\n    constructor(name, unique) {\n        this.name = name;\n        this.unique = unique;\n    }\n    on(...columns) {\n        return new IndexBuilder(this.name, columns, this.unique);\n    }\n}\nclass IndexBuilder {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlIndexBuilder';\n    /** @internal */\n    config;\n    constructor(name, columns, unique) {\n        this.config = {\n            name,\n            columns,\n            unique,\n        };\n    }\n    using(using) {\n        this.config.using = using;\n        return this;\n    }\n    algorythm(algorythm) {\n        this.config.algorythm = algorythm;\n        return this;\n    }\n    lock(lock) {\n        this.config.lock = lock;\n        return this;\n    }\n    /** @internal */\n    build(table) {\n        return new Index(this.config, table);\n    }\n}\nclass Index {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlIndex';\n    config;\n    constructor(config, table) {\n        this.config = { ...config, table };\n    }\n}\nfunction index(name) {\n    return new IndexBuilderOn(name, false);\n}\nfunction uniqueIndex(name) {\n    return new IndexBuilderOn(name, true);\n}\n\nfunction primaryKey(...columns) {\n    return new PrimaryKeyBuilder(columns);\n}\nclass PrimaryKeyBuilder {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlPrimaryKeyBuilder';\n    /** @internal */\n    columns;\n    constructor(columns) {\n        this.columns = columns;\n    }\n    /** @internal */\n    build(table) {\n        return new PrimaryKey(table, this.columns);\n    }\n}\nclass PrimaryKey {\n    table;\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlPrimaryKey';\n    columns;\n    constructor(table, columns) {\n        this.table = table;\n        this.columns = columns;\n    }\n    getName() {\n        return `${this.table[_view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.h.Symbol.Name]}_${this.columns.map((column) => column.name).join('_')}_pk`;\n    }\n}\n\nclass MySqlSchema {\n    schemaName;\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.e] = 'MySqlSchema';\n    constructor(schemaName) {\n        this.schemaName = schemaName;\n    }\n    table = (name, columns, extraConfig) => {\n        return (0,_view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.m)(name, columns, extraConfig, this.schemaName);\n    };\n    view = ((name, columns) => {\n        return (0,_view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(name, columns, this.schemaName);\n    });\n}\n/** @deprecated - use `instanceof MySqlSchema` */\nfunction isMySqlSchema(obj) {\n    return (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(obj, MySqlSchema);\n}\n/**\n * Create a MySQL schema.\n * https://dev.mysql.com/doc/refman/8.0/en/create-database.html\n *\n * @param name mysql use schema name\n * @returns MySQL schema\n */\nfunction mysqlDatabase(name) {\n    return new MySqlSchema(name);\n}\n/**\n * @see mysqlDatabase\n */\nconst mysqlSchema = mysqlDatabase;\n\nfunction getTableConfig(table) {\n    const columns = Object.values(table[_view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.h.Symbol.Columns]);\n    const indexes = [];\n    const checks = [];\n    const primaryKeys = [];\n    const uniqueConstraints = [];\n    const foreignKeys = Object.values(table[_view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.h.Symbol.InlineForeignKeys]);\n    const name = table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.T.Symbol.Name];\n    const schema = table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.T.Symbol.Schema];\n    const baseName = table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.T.Symbol.BaseName];\n    const extraConfigBuilder = table[_view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.h.Symbol.ExtraConfigBuilder];\n    if (extraConfigBuilder !== undefined) {\n        const extraConfig = extraConfigBuilder(table[_view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.h.Symbol.Columns]);\n        for (const builder of Object.values(extraConfig)) {\n            if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(builder, IndexBuilder)) {\n                indexes.push(builder.build(table));\n            }\n            else if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(builder, CheckBuilder)) {\n                checks.push(builder.build(table));\n            }\n            else if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(builder, _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.U)) {\n                uniqueConstraints.push(builder.build(table));\n            }\n            else if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(builder, PrimaryKeyBuilder)) {\n                primaryKeys.push(builder.build(table));\n            }\n            else if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(builder, _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.F)) {\n                foreignKeys.push(builder.build(table));\n            }\n        }\n    }\n    return {\n        columns,\n        indexes,\n        foreignKeys,\n        checks,\n        primaryKeys,\n        uniqueConstraints,\n        name,\n        schema,\n        baseName,\n    };\n}\nfunction getViewConfig(view) {\n    return {\n        ...view[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_1__.V],\n        ...view[_view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_0__.j],\n    };\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/drizzle-orm/mysql-core/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/drizzle-orm/mysql2/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/drizzle-orm/mysql2/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MySql2Driver: () => (/* binding */ MySql2Driver),\n/* harmony export */   MySql2PreparedQuery: () => (/* binding */ MySql2PreparedQuery),\n/* harmony export */   MySql2Session: () => (/* binding */ MySql2Session),\n/* harmony export */   MySql2Transaction: () => (/* binding */ MySql2Transaction),\n/* harmony export */   MySqlDatabase: () => (/* reexport safe */ _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_3__.b),\n/* harmony export */   drizzle: () => (/* binding */ drizzle)\n/* harmony export */ });\n/* harmony import */ var mysql2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mysql2 */ \"(rsc)/./node_modules/mysql2/index.js\");\n/* harmony import */ var _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../alias-cf8e03cd.mjs */ \"(rsc)/./node_modules/drizzle-orm/alias-cf8e03cd.mjs\");\n/* harmony import */ var _index_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../index.mjs */ \"(rsc)/./node_modules/drizzle-orm/index.mjs\");\n/* harmony import */ var _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../view-23898f21.mjs */ \"(rsc)/./node_modules/drizzle-orm/view-23898f21.mjs\");\n/* harmony import */ var mysql2_promise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mysql2/promise */ \"(rsc)/./node_modules/mysql2/promise.js\");\n/* harmony import */ var node_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:events */ \"node:events\");\n\n\n\n\n\n\n\nclass MySql2PreparedQuery extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_3__.P {\n    client;\n    params;\n    logger;\n    fields;\n    customResultMapper;\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_4__.e] = 'MySql2PreparedQuery';\n    rawQuery;\n    query;\n    constructor(client, queryString, params, logger, fields, customResultMapper) {\n        super();\n        this.client = client;\n        this.params = params;\n        this.logger = logger;\n        this.fields = fields;\n        this.customResultMapper = customResultMapper;\n        this.rawQuery = {\n            sql: queryString,\n            // rowsAsArray: true,\n            typeCast: function (field, next) {\n                if (field.type === 'TIMESTAMP' || field.type === 'DATETIME' || field.type === 'DATE') {\n                    return field.string();\n                }\n                return next();\n            },\n        };\n        this.query = {\n            sql: queryString,\n            rowsAsArray: true,\n            typeCast: function (field, next) {\n                if (field.type === 'TIMESTAMP' || field.type === 'DATETIME' || field.type === 'DATE') {\n                    return field.string();\n                }\n                return next();\n            },\n        };\n    }\n    async execute(placeholderValues = {}) {\n        const params = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_4__.f)(this.params, placeholderValues);\n        this.logger.logQuery(this.rawQuery.sql, params);\n        const { fields, client, rawQuery, query, joinsNotNullableMap, customResultMapper } = this;\n        if (!fields && !customResultMapper) {\n            return client.query(rawQuery, params);\n        }\n        const result = await client.query(query, params);\n        const rows = result[0];\n        if (customResultMapper) {\n            return customResultMapper(rows);\n        }\n        return rows.map((row) => (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_4__.m)(fields, row, joinsNotNullableMap));\n    }\n    async *iterator(placeholderValues = {}) {\n        const params = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_4__.f)(this.params, placeholderValues);\n        const conn = (isPool(this.client) ? await this.client.getConnection() : this.client).connection;\n        const { fields, query, rawQuery, joinsNotNullableMap, client, customResultMapper } = this;\n        const hasRowsMapper = Boolean(fields || customResultMapper);\n        const driverQuery = hasRowsMapper ? conn.query(query, params) : conn.query(rawQuery, params);\n        const stream = driverQuery.stream();\n        function dataListener() {\n            stream.pause();\n        }\n        stream.on('data', dataListener);\n        try {\n            const onEnd = (0,node_events__WEBPACK_IMPORTED_MODULE_2__.once)(stream, 'end');\n            const onError = (0,node_events__WEBPACK_IMPORTED_MODULE_2__.once)(stream, 'error');\n            while (true) {\n                stream.resume();\n                const row = await Promise.race([onEnd, onError, new Promise((resolve) => stream.once('data', resolve))]);\n                if (row === undefined || (Array.isArray(row) && row.length === 0)) {\n                    break;\n                }\n                else if (row instanceof Error) { // eslint-disable-line no-instanceof/no-instanceof\n                    throw row;\n                }\n                else {\n                    if (hasRowsMapper) {\n                        if (customResultMapper) {\n                            const mappedRow = customResultMapper([row]);\n                            yield (Array.isArray(mappedRow) ? mappedRow[0] : mappedRow);\n                        }\n                        else {\n                            yield (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_4__.m)(fields, row, joinsNotNullableMap);\n                        }\n                    }\n                    else {\n                        yield row;\n                    }\n                }\n            }\n        }\n        finally {\n            stream.off('data', dataListener);\n            if (isPool(client)) {\n                conn.end();\n            }\n        }\n    }\n}\nclass MySql2Session extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_3__.M {\n    client;\n    schema;\n    options;\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_4__.e] = 'MySql2Session';\n    logger;\n    mode;\n    constructor(client, dialect, schema, options) {\n        super(dialect);\n        this.client = client;\n        this.schema = schema;\n        this.options = options;\n        this.logger = options.logger ?? new _index_mjs__WEBPACK_IMPORTED_MODULE_5__.NoopLogger();\n        this.mode = options.mode;\n    }\n    prepareQuery(query, fields, customResultMapper) {\n        return new MySql2PreparedQuery(this.client, query.sql, query.params, this.logger, fields, customResultMapper);\n    }\n    /**\n     * @internal\n     * What is its purpose?\n     */\n    async query(query, params) {\n        this.logger.logQuery(query, params);\n        const result = await this.client.query({\n            sql: query,\n            values: params,\n            rowsAsArray: true,\n            typeCast: function (field, next) {\n                if (field.type === 'TIMESTAMP' || field.type === 'DATETIME' || field.type === 'DATE') {\n                    return field.string();\n                }\n                return next();\n            },\n        });\n        return result;\n    }\n    all(query) {\n        const querySql = this.dialect.sqlToQuery(query);\n        this.logger.logQuery(querySql.sql, querySql.params);\n        return this.client.execute(querySql.sql, querySql.params).then((result) => result[0]);\n    }\n    async transaction(transaction, config) {\n        const session = isPool(this.client)\n            ? new MySql2Session(await this.client.getConnection(), this.dialect, this.schema, this.options)\n            : this;\n        const tx = new MySql2Transaction(this.dialect, session, this.schema, 0, this.mode);\n        if (config) {\n            const setTransactionConfigSql = this.getSetTransactionSQL(config);\n            if (setTransactionConfigSql) {\n                await tx.execute(setTransactionConfigSql);\n            }\n            const startTransactionSql = this.getStartTransactionSQL(config);\n            await (startTransactionSql ? tx.execute(startTransactionSql) : tx.execute((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_4__.s) `begin`));\n        }\n        else {\n            await tx.execute((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_4__.s) `begin`);\n        }\n        try {\n            const result = await transaction(tx);\n            await tx.execute((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_4__.s) `commit`);\n            return result;\n        }\n        catch (err) {\n            await tx.execute((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_4__.s) `rollback`);\n            throw err;\n        }\n        finally {\n            if (isPool(this.client)) {\n                session.client.release();\n            }\n        }\n    }\n}\nclass MySql2Transaction extends _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_3__.a {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_4__.e] = 'MySql2Transaction';\n    async transaction(transaction) {\n        const savepointName = `sp${this.nestedIndex + 1}`;\n        const tx = new MySql2Transaction(this.dialect, this.session, this.schema, this.nestedIndex + 1, this.mode);\n        await tx.execute(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_4__.s.raw(`savepoint ${savepointName}`));\n        try {\n            const result = await transaction(tx);\n            await tx.execute(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_4__.s.raw(`release savepoint ${savepointName}`));\n            return result;\n        }\n        catch (err) {\n            await tx.execute(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_4__.s.raw(`rollback to savepoint ${savepointName}`));\n            throw err;\n        }\n    }\n}\nfunction isPool(client) {\n    return 'getConnection' in client;\n}\n\nclass MySql2Driver {\n    client;\n    dialect;\n    options;\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_4__.e] = 'MySql2Driver';\n    constructor(client, dialect, options = {}) {\n        this.client = client;\n        this.dialect = dialect;\n        this.options = options;\n    }\n    createSession(schema, mode) {\n        return new MySql2Session(this.client, this.dialect, schema, { logger: this.options.logger, mode });\n    }\n}\nfunction drizzle(client, config = {}) {\n    const dialect = new _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_3__.c();\n    let logger;\n    if (config.logger === true) {\n        logger = new _index_mjs__WEBPACK_IMPORTED_MODULE_5__.DefaultLogger();\n    }\n    else if (config.logger !== false) {\n        logger = config.logger;\n    }\n    if (isCallbackClient(client)) {\n        client = client.promise();\n    }\n    let schema;\n    if (config.schema) {\n        if (config.mode === undefined) {\n            throw new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_4__.D('You need to specify \"mode\": \"planetscale\" or \"default\" when providing a schema. Read more: https://orm.drizzle.team/docs/rqb#modes');\n        }\n        const tablesConfig = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_4__.a)(config.schema, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_4__.c);\n        schema = {\n            fullSchema: config.schema,\n            schema: tablesConfig.tables,\n            tableNamesMap: tablesConfig.tableNamesMap,\n        };\n    }\n    const mode = config.mode ?? 'default';\n    const driver = new MySql2Driver(client, dialect, { logger });\n    const session = driver.createSession(schema, mode);\n    return new _view_23898f21_mjs__WEBPACK_IMPORTED_MODULE_3__.b(dialect, session, schema, mode);\n}\nfunction isCallbackClient(client) {\n    return typeof client.promise === 'function';\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/drizzle-orm/mysql2/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/drizzle-orm/view-23898f21.mjs":
/*!****************************************************!*\
  !*** ./node_modules/drizzle-orm/view-23898f21.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ UniqueConstraint),\n/* harmony export */   B: () => (/* binding */ ViewBuilder),\n/* harmony export */   C: () => (/* binding */ ManualViewBuilder),\n/* harmony export */   D: () => (/* binding */ MySqlViewBase),\n/* harmony export */   E: () => (/* binding */ MySqlView),\n/* harmony export */   F: () => (/* binding */ ForeignKeyBuilder),\n/* harmony export */   G: () => (/* binding */ mysqlView),\n/* harmony export */   I: () => (/* binding */ InlineForeignKeys),\n/* harmony export */   M: () => (/* binding */ MySqlSession),\n/* harmony export */   P: () => (/* binding */ PreparedQuery),\n/* harmony export */   Q: () => (/* binding */ QueryBuilder),\n/* harmony export */   U: () => (/* binding */ UniqueConstraintBuilder),\n/* harmony export */   V: () => (/* binding */ ViewBuilderCore),\n/* harmony export */   a: () => (/* binding */ MySqlTransaction),\n/* harmony export */   b: () => (/* binding */ MySqlDatabase),\n/* harmony export */   c: () => (/* binding */ MySqlDialect),\n/* harmony export */   d: () => (/* binding */ MySqlColumnBuilderWithAutoIncrement),\n/* harmony export */   e: () => (/* binding */ MySqlColumnWithAutoIncrement),\n/* harmony export */   f: () => (/* binding */ MySqlColumnBuilder),\n/* harmony export */   g: () => (/* binding */ MySqlColumn),\n/* harmony export */   h: () => (/* binding */ MySqlTable),\n/* harmony export */   i: () => (/* binding */ mysqlViewWithSchema),\n/* harmony export */   j: () => (/* binding */ MySqlViewConfig),\n/* harmony export */   k: () => (/* binding */ ForeignKey),\n/* harmony export */   l: () => (/* binding */ foreignKey),\n/* harmony export */   m: () => (/* binding */ mysqlTableWithSchema),\n/* harmony export */   n: () => (/* binding */ MySqlDelete),\n/* harmony export */   o: () => (/* binding */ MySqlInsertBuilder),\n/* harmony export */   p: () => (/* binding */ MySqlInsert),\n/* harmony export */   q: () => (/* binding */ MySqlSelectBuilder),\n/* harmony export */   r: () => (/* binding */ MySqlSelectQueryBuilder),\n/* harmony export */   s: () => (/* binding */ MySqlSelect),\n/* harmony export */   t: () => (/* binding */ MySqlUpdateBuilder),\n/* harmony export */   u: () => (/* binding */ MySqlUpdate),\n/* harmony export */   v: () => (/* binding */ mysqlTable),\n/* harmony export */   w: () => (/* binding */ mysqlTableCreator),\n/* harmony export */   x: () => (/* binding */ unique),\n/* harmony export */   y: () => (/* binding */ uniqueKeyName),\n/* harmony export */   z: () => (/* binding */ UniqueOnConstraintBuilder)\n/* harmony export */ });\n/* harmony import */ var _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./alias-cf8e03cd.mjs */ \"(rsc)/./node_modules/drizzle-orm/alias-cf8e03cd.mjs\");\n\n\n/** @internal */\nconst InlineForeignKeys = Symbol.for('drizzle:MySqlInlineForeignKeys');\nclass MySqlTable extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlTable';\n    /** @internal */\n    static Symbol = Object.assign({}, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol, {\n        InlineForeignKeys: InlineForeignKeys,\n    });\n    /** @internal */\n    [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Columns];\n    /** @internal */\n    [InlineForeignKeys] = [];\n    /** @internal */\n    [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.ExtraConfigBuilder] = undefined;\n}\nfunction mysqlTableWithSchema(name, columns, extraConfig, schema, baseName = name) {\n    const rawTable = new MySqlTable(name, schema, baseName);\n    const builtColumns = Object.fromEntries(Object.entries(columns).map(([name, colBuilderBase]) => {\n        const colBuilder = colBuilderBase;\n        const column = colBuilder.build(rawTable);\n        rawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n        return [name, column];\n    }));\n    const table = Object.assign(rawTable, builtColumns);\n    table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Columns] = builtColumns;\n    if (extraConfig) {\n        table[MySqlTable.Symbol.ExtraConfigBuilder] = extraConfig;\n    }\n    return table;\n}\nconst mysqlTable = (name, columns, extraConfig) => {\n    return mysqlTableWithSchema(name, columns, extraConfig, undefined, name);\n};\nfunction mysqlTableCreator(customizeTableName) {\n    return (name, columns, extraConfig) => {\n        return mysqlTableWithSchema(customizeTableName(name), columns, extraConfig, undefined, name);\n    };\n}\n\nclass ForeignKeyBuilder {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlForeignKeyBuilder';\n    /** @internal */\n    reference;\n    /** @internal */\n    _onUpdate;\n    /** @internal */\n    _onDelete;\n    constructor(config, actions) {\n        this.reference = () => {\n            const { columns, foreignColumns } = config();\n            return { columns, foreignTable: foreignColumns[0].table, foreignColumns };\n        };\n        if (actions) {\n            this._onUpdate = actions.onUpdate;\n            this._onDelete = actions.onDelete;\n        }\n    }\n    onUpdate(action) {\n        this._onUpdate = action;\n        return this;\n    }\n    onDelete(action) {\n        this._onDelete = action;\n        return this;\n    }\n    /** @internal */\n    build(table) {\n        return new ForeignKey(table, this);\n    }\n}\nclass ForeignKey {\n    table;\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlForeignKey';\n    reference;\n    onUpdate;\n    onDelete;\n    constructor(table, builder) {\n        this.table = table;\n        this.reference = builder.reference;\n        this.onUpdate = builder._onUpdate;\n        this.onDelete = builder._onDelete;\n    }\n    getName() {\n        const { columns, foreignColumns } = this.reference();\n        const columnNames = columns.map((column) => column.name);\n        const foreignColumnNames = foreignColumns.map((column) => column.name);\n        const chunks = [\n            this.table[MySqlTable.Symbol.Name],\n            ...columnNames,\n            foreignColumns[0].table[MySqlTable.Symbol.Name],\n            ...foreignColumnNames,\n        ];\n        return `${chunks.join('_')}_fk`;\n    }\n}\nfunction foreignKey(config) {\n    function mappedConfig() {\n        const { columns, foreignColumns } = config;\n        return {\n            columns,\n            foreignColumns,\n        };\n    }\n    return new ForeignKeyBuilder(mappedConfig);\n}\n\nfunction unique(name) {\n    return new UniqueOnConstraintBuilder(name);\n}\nfunction uniqueKeyName(table, columns) {\n    return `${table[MySqlTable.Symbol.Name]}_${columns.join('_')}_unique`;\n}\nclass UniqueConstraintBuilder {\n    name;\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlUniqueConstraintBuilder';\n    /** @internal */\n    columns;\n    constructor(columns, name) {\n        this.name = name;\n        this.columns = columns;\n    }\n    /** @internal */\n    build(table) {\n        return new UniqueConstraint(table, this.columns, this.name);\n    }\n}\nclass UniqueOnConstraintBuilder {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlUniqueOnConstraintBuilder';\n    /** @internal */\n    name;\n    constructor(name) {\n        this.name = name;\n    }\n    on(...columns) {\n        return new UniqueConstraintBuilder(columns, this.name);\n    }\n}\nclass UniqueConstraint {\n    table;\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlUniqueConstraint';\n    columns;\n    name;\n    nullsNotDistinct = false;\n    constructor(table, columns, name) {\n        this.table = table;\n        this.columns = columns;\n        this.name = name ?? uniqueKeyName(this.table, this.columns.map((column) => column.name));\n    }\n    getName() {\n        return this.name;\n    }\n}\n\nclass MySqlColumnBuilder extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.C {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlColumnBuilder';\n    foreignKeyConfigs = [];\n    references(ref, actions = {}) {\n        this.foreignKeyConfigs.push({ ref, actions });\n        return this;\n    }\n    unique(name) {\n        this.config.isUnique = true;\n        this.config.uniqueName = name;\n        return this;\n    }\n    /** @internal */\n    buildForeignKeys(column, table) {\n        return this.foreignKeyConfigs.map(({ ref, actions }) => {\n            return ((ref, actions) => {\n                const builder = new ForeignKeyBuilder(() => {\n                    const foreignColumn = ref();\n                    return { columns: [column], foreignColumns: [foreignColumn] };\n                });\n                if (actions.onUpdate) {\n                    builder.onUpdate(actions.onUpdate);\n                }\n                if (actions.onDelete) {\n                    builder.onDelete(actions.onDelete);\n                }\n                return builder.build(table);\n            })(ref, actions);\n        });\n    }\n}\n// To understand how to use `MySqlColumn` and `AnyMySqlColumn`, see `Column` and `AnyColumn` documentation.\nclass MySqlColumn extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.p {\n    table;\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlColumn';\n    constructor(table, config) {\n        if (!config.uniqueName) {\n            config.uniqueName = uniqueKeyName(table, [config.name]);\n        }\n        super(table, config);\n        this.table = table;\n    }\n}\nclass MySqlColumnBuilderWithAutoIncrement extends MySqlColumnBuilder {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlColumnBuilderWithAutoIncrement';\n    constructor(name, dataType, columnType) {\n        super(name, dataType, columnType);\n        this.config.autoIncrement = false;\n    }\n    autoincrement() {\n        this.config.autoIncrement = true;\n        this.config.hasDefault = true;\n        return this;\n    }\n}\nclass MySqlColumnWithAutoIncrement extends MySqlColumn {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlColumnWithAutoIncrement';\n    autoIncrement = this.config.autoIncrement;\n}\n\nclass MySqlDelete extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.Q {\n    table;\n    session;\n    dialect;\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlDelete';\n    config;\n    constructor(table, session, dialect) {\n        super();\n        this.table = table;\n        this.session = session;\n        this.dialect = dialect;\n        this.config = { table };\n    }\n    where(where) {\n        this.config.where = where;\n        return this;\n    }\n    /** @internal */\n    getSQL() {\n        return this.dialect.buildDeleteQuery(this.config);\n    }\n    toSQL() {\n        const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n        return rest;\n    }\n    prepare() {\n        return this.session.prepareQuery(this.dialect.sqlToQuery(this.getSQL()), this.config.returning);\n    }\n    execute = (placeholderValues) => {\n        return this.prepare().execute(placeholderValues);\n    };\n    createIterator = () => {\n        const self = this;\n        return async function* (placeholderValues) {\n            yield* self.prepare().iterator(placeholderValues);\n        };\n    };\n    iterator = this.createIterator();\n}\n\nclass MySqlInsertBuilder {\n    table;\n    session;\n    dialect;\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlInsertBuilder';\n    shouldIgnore = false;\n    constructor(table, session, dialect) {\n        this.table = table;\n        this.session = session;\n        this.dialect = dialect;\n    }\n    ignore() {\n        this.shouldIgnore = true;\n        return this;\n    }\n    values(values) {\n        values = Array.isArray(values) ? values : [values];\n        if (values.length === 0) {\n            throw new Error('values() must be called with at least one value');\n        }\n        const mappedValues = values.map((entry) => {\n            const result = {};\n            const cols = this.table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Columns];\n            for (const colKey of Object.keys(entry)) {\n                const colValue = entry[colKey];\n                result[colKey] = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(colValue, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S) ? colValue : new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b(colValue, cols[colKey]);\n            }\n            return result;\n        });\n        return new MySqlInsert(this.table, mappedValues, this.shouldIgnore, this.session, this.dialect);\n    }\n}\nclass MySqlInsert extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.Q {\n    session;\n    dialect;\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlInsert';\n    config;\n    constructor(table, values, ignore, session, dialect) {\n        super();\n        this.session = session;\n        this.dialect = dialect;\n        this.config = { table, values, ignore };\n    }\n    onDuplicateKeyUpdate(config) {\n        const setSql = this.dialect.buildUpdateSet(this.config.table, (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.d)(this.config.table, config.set));\n        this.config.onConflict = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `update ${setSql}`;\n        return this;\n    }\n    /** @internal */\n    getSQL() {\n        return this.dialect.buildInsertQuery(this.config);\n    }\n    toSQL() {\n        const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n        return rest;\n    }\n    prepare() {\n        return this.session.prepareQuery(this.dialect.sqlToQuery(this.getSQL()), undefined);\n    }\n    execute = (placeholderValues) => {\n        return this.prepare().execute(placeholderValues);\n    };\n    createIterator = () => {\n        const self = this;\n        return async function* (placeholderValues) {\n            yield* self.prepare().iterator(placeholderValues);\n        };\n    };\n    iterator = this.createIterator();\n}\n\n// TODO find out how to use all/values. Seems like I need those functions\n// Build project\n// copy runtime tests to be sure it's working\n// Add mysql to drizzle-kit\n// Add Planetscale Driver and create example repo\nclass MySqlDialect {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlDialect';\n    async migrate(migrations, session, config) {\n        const migrationsTable = config.migrationsTable ?? '__drizzle_migrations';\n        const migrationTableCreate = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `\n\t\t\tcreate table if not exists ${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(migrationsTable)} (\n\t\t\t\tid serial primary key,\n\t\t\t\thash text not null,\n\t\t\t\tcreated_at bigint\n\t\t\t)\n\t\t`;\n        await session.execute(migrationTableCreate);\n        const dbMigrations = await session.all((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `select id, hash, created_at from ${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(migrationsTable)} order by created_at desc limit 1`);\n        const lastDbMigration = dbMigrations[0];\n        await session.transaction(async (tx) => {\n            for (const migration of migrations) {\n                if (!lastDbMigration\n                    || Number(lastDbMigration.created_at) < migration.folderMillis) {\n                    for (const stmt of migration.sql) {\n                        await tx.execute(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw(stmt));\n                    }\n                    await tx.execute((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `insert into ${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(migrationsTable)} (\\`hash\\`, \\`created_at\\`) values(${migration.hash}, ${migration.folderMillis})`);\n                }\n            }\n        });\n    }\n    escapeName(name) {\n        return `\\`${name}\\``;\n    }\n    escapeParam(_num) {\n        return `?`;\n    }\n    escapeString(str) {\n        return `'${str.replace(/'/g, \"''\")}'`;\n    }\n    buildDeleteQuery({ table, where, returning }) {\n        const returningSql = returning\n            ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) ` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n            : undefined;\n        const whereSql = where ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) ` where ${where}` : undefined;\n        return (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `delete from ${table}${whereSql}${returningSql}`;\n    }\n    buildUpdateSet(table, set) {\n        const setEntries = Object.entries(set);\n        const setSize = setEntries.length;\n        return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(setEntries\n            .flatMap(([colName, value], i) => {\n            const col = table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Columns][colName];\n            const res = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(col.name)} = ${value}`;\n            if (i < setSize - 1) {\n                return [res, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw(', ')];\n            }\n            return [res];\n        }));\n    }\n    buildUpdateQuery({ table, set, where, returning }) {\n        const setSql = this.buildUpdateSet(table, set);\n        const returningSql = returning\n            ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) ` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n            : undefined;\n        const whereSql = where ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) ` where ${where}` : undefined;\n        return (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `update ${table} set ${setSql}${whereSql}${returningSql}`;\n    }\n    /**\n     * Builds selection SQL with provided fields/expressions\n     *\n     * Examples:\n     *\n     * `select <selection> from`\n     *\n     * `insert ... returning <selection>`\n     *\n     * If `isSingleTable` is true, then columns won't be prefixed with table name\n     */\n    buildSelection(fields, { isSingleTable = false } = {}) {\n        const columnsLen = fields.length;\n        const chunks = fields\n            .flatMap(({ field }, i) => {\n            const chunk = [];\n            if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S.Aliased) && field.isSelectionField) {\n                chunk.push(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(field.fieldAlias));\n            }\n            else if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S.Aliased) || (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S)) {\n                const query = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S.Aliased) ? field.sql : field;\n                if (isSingleTable) {\n                    chunk.push(new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S(query.queryChunks.map((c) => {\n                        if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(c, MySqlColumn)) {\n                            return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(c.name);\n                        }\n                        return c;\n                    })));\n                }\n                else {\n                    chunk.push(query);\n                }\n                if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S.Aliased)) {\n                    chunk.push((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) ` as ${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(field.fieldAlias)}`);\n                }\n            }\n            else if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.p)) {\n                if (isSingleTable) {\n                    chunk.push(_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(field.name));\n                }\n                else {\n                    chunk.push(field);\n                }\n            }\n            if (i < columnsLen - 1) {\n                chunk.push((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `, `);\n            }\n            return chunk;\n        });\n        return _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(chunks);\n    }\n    buildSelectQuery({ withList, fields, fieldsFlat, where, having, table, joins, orderBy, groupBy, limit, offset, lockingClause, distinct, }) {\n        const fieldsList = fieldsFlat ?? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(fields);\n        for (const f of fieldsList) {\n            if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(f.field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.p)\n                && (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.q)(f.field.table)\n                    !== ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.r)\n                        ? table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.u].alias\n                        : (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, MySqlViewBase)\n                            ? table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.V].name\n                            : (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S)\n                                ? undefined\n                                : (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.q)(table))\n                && !((table) => joins?.some(({ alias }) => alias === (table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.IsAlias] ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.q)(table) : table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.BaseName])))(f.field.table)) {\n                const tableName = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.q)(f.field.table);\n                throw new Error(`Your \"${f.path.join('->')}\" field references a column \"${tableName}\".\"${f.field.name}\", but the table \"${tableName}\" is not part of the query! Did you forget to join it?`);\n            }\n        }\n        const isSingleTable = !joins || joins.length === 0;\n        let withSql;\n        if (withList?.length) {\n            const withSqlChunks = [(0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `with `];\n            for (const [i, w] of withList.entries()) {\n                withSqlChunks.push((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(w[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.u].alias)} as (${w[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.u].sql})`);\n                if (i < withList.length - 1) {\n                    withSqlChunks.push((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `, `);\n                }\n            }\n            withSqlChunks.push((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) ` `);\n            withSql = _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(withSqlChunks);\n        }\n        const distinctSql = distinct ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) ` distinct` : undefined;\n        const selection = this.buildSelection(fieldsList, { isSingleTable });\n        const tableSql = (() => {\n            if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T) && table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.OriginalName] !== table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Name]) {\n                return (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.OriginalName])} ${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Name])}`;\n            }\n            return table;\n        })();\n        const joinsArray = [];\n        if (joins) {\n            for (const [index, joinMeta] of joins.entries()) {\n                if (index === 0) {\n                    joinsArray.push((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) ` `);\n                }\n                const table = joinMeta.table;\n                const lateralSql = joinMeta.lateral ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) ` lateral` : undefined;\n                if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, MySqlTable)) {\n                    const tableName = table[MySqlTable.Symbol.Name];\n                    const tableSchema = table[MySqlTable.Symbol.Schema];\n                    const origTableName = table[MySqlTable.Symbol.OriginalName];\n                    const alias = tableName === origTableName ? undefined : joinMeta.alias;\n                    joinsArray.push((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw(joinMeta.joinType)} join${lateralSql} ${tableSchema ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(tableSchema)}.` : undefined}${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(origTableName)}${alias && (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) ` ${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(alias)}`} on ${joinMeta.on}`);\n                }\n                else if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.v)) {\n                    const viewName = table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.V].name;\n                    const viewSchema = table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.V].schema;\n                    const origViewName = table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.V].originalName;\n                    const alias = viewName === origViewName ? undefined : joinMeta.alias;\n                    joinsArray.push((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw(joinMeta.joinType)} join${lateralSql} ${viewSchema ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(viewSchema)}.` : undefined}${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(origViewName)}${alias && (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) ` ${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(alias)}`} on ${joinMeta.on}`);\n                }\n                else {\n                    joinsArray.push((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw(joinMeta.joinType)} join${lateralSql} ${table} on ${joinMeta.on}`);\n                }\n                if (index < joins.length - 1) {\n                    joinsArray.push((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) ` `);\n                }\n            }\n        }\n        const joinsSql = _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(joinsArray);\n        const whereSql = where ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) ` where ${where}` : undefined;\n        const havingSql = having ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) ` having ${having}` : undefined;\n        let orderBySql;\n        if (orderBy && orderBy.length > 0) {\n            orderBySql = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) ` order by ${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(orderBy, (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `, `)}`;\n        }\n        let groupBySql;\n        if (groupBy && groupBy.length > 0) {\n            groupBySql = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) ` group by ${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(groupBy, (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `, `)}`;\n        }\n        const limitSql = limit ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) ` limit ${limit}` : undefined;\n        const offsetSql = offset ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) ` offset ${offset}` : undefined;\n        let lockingClausesSql;\n        if (lockingClause) {\n            const { config, strength } = lockingClause;\n            lockingClausesSql = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) ` for ${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw(strength)}`;\n            if (config.noWait) {\n                lockingClausesSql.append((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) ` no wait`);\n            }\n            else if (config.skipLocked) {\n                lockingClausesSql.append((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) ` skip locked`);\n            }\n        }\n        return (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `${withSql}select${distinctSql} ${selection} from ${tableSql}${joinsSql}${whereSql}${groupBySql}${havingSql}${orderBySql}${limitSql}${offsetSql}${lockingClausesSql}`;\n    }\n    buildInsertQuery({ table, values, ignore, onConflict }) {\n        // const isSingleValue = values.length === 1;\n        const valuesSqlList = [];\n        const columns = table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Columns];\n        const colEntries = Object.entries(columns);\n        const insertOrder = colEntries.map(([, column]) => _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(column.name));\n        for (const [valueIndex, value] of values.entries()) {\n            const valueList = [];\n            for (const [fieldName, col] of colEntries) {\n                const colValue = value[fieldName];\n                if (colValue === undefined || ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(colValue, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.b) && colValue.value === undefined)) {\n                    // eslint-disable-next-line unicorn/no-negated-condition\n                    if (col.defaultFn !== undefined) {\n                        const defaultFnResult = col.defaultFn();\n                        const defaultValue = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(defaultFnResult, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S) ? defaultFnResult : _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.param(defaultFnResult, col);\n                        valueList.push(defaultValue);\n                    }\n                    else {\n                        valueList.push((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `default`);\n                    }\n                }\n                else {\n                    valueList.push(colValue);\n                }\n            }\n            valuesSqlList.push(valueList);\n            if (valueIndex < values.length - 1) {\n                valuesSqlList.push((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `, `);\n            }\n        }\n        const valuesSql = _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(valuesSqlList);\n        const ignoreSql = ignore ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) ` ignore` : undefined;\n        const onConflictSql = onConflict ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) ` on duplicate key ${onConflict}` : undefined;\n        return (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `insert${ignoreSql} into ${table} ${insertOrder} values ${valuesSql}${onConflictSql}`;\n    }\n    sqlToQuery(sql) {\n        return sql.toQuery({\n            escapeName: this.escapeName,\n            escapeParam: this.escapeParam,\n            escapeString: this.escapeString,\n        });\n    }\n    buildRelationalQuery({ fullSchema, schema, tableNamesMap, table, tableConfig, queryConfig: config, tableAlias, nestedQueryRelation, joinOn, }) {\n        let selection = [];\n        let limit, offset, orderBy, where;\n        const joins = [];\n        if (config === true) {\n            const selectionEntries = Object.entries(tableConfig.columns);\n            selection = selectionEntries.map(([key, value]) => ({\n                dbKey: value.name,\n                tsKey: key,\n                field: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(value, tableAlias),\n                relationTableTsKey: undefined,\n                isJson: false,\n                selection: [],\n            }));\n        }\n        else {\n            const aliasedColumns = Object.fromEntries(Object.entries(tableConfig.columns).map(([key, value]) => [key, (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(value, tableAlias)]));\n            if (config.where) {\n                const whereSql = typeof config.where === 'function'\n                    ? config.where(aliasedColumns, (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.x)())\n                    : config.where;\n                where = whereSql && (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.y)(whereSql, tableAlias);\n            }\n            const fieldsSelection = [];\n            let selectedColumns = [];\n            // Figure out which columns to select\n            if (config.columns) {\n                let isIncludeMode = false;\n                for (const [field, value] of Object.entries(config.columns)) {\n                    if (value === undefined) {\n                        continue;\n                    }\n                    if (field in tableConfig.columns) {\n                        if (!isIncludeMode && value === true) {\n                            isIncludeMode = true;\n                        }\n                        selectedColumns.push(field);\n                    }\n                }\n                if (selectedColumns.length > 0) {\n                    selectedColumns = isIncludeMode\n                        ? selectedColumns.filter((c) => config.columns?.[c] === true)\n                        : Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));\n                }\n            }\n            else {\n                // Select all columns if selection is not specified\n                selectedColumns = Object.keys(tableConfig.columns);\n            }\n            for (const field of selectedColumns) {\n                const column = tableConfig.columns[field];\n                fieldsSelection.push({ tsKey: field, value: column });\n            }\n            let selectedRelations = [];\n            // Figure out which relations to select\n            if (config.with) {\n                selectedRelations = Object.entries(config.with)\n                    .filter((entry) => !!entry[1])\n                    .map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey] }));\n            }\n            let extras;\n            // Figure out which extras to select\n            if (config.extras) {\n                extras = typeof config.extras === 'function'\n                    ? config.extras(aliasedColumns, { sql: _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s })\n                    : config.extras;\n                for (const [tsKey, value] of Object.entries(extras)) {\n                    fieldsSelection.push({\n                        tsKey,\n                        value: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(value, tableAlias),\n                    });\n                }\n            }\n            // Transform `fieldsSelection` into `selection`\n            // `fieldsSelection` shouldn't be used after this point\n            for (const { tsKey, value } of fieldsSelection) {\n                selection.push({\n                    dbKey: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(value, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey].name,\n                    tsKey,\n                    field: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(value, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.p) ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(value, tableAlias) : value,\n                    relationTableTsKey: undefined,\n                    isJson: false,\n                    selection: [],\n                });\n            }\n            let orderByOrig = typeof config.orderBy === 'function'\n                ? config.orderBy(aliasedColumns, (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.A)())\n                : config.orderBy ?? [];\n            if (!Array.isArray(orderByOrig)) {\n                orderByOrig = [orderByOrig];\n            }\n            orderBy = orderByOrig.map((orderByValue) => {\n                if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(orderByValue, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.p)) {\n                    return (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(orderByValue, tableAlias);\n                }\n                return (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.y)(orderByValue, tableAlias);\n            });\n            limit = config.limit;\n            offset = config.offset;\n            // Process all relations\n            for (const { tsKey: selectedRelationTsKey, queryConfig: selectedRelationConfigValue, relation, } of selectedRelations) {\n                const normalizedRelation = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(schema, tableNamesMap, relation);\n                const relationTableName = relation.referencedTable[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Name];\n                const relationTableTsName = tableNamesMap[relationTableName];\n                const relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n                const joinOn = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(...normalizedRelation.fields.map((field, i) => (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.F)((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(normalizedRelation.references[i], relationTableAlias), (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(field, tableAlias))));\n                const builtRelation = this.buildRelationalQuery({\n                    fullSchema,\n                    schema,\n                    tableNamesMap,\n                    table: fullSchema[relationTableTsName],\n                    tableConfig: schema[relationTableTsName],\n                    queryConfig: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(relation, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.O)\n                        ? (selectedRelationConfigValue === true\n                            ? { limit: 1 }\n                            : { ...selectedRelationConfigValue, limit: 1 })\n                        : selectedRelationConfigValue,\n                    tableAlias: relationTableAlias,\n                    joinOn,\n                    nestedQueryRelation: relation,\n                });\n                const field = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(relationTableAlias)}.${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier('data')}`.as(selectedRelationTsKey);\n                joins.push({\n                    on: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `true`,\n                    table: new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.r(builtRelation.sql, {}, relationTableAlias),\n                    alias: relationTableAlias,\n                    joinType: 'left',\n                    lateral: true,\n                });\n                selection.push({\n                    dbKey: selectedRelationTsKey,\n                    tsKey: selectedRelationTsKey,\n                    field,\n                    relationTableTsKey: relationTableTsName,\n                    isJson: true,\n                    selection: builtRelation.selection,\n                });\n            }\n        }\n        if (selection.length === 0) {\n            throw new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.D(`No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\")`);\n        }\n        let result;\n        where = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(joinOn, where);\n        if (nestedQueryRelation) {\n            let field = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `json_array(${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(selection.map(({ field, tsKey, isJson }) => isJson\n                ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(`${tableAlias}_${tsKey}`)}.${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier('data')}`\n                : (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S.Aliased)\n                    ? field.sql\n                    : field), (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `, `)})`;\n            if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(nestedQueryRelation, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.M)) {\n                field = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `coalesce(json_arrayagg(${field}), json_array())`;\n            }\n            const nestedSelection = [{\n                    dbKey: 'data',\n                    tsKey: 'data',\n                    field: field.as('data'),\n                    isJson: true,\n                    relationTableTsKey: tableConfig.tsName,\n                    selection,\n                }];\n            const needsSubquery = limit !== undefined || offset !== undefined || (orderBy?.length ?? 0) > 0;\n            if (needsSubquery) {\n                result = this.buildSelectQuery({\n                    table: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.G)(table, tableAlias),\n                    fields: {},\n                    fieldsFlat: [\n                        {\n                            path: [],\n                            field: _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw('*'),\n                        },\n                        ...(((orderBy?.length ?? 0) > 0)\n                            ? [{\n                                    path: [],\n                                    field: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `row_number() over (order by ${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(orderBy, (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `, `)})`,\n                                }]\n                            : []),\n                    ],\n                    where,\n                    limit,\n                    offset,\n                });\n                where = undefined;\n                limit = undefined;\n                offset = undefined;\n                orderBy = undefined;\n            }\n            else {\n                result = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.G)(table, tableAlias);\n            }\n            result = this.buildSelectQuery({\n                table: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(result, MySqlTable) ? result : new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.r(result, {}, tableAlias),\n                fields: {},\n                fieldsFlat: nestedSelection.map(({ field }) => ({\n                    path: [],\n                    field: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.p) ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(field, tableAlias) : field,\n                })),\n                joins,\n                where,\n                limit,\n                offset,\n                orderBy,\n            });\n        }\n        else {\n            result = this.buildSelectQuery({\n                table: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.G)(table, tableAlias),\n                fields: {},\n                fieldsFlat: selection.map(({ field }) => ({\n                    path: [],\n                    field: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.p) ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(field, tableAlias) : field,\n                })),\n                joins,\n                where,\n                limit,\n                offset,\n                orderBy,\n            });\n        }\n        return {\n            tableTsKey: tableConfig.tsName,\n            sql: result,\n            selection,\n        };\n    }\n    buildRelationalQueryWithoutLateralSubqueries({ fullSchema, schema, tableNamesMap, table, tableConfig, queryConfig: config, tableAlias, nestedQueryRelation, joinOn, }) {\n        let selection = [];\n        let limit, offset, orderBy = [], where;\n        if (config === true) {\n            const selectionEntries = Object.entries(tableConfig.columns);\n            selection = selectionEntries.map(([key, value]) => ({\n                dbKey: value.name,\n                tsKey: key,\n                field: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(value, tableAlias),\n                relationTableTsKey: undefined,\n                isJson: false,\n                selection: [],\n            }));\n        }\n        else {\n            const aliasedColumns = Object.fromEntries(Object.entries(tableConfig.columns).map(([key, value]) => [key, (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(value, tableAlias)]));\n            if (config.where) {\n                const whereSql = typeof config.where === 'function'\n                    ? config.where(aliasedColumns, (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.x)())\n                    : config.where;\n                where = whereSql && (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.y)(whereSql, tableAlias);\n            }\n            const fieldsSelection = [];\n            let selectedColumns = [];\n            // Figure out which columns to select\n            if (config.columns) {\n                let isIncludeMode = false;\n                for (const [field, value] of Object.entries(config.columns)) {\n                    if (value === undefined) {\n                        continue;\n                    }\n                    if (field in tableConfig.columns) {\n                        if (!isIncludeMode && value === true) {\n                            isIncludeMode = true;\n                        }\n                        selectedColumns.push(field);\n                    }\n                }\n                if (selectedColumns.length > 0) {\n                    selectedColumns = isIncludeMode\n                        ? selectedColumns.filter((c) => config.columns?.[c] === true)\n                        : Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));\n                }\n            }\n            else {\n                // Select all columns if selection is not specified\n                selectedColumns = Object.keys(tableConfig.columns);\n            }\n            for (const field of selectedColumns) {\n                const column = tableConfig.columns[field];\n                fieldsSelection.push({ tsKey: field, value: column });\n            }\n            let selectedRelations = [];\n            // Figure out which relations to select\n            if (config.with) {\n                selectedRelations = Object.entries(config.with)\n                    .filter((entry) => !!entry[1])\n                    .map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey] }));\n            }\n            let extras;\n            // Figure out which extras to select\n            if (config.extras) {\n                extras = typeof config.extras === 'function'\n                    ? config.extras(aliasedColumns, { sql: _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s })\n                    : config.extras;\n                for (const [tsKey, value] of Object.entries(extras)) {\n                    fieldsSelection.push({\n                        tsKey,\n                        value: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(value, tableAlias),\n                    });\n                }\n            }\n            // Transform `fieldsSelection` into `selection`\n            // `fieldsSelection` shouldn't be used after this point\n            for (const { tsKey, value } of fieldsSelection) {\n                selection.push({\n                    dbKey: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(value, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey].name,\n                    tsKey,\n                    field: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(value, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.p) ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(value, tableAlias) : value,\n                    relationTableTsKey: undefined,\n                    isJson: false,\n                    selection: [],\n                });\n            }\n            let orderByOrig = typeof config.orderBy === 'function'\n                ? config.orderBy(aliasedColumns, (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.A)())\n                : config.orderBy ?? [];\n            if (!Array.isArray(orderByOrig)) {\n                orderByOrig = [orderByOrig];\n            }\n            orderBy = orderByOrig.map((orderByValue) => {\n                if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(orderByValue, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.p)) {\n                    return (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(orderByValue, tableAlias);\n                }\n                return (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.y)(orderByValue, tableAlias);\n            });\n            limit = config.limit;\n            offset = config.offset;\n            // Process all relations\n            for (const { tsKey: selectedRelationTsKey, queryConfig: selectedRelationConfigValue, relation, } of selectedRelations) {\n                const normalizedRelation = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(schema, tableNamesMap, relation);\n                const relationTableName = relation.referencedTable[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Name];\n                const relationTableTsName = tableNamesMap[relationTableName];\n                const relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n                const joinOn = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(...normalizedRelation.fields.map((field, i) => (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.F)((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(normalizedRelation.references[i], relationTableAlias), (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(field, tableAlias))));\n                const builtRelation = this.buildRelationalQueryWithoutLateralSubqueries({\n                    fullSchema,\n                    schema,\n                    tableNamesMap,\n                    table: fullSchema[relationTableTsName],\n                    tableConfig: schema[relationTableTsName],\n                    queryConfig: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(relation, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.O)\n                        ? (selectedRelationConfigValue === true\n                            ? { limit: 1 }\n                            : { ...selectedRelationConfigValue, limit: 1 })\n                        : selectedRelationConfigValue,\n                    tableAlias: relationTableAlias,\n                    joinOn,\n                    nestedQueryRelation: relation,\n                });\n                let fieldSql = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `(${builtRelation.sql})`;\n                if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(relation, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.M)) {\n                    fieldSql = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `coalesce(${fieldSql}, json_array())`;\n                }\n                const field = fieldSql.as(selectedRelationTsKey);\n                selection.push({\n                    dbKey: selectedRelationTsKey,\n                    tsKey: selectedRelationTsKey,\n                    field,\n                    relationTableTsKey: relationTableTsName,\n                    isJson: true,\n                    selection: builtRelation.selection,\n                });\n            }\n        }\n        if (selection.length === 0) {\n            throw new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.D(`No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\"). You need to have at least one item in \"columns\", \"with\" or \"extras\". If you need to select all columns, omit the \"columns\" key or set it to undefined.`);\n        }\n        let result;\n        where = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(joinOn, where);\n        if (nestedQueryRelation) {\n            let field = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `json_array(${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(selection.map(({ field }) => (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, MySqlColumn) ? _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.identifier(field.name) : (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S.Aliased) ? field.sql : field), (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `, `)})`;\n            if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(nestedQueryRelation, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.M)) {\n                field = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `json_arrayagg(${field})`;\n            }\n            const nestedSelection = [{\n                    dbKey: 'data',\n                    tsKey: 'data',\n                    field,\n                    isJson: true,\n                    relationTableTsKey: tableConfig.tsName,\n                    selection,\n                }];\n            const needsSubquery = limit !== undefined || offset !== undefined || orderBy.length > 0;\n            if (needsSubquery) {\n                result = this.buildSelectQuery({\n                    table: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.G)(table, tableAlias),\n                    fields: {},\n                    fieldsFlat: [\n                        {\n                            path: [],\n                            field: _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.raw('*'),\n                        },\n                        ...(orderBy.length > 0)\n                            ? [{\n                                    path: [],\n                                    field: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `row_number() over (order by ${_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(orderBy, (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s) `, `)})`,\n                                }]\n                            : [],\n                    ],\n                    where,\n                    limit,\n                    offset,\n                });\n                where = undefined;\n                limit = undefined;\n                offset = undefined;\n                orderBy = undefined;\n            }\n            else {\n                result = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.G)(table, tableAlias);\n            }\n            result = this.buildSelectQuery({\n                table: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(result, MySqlTable) ? result : new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.r(result, {}, tableAlias),\n                fields: {},\n                fieldsFlat: nestedSelection.map(({ field }) => ({\n                    path: [],\n                    field: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.p) ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(field, tableAlias) : field,\n                })),\n                where,\n                limit,\n                offset,\n                orderBy,\n            });\n        }\n        else {\n            result = this.buildSelectQuery({\n                table: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.G)(table, tableAlias),\n                fields: {},\n                fieldsFlat: selection.map(({ field }) => ({\n                    path: [],\n                    field: (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(field, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.p) ? (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(field, tableAlias) : field,\n                })),\n                where,\n                limit,\n                offset,\n                orderBy,\n            });\n        }\n        return {\n            tableTsKey: tableConfig.tsName,\n            sql: result,\n            selection,\n        };\n    }\n}\n\nclass MySqlSelectBuilder {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlSelectBuilder';\n    fields;\n    session;\n    dialect;\n    withList = [];\n    distinct;\n    constructor(config) {\n        this.fields = config.fields;\n        this.session = config.session;\n        this.dialect = config.dialect;\n        if (config.withList) {\n            this.withList = config.withList;\n        }\n        this.distinct = config.distinct;\n    }\n    from(source) {\n        const isPartialSelect = !!this.fields;\n        let fields;\n        if (this.fields) {\n            fields = this.fields;\n        }\n        else if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(source, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.r)) {\n            // This is required to use the proxy handler to get the correct field values from the subquery\n            fields = Object.fromEntries(Object.keys(source[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.u].selection).map((key) => [key, source[key]]));\n        }\n        else if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(source, MySqlViewBase)) {\n            fields = source[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.V].selectedFields;\n        }\n        else if ((0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(source, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S)) {\n            fields = {};\n        }\n        else {\n            fields = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.I)(source);\n        }\n        return new MySqlSelect({\n            table: source,\n            fields,\n            isPartialSelect,\n            session: this.session,\n            dialect: this.dialect,\n            withList: this.withList,\n            distinct: this.distinct,\n        });\n    }\n}\nclass MySqlSelectQueryBuilder extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.J {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlSelectQueryBuilder';\n    _;\n    config;\n    joinsNotNullableMap;\n    tableName;\n    isPartialSelect;\n    /** @internal */\n    session;\n    dialect;\n    constructor({ table, fields, isPartialSelect, session, dialect, withList, distinct }) {\n        super();\n        this.config = {\n            withList,\n            table,\n            fields: { ...fields },\n            distinct,\n        };\n        this.isPartialSelect = isPartialSelect;\n        this.session = session;\n        this.dialect = dialect;\n        this._ = {\n            selectedFields: fields,\n        };\n        this.tableName = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(table);\n        this.joinsNotNullableMap = typeof this.tableName === 'string' ? { [this.tableName]: true } : {};\n    }\n    createJoin(joinType) {\n        return (table, on) => {\n            const baseTableName = this.tableName;\n            const tableName = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(table);\n            if (typeof tableName === 'string' && this.config.joins?.some((join) => join.alias === tableName)) {\n                throw new Error(`Alias \"${tableName}\" is already used in this query`);\n            }\n            if (!this.isPartialSelect) {\n                // If this is the first join and this is not a partial select and we're not selecting from raw SQL, \"move\" the fields from the main table to the nested object\n                if (Object.keys(this.joinsNotNullableMap).length === 1 && typeof baseTableName === 'string') {\n                    this.config.fields = {\n                        [baseTableName]: this.config.fields,\n                    };\n                }\n                if (typeof tableName === 'string' && !(0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.S)) {\n                    const selection = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.r)\n                        ? table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.u].selection\n                        : (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(table, _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.v)\n                            ? table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.V].selectedFields\n                            : table[_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.T.Symbol.Columns];\n                    this.config.fields[tableName] = selection;\n                }\n            }\n            if (typeof on === 'function') {\n                on = on(new Proxy(this.config.fields, new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' })));\n            }\n            if (!this.config.joins) {\n                this.config.joins = [];\n            }\n            this.config.joins.push({ on, table, joinType, alias: tableName });\n            if (typeof tableName === 'string') {\n                switch (joinType) {\n                    case 'left': {\n                        this.joinsNotNullableMap[tableName] = false;\n                        break;\n                    }\n                    case 'right': {\n                        this.joinsNotNullableMap = Object.fromEntries(Object.entries(this.joinsNotNullableMap).map(([key]) => [key, false]));\n                        this.joinsNotNullableMap[tableName] = true;\n                        break;\n                    }\n                    case 'inner': {\n                        this.joinsNotNullableMap[tableName] = true;\n                        break;\n                    }\n                    case 'full': {\n                        this.joinsNotNullableMap = Object.fromEntries(Object.entries(this.joinsNotNullableMap).map(([key]) => [key, false]));\n                        this.joinsNotNullableMap[tableName] = false;\n                        break;\n                    }\n                }\n            }\n            return this;\n        };\n    }\n    leftJoin = this.createJoin('left');\n    rightJoin = this.createJoin('right');\n    innerJoin = this.createJoin('inner');\n    fullJoin = this.createJoin('full');\n    where(where) {\n        if (typeof where === 'function') {\n            where = where(new Proxy(this.config.fields, new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' })));\n        }\n        this.config.where = where;\n        return this;\n    }\n    having(having) {\n        if (typeof having === 'function') {\n            having = having(new Proxy(this.config.fields, new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' })));\n        }\n        this.config.having = having;\n        return this;\n    }\n    groupBy(...columns) {\n        if (typeof columns[0] === 'function') {\n            const groupBy = columns[0](new Proxy(this.config.fields, new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' })));\n            this.config.groupBy = Array.isArray(groupBy) ? groupBy : [groupBy];\n        }\n        else {\n            this.config.groupBy = columns;\n        }\n        return this;\n    }\n    orderBy(...columns) {\n        if (typeof columns[0] === 'function') {\n            const orderBy = columns[0](new Proxy(this.config.fields, new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' })));\n            this.config.orderBy = Array.isArray(orderBy) ? orderBy : [orderBy];\n        }\n        else {\n            this.config.orderBy = columns;\n        }\n        return this;\n    }\n    limit(limit) {\n        this.config.limit = limit;\n        return this;\n    }\n    offset(offset) {\n        this.config.offset = offset;\n        return this;\n    }\n    for(strength, config = {}) {\n        this.config.lockingClause = { strength, config };\n        return this;\n    }\n    /** @internal */\n    getSQL() {\n        return this.dialect.buildSelectQuery(this.config);\n    }\n    toSQL() {\n        const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n        return rest;\n    }\n    as(alias) {\n        return new Proxy(new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.r(this.getSQL(), this.config.fields, alias), new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }));\n    }\n}\nclass MySqlSelect extends MySqlSelectQueryBuilder {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlSelect';\n    prepare() {\n        if (!this.session) {\n            throw new Error('Cannot execute a query on a query builder. Please use a database instance instead.');\n        }\n        const fieldsList = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(this.config.fields);\n        const query = this.session.prepareQuery(this.dialect.sqlToQuery(this.getSQL()), fieldsList);\n        query.joinsNotNullableMap = this.joinsNotNullableMap;\n        return query;\n    }\n    execute = ((placeholderValues) => {\n        return this.prepare().execute(placeholderValues);\n    });\n    createIterator = () => {\n        const self = this;\n        return async function* (placeholderValues) {\n            yield* self.prepare().iterator(placeholderValues);\n        };\n    };\n    iterator = this.createIterator();\n}\n(0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.H)(MySqlSelect, [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.Q]);\n\nclass QueryBuilder {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlQueryBuilder';\n    dialect;\n    $with(alias) {\n        const queryBuilder = this;\n        return {\n            as(qb) {\n                if (typeof qb === 'function') {\n                    qb = qb(queryBuilder);\n                }\n                return new Proxy(new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.W(qb.getSQL(), qb.getSelectedFields(), alias, true), new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }));\n            },\n        };\n    }\n    with(...queries) {\n        const self = this;\n        function select(fields) {\n            return new MySqlSelectBuilder({\n                fields: fields ?? undefined,\n                session: undefined,\n                dialect: self.getDialect(),\n                withList: queries,\n            });\n        }\n        function selectDistinct(fields) {\n            return new MySqlSelectBuilder({\n                fields: fields ?? undefined,\n                session: undefined,\n                dialect: self.getDialect(),\n                withList: queries,\n                distinct: true,\n            });\n        }\n        return { select, selectDistinct };\n    }\n    select(fields) {\n        return new MySqlSelectBuilder({ fields: fields ?? undefined, session: undefined, dialect: this.getDialect() });\n    }\n    selectDistinct(fields) {\n        return new MySqlSelectBuilder({\n            fields: fields ?? undefined,\n            session: undefined,\n            dialect: this.getDialect(),\n            distinct: true,\n        });\n    }\n    // Lazy load dialect to avoid circular dependency\n    getDialect() {\n        if (!this.dialect) {\n            this.dialect = new MySqlDialect();\n        }\n        return this.dialect;\n    }\n}\n\nclass RelationalQueryBuilder {\n    fullSchema;\n    schema;\n    tableNamesMap;\n    table;\n    tableConfig;\n    dialect;\n    session;\n    mode;\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlRelationalQueryBuilder';\n    constructor(fullSchema, schema, tableNamesMap, table, tableConfig, dialect, session, mode) {\n        this.fullSchema = fullSchema;\n        this.schema = schema;\n        this.tableNamesMap = tableNamesMap;\n        this.table = table;\n        this.tableConfig = tableConfig;\n        this.dialect = dialect;\n        this.session = session;\n        this.mode = mode;\n    }\n    findMany(config) {\n        return new MySqlRelationalQuery(this.fullSchema, this.schema, this.tableNamesMap, this.table, this.tableConfig, this.dialect, this.session, config ? config : {}, 'many', this.mode);\n    }\n    findFirst(config) {\n        return new MySqlRelationalQuery(this.fullSchema, this.schema, this.tableNamesMap, this.table, this.tableConfig, this.dialect, this.session, config ? { ...config, limit: 1 } : { limit: 1 }, 'first', this.mode);\n    }\n}\nclass MySqlRelationalQuery extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.Q {\n    fullSchema;\n    schema;\n    tableNamesMap;\n    table;\n    tableConfig;\n    dialect;\n    session;\n    config;\n    queryMode;\n    mode;\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlRelationalQuery';\n    constructor(fullSchema, schema, tableNamesMap, table, tableConfig, dialect, session, config, queryMode, mode) {\n        super();\n        this.fullSchema = fullSchema;\n        this.schema = schema;\n        this.tableNamesMap = tableNamesMap;\n        this.table = table;\n        this.tableConfig = tableConfig;\n        this.dialect = dialect;\n        this.session = session;\n        this.config = config;\n        this.queryMode = queryMode;\n        this.mode = mode;\n    }\n    prepare() {\n        const { query, builtQuery } = this._toSQL();\n        return this.session.prepareQuery(builtQuery, undefined, (rawRows) => {\n            const rows = rawRows.map((row) => (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(this.schema, this.tableConfig, row, query.selection));\n            if (this.queryMode === 'first') {\n                return rows[0];\n            }\n            return rows;\n        });\n    }\n    _toSQL() {\n        const query = this.mode === 'planetscale'\n            ? this.dialect.buildRelationalQueryWithoutLateralSubqueries({\n                fullSchema: this.fullSchema,\n                schema: this.schema,\n                tableNamesMap: this.tableNamesMap,\n                table: this.table,\n                tableConfig: this.tableConfig,\n                queryConfig: this.config,\n                tableAlias: this.tableConfig.tsName,\n            })\n            : this.dialect.buildRelationalQuery({\n                fullSchema: this.fullSchema,\n                schema: this.schema,\n                tableNamesMap: this.tableNamesMap,\n                table: this.table,\n                tableConfig: this.tableConfig,\n                queryConfig: this.config,\n                tableAlias: this.tableConfig.tsName,\n            });\n        const builtQuery = this.dialect.sqlToQuery(query.sql);\n        return { builtQuery, query };\n    }\n    toSQL() {\n        return this._toSQL().builtQuery;\n    }\n    execute() {\n        return this.prepare().execute();\n    }\n}\n\nclass MySqlDatabase {\n    dialect;\n    session;\n    mode;\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlDatabase';\n    query;\n    constructor(\n    /** @internal */\n    dialect, \n    /** @internal */\n    session, schema, mode) {\n        this.dialect = dialect;\n        this.session = session;\n        this.mode = mode;\n        this._ = schema\n            ? { schema: schema.schema, tableNamesMap: schema.tableNamesMap }\n            : { schema: undefined, tableNamesMap: {} };\n        this.query = {};\n        if (this._.schema) {\n            for (const [tableName, columns] of Object.entries(this._.schema)) {\n                this.query[tableName] =\n                    new RelationalQueryBuilder(schema.fullSchema, this._.schema, this._.tableNamesMap, schema.fullSchema[tableName], columns, dialect, session, this.mode);\n            }\n        }\n    }\n    $with(alias) {\n        return {\n            as(qb) {\n                if (typeof qb === 'function') {\n                    qb = qb(new QueryBuilder());\n                }\n                return new Proxy(new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.W(qb.getSQL(), qb.getSelectedFields(), alias, true), new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }));\n            },\n        };\n    }\n    with(...queries) {\n        const self = this;\n        function select(fields) {\n            return new MySqlSelectBuilder({\n                fields: fields ?? undefined,\n                session: self.session,\n                dialect: self.dialect,\n                withList: queries,\n            });\n        }\n        function selectDistinct(fields) {\n            return new MySqlSelectBuilder({\n                fields: fields ?? undefined,\n                session: self.session,\n                dialect: self.dialect,\n                withList: queries,\n                distinct: true,\n            });\n        }\n        return { select, selectDistinct };\n    }\n    select(fields) {\n        return new MySqlSelectBuilder({ fields: fields ?? undefined, session: this.session, dialect: this.dialect });\n    }\n    selectDistinct(fields) {\n        return new MySqlSelectBuilder({\n            fields: fields ?? undefined,\n            session: this.session,\n            dialect: this.dialect,\n            distinct: true,\n        });\n    }\n    update(table) {\n        return new MySqlUpdateBuilder(table, this.session, this.dialect);\n    }\n    insert(table) {\n        return new MySqlInsertBuilder(table, this.session, this.dialect);\n    }\n    delete(table) {\n        return new MySqlDelete(table, this.session, this.dialect);\n    }\n    execute(query) {\n        return this.session.execute(query.getSQL());\n    }\n    transaction(transaction, config) {\n        return this.session.transaction(transaction, config);\n    }\n}\n\nclass PreparedQuery {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlPreparedQuery';\n    /** @internal */\n    joinsNotNullableMap;\n}\nclass MySqlSession {\n    dialect;\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlSession';\n    constructor(dialect) {\n        this.dialect = dialect;\n    }\n    execute(query) {\n        return this.prepareQuery(this.dialect.sqlToQuery(query), undefined).execute();\n    }\n    getSetTransactionSQL(config) {\n        const parts = [];\n        if (config.isolationLevel) {\n            parts.push(`isolation level ${config.isolationLevel}`);\n        }\n        return parts.length ? _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(['set transaction ', parts.join(' ')]) : undefined;\n    }\n    getStartTransactionSQL(config) {\n        const parts = [];\n        if (config.withConsistentSnapshot) {\n            parts.push('with consistent snapshot');\n        }\n        if (config.accessMode) {\n            parts.push(config.accessMode);\n        }\n        return parts.length ? _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.s.join(['start transaction ', parts.join(' ')]) : undefined;\n    }\n}\nclass MySqlTransaction extends MySqlDatabase {\n    schema;\n    nestedIndex;\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlTransaction';\n    constructor(dialect, session, schema, nestedIndex, mode) {\n        super(dialect, session, schema, mode);\n        this.schema = schema;\n        this.nestedIndex = nestedIndex;\n    }\n    rollback() {\n        throw new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.l();\n    }\n}\n\nclass MySqlUpdateBuilder {\n    table;\n    session;\n    dialect;\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlUpdateBuilder';\n    constructor(table, session, dialect) {\n        this.table = table;\n        this.session = session;\n        this.dialect = dialect;\n    }\n    set(values) {\n        return new MySqlUpdate(this.table, (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.d)(this.table, values), this.session, this.dialect);\n    }\n}\nclass MySqlUpdate extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.Q {\n    session;\n    dialect;\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlUpdate';\n    config;\n    constructor(table, set, session, dialect) {\n        super();\n        this.session = session;\n        this.dialect = dialect;\n        this.config = { set, table };\n    }\n    where(where) {\n        this.config.where = where;\n        return this;\n    }\n    /** @internal */\n    getSQL() {\n        return this.dialect.buildUpdateQuery(this.config);\n    }\n    toSQL() {\n        const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n        return rest;\n    }\n    prepare() {\n        return this.session.prepareQuery(this.dialect.sqlToQuery(this.getSQL()), this.config.returning);\n    }\n    execute = (placeholderValues) => {\n        return this.prepare().execute(placeholderValues);\n    };\n    createIterator = () => {\n        const self = this;\n        return async function* (placeholderValues) {\n            yield* self.prepare().iterator(placeholderValues);\n        };\n    };\n    iterator = this.createIterator();\n}\n\nclass ViewBuilderCore {\n    name;\n    schema;\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlViewBuilder';\n    constructor(name, schema) {\n        this.name = name;\n        this.schema = schema;\n    }\n    config = {};\n    algorithm(algorithm) {\n        this.config.algorithm = algorithm;\n        return this;\n    }\n    definer(definer) {\n        this.config.definer = definer;\n        return this;\n    }\n    sqlSecurity(sqlSecurity) {\n        this.config.sqlSecurity = sqlSecurity;\n        return this;\n    }\n    withCheckOption(withCheckOption) {\n        this.config.withCheckOption = withCheckOption ?? 'cascaded';\n        return this;\n    }\n}\nclass ViewBuilder extends ViewBuilderCore {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlViewBuilder';\n    as(qb) {\n        if (typeof qb === 'function') {\n            qb = qb(new QueryBuilder());\n        }\n        const selectionProxy = new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n            alias: this.name,\n            sqlBehavior: 'error',\n            sqlAliasedBehavior: 'alias',\n            replaceOriginalName: true,\n        });\n        const aliasedSelection = new Proxy(qb.getSelectedFields(), selectionProxy);\n        return new Proxy(new MySqlView({\n            mysqlConfig: this.config,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: aliasedSelection,\n                query: qb.getSQL().inlineParams(),\n            },\n        }), selectionProxy);\n    }\n}\nclass ManualViewBuilder extends ViewBuilderCore {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlManualViewBuilder';\n    columns;\n    constructor(name, columns, schema) {\n        super(name, schema);\n        this.columns = (0,_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.I)(mysqlTable(name, columns));\n    }\n    existing() {\n        return new Proxy(new MySqlView({\n            mysqlConfig: undefined,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: this.columns,\n                query: undefined,\n            },\n        }), new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n            alias: this.name,\n            sqlBehavior: 'error',\n            sqlAliasedBehavior: 'alias',\n            replaceOriginalName: true,\n        }));\n    }\n    as(query) {\n        return new Proxy(new MySqlView({\n            mysqlConfig: this.config,\n            config: {\n                name: this.name,\n                schema: this.schema,\n                selectedFields: this.columns,\n                query: query.inlineParams(),\n            },\n        }), new _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.j({\n            alias: this.name,\n            sqlBehavior: 'error',\n            sqlAliasedBehavior: 'alias',\n            replaceOriginalName: true,\n        }));\n    }\n}\nclass MySqlViewBase extends _alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.v {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlViewBase';\n}\nconst MySqlViewConfig = Symbol.for('drizzle:MySqlViewConfig');\nclass MySqlView extends MySqlViewBase {\n    static [_alias_cf8e03cd_mjs__WEBPACK_IMPORTED_MODULE_0__.e] = 'MySqlView';\n    [MySqlViewConfig];\n    constructor({ mysqlConfig, config }) {\n        super(config);\n        this[MySqlViewConfig] = mysqlConfig;\n    }\n}\n/** @internal */\nfunction mysqlViewWithSchema(name, selection, schema) {\n    if (selection) {\n        return new ManualViewBuilder(name, selection, schema);\n    }\n    return new ViewBuilder(name, schema);\n}\nfunction mysqlView(name, selection) {\n    return mysqlViewWithSchema(name, selection, undefined);\n}\n\n\n//# sourceMappingURL=view-23898f21.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/drizzle-orm/view-23898f21.mjs\n");

/***/ })

};
;